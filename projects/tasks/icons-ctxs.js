'use strict';

var icons = [
  ['alert', 16, 16, g => {
    g.beginPath();
    g.moveTo(8.893, 1.5);
    g.bezierCurveTo(8.71, 1.19, 8.373, 1, 8.006, 1);
    g.bezierCurveTo(7.639, 1, 7.303, 1.19, 7.12, 1.5);
    g.lineTo(0.138, 13.499);
    g.ellipse(0.98055549, 13.9995, 0.98, 0.98, 0, -2.60557726, 2.60557726, true);
    g.bezierCurveTo(0.331, 14.81, 0.668, 15.001, 1.024, 15.001);
    g.lineTo(14.988, 15.001);
    g.bezierCurveTo(15.355, 15.001, 15.692, 14.811, 15.865, 14.501);
    g.ellipse(14.97011482, 13.99101911, 1.03, 1.03, 0, -5.76520422, -0.49802167, true);
    g.lineTo(8.893, 1.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9.026, 12.997);
    g.lineTo(6.987, 12.997);
    g.lineTo(6.987, 10.994);
    g.lineTo(9.026, 10.994);
    g.lineTo(9.026, 12.997);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9.026, 9.993);
    g.lineTo(6.987, 9.993);
    g.lineTo(6.987, 5.987);
    g.lineTo(9.026, 5.987);
    g.lineTo(9.026, 9.993);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['arrow-down', 10, 16, g => {
    g.beginPath();
    g.moveTo(7, 7);
    g.lineTo(7, 3);
    g.lineTo(3, 3);
    g.lineTo(3, 7);
    g.lineTo(0, 7);
    g.lineTo(5, 13);
    g.lineTo(10, 7);
    g.lineTo(7, 7);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['arrow-left', 10, 16, g => {
    g.beginPath();
    g.moveTo(6, 3);
    g.lineTo(0, 8);
    g.lineTo(6, 13);
    g.lineTo(6, 10);
    g.lineTo(10, 10);
    g.lineTo(10, 6);
    g.lineTo(6, 6);
    g.lineTo(6, 3);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['arrow-right', 10, 16, g => {
    g.beginPath();
    g.moveTo(10, 8);
    g.lineTo(4, 3);
    g.lineTo(4, 6);
    g.lineTo(0, 6);
    g.lineTo(0, 10);
    g.lineTo(4, 10);
    g.lineTo(4, 13);
    g.lineTo(10, 8);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['arrow-small-down', 6, 16, g => {
    g.beginPath();
    g.moveTo(4, 7);
    g.lineTo(4, 5);
    g.lineTo(2, 5);
    g.lineTo(2, 7);
    g.lineTo(0, 7);
    g.lineTo(3, 11);
    g.lineTo(6, 7);
    g.lineTo(4, 7);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['arrow-small-left', 6, 16, g => {
    g.beginPath();
    g.moveTo(4, 7);
    g.lineTo(4, 5);
    g.lineTo(0, 8);
    g.lineTo(4, 11);
    g.lineTo(4, 9);
    g.lineTo(6, 9);
    g.lineTo(6, 7);
    g.lineTo(4, 7);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['arrow-small-right', 6, 16, g => {
    g.beginPath();
    g.moveTo(6, 8);
    g.lineTo(2, 5);
    g.lineTo(2, 7);
    g.lineTo(0, 7);
    g.lineTo(0, 9);
    g.lineTo(2, 9);
    g.lineTo(2, 11);
    g.lineTo(6, 8);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['arrow-small-up', 6, 16, g => {
    g.beginPath();
    g.moveTo(3, 5);
    g.lineTo(0, 9);
    g.lineTo(2, 9);
    g.lineTo(2, 11);
    g.lineTo(4, 11);
    g.lineTo(4, 9);
    g.lineTo(6, 9);
    g.lineTo(3, 5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['arrow-up', 10, 16, g => {
    g.beginPath();
    g.moveTo(5, 3);
    g.lineTo(0, 9);
    g.lineTo(3, 9);
    g.lineTo(3, 13);
    g.lineTo(7, 13);
    g.lineTo(7, 9);
    g.lineTo(10, 9);
    g.lineTo(5, 3);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['beaker', 16, 16, g => {
    g.beginPath();
    g.moveTo(14.84, 14.59);
    g.lineTo(11.46, 7);
    g.lineTo(11.46, 3);
    g.lineTo(12.46, 3);
    g.lineTo(12.46, 2);
    g.lineTo(3.46, 2);
    g.lineTo(3.46, 3);
    g.lineTo(4.46, 3);
    g.lineTo(4.46, 7);
    g.lineTo(1.09, 14.59);
    g.ellipse(2.00208455, 15.00000217, 1, 1, 0, -2.71913621, 1.57288087, true);
    g.lineTo(13.94, 16);
    g.bezierCurveTo(14.66, 16, 15.14, 15.25, 14.85, 14.59);
    g.lineTo(14.84, 14.59);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4.21, 10);
    g.lineTo(5.46, 7);
    g.lineTo(5.46, 3);
    g.lineTo(10.46, 3);
    g.lineTo(10.46, 7);
    g.lineTo(11.71, 10);
    g.lineTo(4.21, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8.46, 8);
    g.lineTo(9.46, 8);
    g.lineTo(9.46, 9);
    g.lineTo(8.46, 9);
    g.lineTo(8.46, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7.46, 7);
    g.lineTo(6.46, 7);
    g.lineTo(6.46, 6);
    g.lineTo(7.46, 6);
    g.lineTo(7.46, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7.46, 4);
    g.lineTo(8.46, 4);
    g.lineTo(8.46, 5);
    g.lineTo(7.46, 5);
    g.lineTo(7.46, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7.46, 1);
    g.lineTo(6.46, 1);
    g.lineTo(6.46, 0);
    g.lineTo(7.46, 0);
    g.lineTo(7.46, 1);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['bell', 14, 16, g => {
    g.beginPath();
    g.moveTo(14, 12);
    g.lineTo(14, 13);
    g.lineTo(0, 13);
    g.lineTo(0, 12);
    g.lineTo(0.73, 11.42);
    g.bezierCurveTo(1.5, 10.65, 1.54, 8.87, 1.92, 7);
    g.bezierCurveTo(2.69, 3.23, 6, 2, 6, 2);
    g.bezierCurveTo(6, 1.45, 6.45, 1, 7, 1);
    g.bezierCurveTo(7.55, 1, 8, 1.45, 8, 2);
    g.bezierCurveTo(8, 2, 11.39, 3.23, 12.16, 7);
    g.bezierCurveTo(12.54, 8.88, 12.58, 10.66, 13.35, 11.42);
    g.lineTo(14.01, 12);
    g.lineTo(14, 12);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 16);
    g.bezierCurveTo(8.11, 16, 9, 15.11, 9, 14);
    g.lineTo(5, 14);
    g.bezierCurveTo(5, 15.11, 5.89, 16, 7, 16);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['bold', 10, 16, g => {
    g.beginPath();
    g.moveTo(1, 2);
    g.lineTo(4.83, 2);
    g.bezierCurveTo(7.31, 2, 9.13, 2.75, 9.13, 4.95);
    g.bezierCurveTo(9.13, 6.09, 8.5, 7.18, 7.46, 7.56);
    g.lineTo(7.46, 7.62);
    g.bezierCurveTo(8.79, 7.92, 9.76, 8.85, 9.76, 10.48);
    g.bezierCurveTo(9.76, 12.87, 7.79, 14, 5.15, 14);
    g.lineTo(1, 14);
    g.lineTo(1, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4.66, 6.95);
    g.bezierCurveTo(6.33, 6.95, 7.04, 6.29, 7.04, 5.26);
    g.bezierCurveTo(7.04, 4.09, 6.26, 3.65, 4.7, 3.65);
    g.lineTo(3.13, 3.65);
    g.lineTo(3.13, 6.95);
    g.lineTo(4.66, 6.95);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4.93, 12.34);
    g.bezierCurveTo(6.7, 12.34, 7.68, 11.7, 7.68, 10.36);
    g.bezierCurveTo(7.68, 9.09, 6.73, 8.55, 4.93, 8.55);
    g.lineTo(3.13, 8.55);
    g.lineTo(3.13, 12.35);
    g.lineTo(4.93, 12.35);
    g.lineTo(4.93, 12.34);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['book', 16, 16, g => {
    g.beginPath();
    g.moveTo(3, 5);
    g.lineTo(7, 5);
    g.lineTo(7, 6);
    g.lineTo(3, 6);
    g.lineTo(3, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 8);
    g.lineTo(7, 8);
    g.lineTo(7, 7);
    g.lineTo(3, 7);
    g.lineTo(3, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 10);
    g.lineTo(7, 10);
    g.lineTo(7, 9);
    g.lineTo(3, 9);
    g.lineTo(3, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14, 5);
    g.lineTo(10, 5);
    g.lineTo(10, 6);
    g.lineTo(14, 6);
    g.lineTo(14, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14, 7);
    g.lineTo(10, 7);
    g.lineTo(10, 8);
    g.lineTo(14, 8);
    g.lineTo(14, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14, 9);
    g.lineTo(10, 9);
    g.lineTo(10, 10);
    g.lineTo(14, 10);
    g.lineTo(14, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(16, 3);
    g.lineTo(16, 12);
    g.bezierCurveTo(16, 12.55, 15.55, 13, 15, 13);
    g.lineTo(9.5, 13);
    g.lineTo(8.5, 14);
    g.lineTo(7.5, 13);
    g.lineTo(2, 13);
    g.bezierCurveTo(1.45, 13, 1, 12.55, 1, 12);
    g.lineTo(1, 3);
    g.bezierCurveTo(1, 2.45, 1.45, 2, 2, 2);
    g.lineTo(7.5, 2);
    g.lineTo(8.5, 3);
    g.lineTo(9.5, 2);
    g.lineTo(15, 2);
    g.bezierCurveTo(15.55, 2, 16, 2.45, 16, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 3.5);
    g.lineTo(7.5, 3);
    g.lineTo(2, 3);
    g.lineTo(2, 12);
    g.lineTo(8, 12);
    g.lineTo(8, 3.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15, 3);
    g.lineTo(9.5, 3);
    g.lineTo(9, 3.5);
    g.lineTo(9, 12);
    g.lineTo(15, 12);
    g.lineTo(15, 3);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['bookmark', 10, 16, g => {
    g.beginPath();
    g.moveTo(9, 0);
    g.lineTo(1, 0);
    g.bezierCurveTo(0.27, 0, 0, 0.27, 0, 1);
    g.lineTo(0, 16);
    g.lineTo(5, 12.91);
    g.lineTo(10, 16);
    g.lineTo(10, 1);
    g.bezierCurveTo(10, 0.27, 9.73, 0, 9, 0);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8.22, 4.25);
    g.lineTo(6.36, 5.61);
    g.lineTo(7.08, 7.77);
    g.bezierCurveTo(7.14, 7.99, 7.06, 8.05, 6.88, 7.94);
    g.lineTo(5, 6.6);
    g.lineTo(3.12, 7.94);
    g.bezierCurveTo(2.93, 8.05, 2.87, 7.99, 2.92, 7.77);
    g.lineTo(3.64, 5.61);
    g.lineTo(1.78, 4.25);
    g.bezierCurveTo(1.61, 4.09, 1.64, 4.02, 1.87, 4.02);
    g.lineTo(4.17, 3.99);
    g.lineTo(4.87, 1.83);
    g.lineTo(5.12, 1.83);
    g.lineTo(5.82, 3.99);
    g.lineTo(8.12, 4.02);
    g.bezierCurveTo(8.35, 4.02, 8.39, 4.1, 8.21, 4.25);
    g.lineTo(8.22, 4.25);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['briefcase', 14, 16, g => {
    g.beginPath();
    g.moveTo(9, 4);
    g.lineTo(9, 3);
    g.bezierCurveTo(9, 2.45, 8.55, 2, 8, 2);
    g.lineTo(6, 2);
    g.bezierCurveTo(5.45, 2, 5, 2.45, 5, 3);
    g.lineTo(5, 4);
    g.lineTo(1, 4);
    g.bezierCurveTo(0.45, 4, 0, 4.45, 0, 5);
    g.lineTo(0, 13);
    g.bezierCurveTo(0, 13.55, 0.45, 14, 1, 14);
    g.lineTo(13, 14);
    g.bezierCurveTo(13.55, 14, 14, 13.55, 14, 13);
    g.lineTo(14, 5);
    g.bezierCurveTo(14, 4.45, 13.55, 4, 13, 4);
    g.lineTo(9, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 3);
    g.lineTo(8, 3);
    g.lineTo(8, 4);
    g.lineTo(6, 4);
    g.lineTo(6, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 9);
    g.lineTo(8, 9);
    g.lineTo(8, 10);
    g.lineTo(6, 10);
    g.lineTo(6, 9);
    g.lineTo(1, 9);
    g.lineTo(1, 5);
    g.lineTo(2, 5);
    g.lineTo(2, 8);
    g.lineTo(12, 8);
    g.lineTo(12, 5);
    g.lineTo(13, 5);
    g.lineTo(13, 9);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['broadcast', 16, 16, g => {
    g.beginPath();
    g.moveTo(9, 9);
    g.lineTo(8, 9);
    g.bezierCurveTo(8.55, 9, 9, 8.55, 9, 8);
    g.lineTo(9, 7);
    g.bezierCurveTo(9, 6.45, 8.55, 6, 8, 6);
    g.lineTo(7, 6);
    g.bezierCurveTo(6.45, 6, 6, 6.45, 6, 7);
    g.lineTo(6, 8);
    g.bezierCurveTo(6, 8.55, 6.45, 9, 7, 9);
    g.lineTo(6, 9);
    g.bezierCurveTo(5.45, 9, 5, 9.45, 5, 10);
    g.lineTo(5, 12);
    g.lineTo(6, 12);
    g.lineTo(6, 15);
    g.bezierCurveTo(6, 15.55, 6.45, 16, 7, 16);
    g.lineTo(8, 16);
    g.bezierCurveTo(8.55, 16, 9, 15.55, 9, 15);
    g.lineTo(9, 12);
    g.lineTo(10, 12);
    g.lineTo(10, 10);
    g.bezierCurveTo(10, 9.45, 9.55, 9, 9, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 7);
    g.lineTo(8, 7);
    g.lineTo(8, 8);
    g.lineTo(7, 8);
    g.lineTo(7, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9, 11);
    g.lineTo(8, 11);
    g.lineTo(8, 15);
    g.lineTo(7, 15);
    g.lineTo(7, 11);
    g.lineTo(6, 11);
    g.lineTo(6, 10);
    g.lineTo(9, 10);
    g.lineTo(9, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11.09, 7.5);
    g.bezierCurveTo(11.09, 5.52, 9.48, 3.91, 7.5, 3.91);
    g.ellipse(7.50119975, 7.5029998, 3.593, 3.593, 0, -1.57113024, 2.91505658, true);
    g.lineTo(4, 10.29);
    g.bezierCurveTo(3.39, 9.52, 3, 8.56, 3, 7.49);
    g.bezierCurveTo(3, 5.01, 5.02, 2.99, 7.5, 2.99);
    g.bezierCurveTo(9.98, 2.99, 12, 5.01, 12, 7.49);
    g.bezierCurveTo(12, 8.55, 11.61, 9.52, 11, 10.29);
    g.lineTo(11, 8.31);
    g.bezierCurveTo(11.06, 8.04, 11.09, 7.78, 11.09, 7.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15, 7.5);
    g.bezierCurveTo(15, 10.38, 13.37, 12.88, 11, 14.13);
    g.lineTo(11, 13.08);
    g.ellipse(7.53702144, 7.51676456, 6.553, 6.553, 0, -5.26917097, -0.00255831, true);
    g.ellipse(7.5, 7.5, 6.59, 6.59, 0, -6.28318531, -1.57079633, true);
    g.ellipse(7.5, 7.5, 6.59, 6.59, 0, -1.57079633, 3.14159265, true);
    g.bezierCurveTo(0.91, 9.86, 2.14, 11.92, 4, 13.08);
    g.lineTo(4, 14.13);
    g.ellipse(7.49403614, 7.49699763, 7.497, 7.497, 0, 2.05562627, 4.71318448, false);
    g.bezierCurveTo(11.64, 0, 15, 3.36, 15, 7.5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['browser', 14, 16, g => {
    g.beginPath();
    g.moveTo(5, 3);
    g.lineTo(6, 3);
    g.lineTo(6, 4);
    g.lineTo(5, 4);
    g.lineTo(5, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 3);
    g.lineTo(4, 3);
    g.lineTo(4, 4);
    g.lineTo(3, 4);
    g.lineTo(3, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1, 3);
    g.lineTo(2, 3);
    g.lineTo(2, 4);
    g.lineTo(1, 4);
    g.lineTo(1, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 13);
    g.lineTo(1, 13);
    g.lineTo(1, 5);
    g.lineTo(13, 5);
    g.lineTo(13, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 4);
    g.lineTo(7, 4);
    g.lineTo(7, 3);
    g.lineTo(13, 3);
    g.lineTo(13, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14, 3);
    g.bezierCurveTo(14, 2.45, 13.55, 2, 13, 2);
    g.lineTo(1, 2);
    g.bezierCurveTo(0.45, 2, 0, 2.45, 0, 3);
    g.lineTo(0, 13);
    g.bezierCurveTo(0, 13.55, 0.45, 14, 1, 14);
    g.lineTo(13, 14);
    g.bezierCurveTo(13.55, 14, 14, 13.55, 14, 13);
    g.lineTo(14, 3);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['bug', 16, 16, g => {
    g.beginPath();
    g.moveTo(11.17, 10);
    g.lineTo(14.17, 10);
    g.lineTo(14.17, 9);
    g.lineTo(11.17, 9);
    g.lineTo(11.17, 8);
    g.lineTo(14.34, 6.97);
    g.lineTo(14, 6.03);
    g.lineTo(11.17, 7);
    g.lineTo(11.17, 6);
    g.bezierCurveTo(11.17, 5.45, 10.72, 5, 10.17, 5);
    g.lineTo(10.17, 4);
    g.bezierCurveTo(10.17, 3.52, 9.81, 3.12, 9.34, 3.03);
    g.lineTo(10.37, 2);
    g.lineTo(12.17, 2);
    g.lineTo(12.17, 1);
    g.lineTo(9.97, 1);
    g.lineTo(7.97, 3);
    g.lineTo(7.38, 3);
    g.lineTo(5.37, 1);
    g.lineTo(3.17, 1);
    g.lineTo(3.17, 2);
    g.lineTo(4.97, 2);
    g.lineTo(6, 3.03);
    g.bezierCurveTo(5.53, 3.12, 5.17, 3.51, 5.17, 4);
    g.lineTo(5.17, 5);
    g.bezierCurveTo(4.62, 5, 4.17, 5.45, 4.17, 6);
    g.lineTo(4.17, 7);
    g.lineTo(1.34, 6.03);
    g.lineTo(1, 6.97);
    g.lineTo(4.17, 8);
    g.lineTo(4.17, 9);
    g.lineTo(1.17, 9);
    g.lineTo(1.17, 10);
    g.lineTo(4.17, 10);
    g.lineTo(4.17, 11);
    g.lineTo(1, 12.03);
    g.lineTo(1.34, 12.97);
    g.lineTo(4.17, 12);
    g.lineTo(4.17, 13);
    g.bezierCurveTo(4.17, 13.55, 4.62, 14, 5.17, 14);
    g.lineTo(6.17, 14);
    g.lineTo(7.17, 13);
    g.lineTo(7.17, 6);
    g.lineTo(8.17, 6);
    g.lineTo(8.17, 13);
    g.lineTo(9.17, 14);
    g.lineTo(10.17, 14);
    g.bezierCurveTo(10.72, 14, 11.17, 13.55, 11.17, 13);
    g.lineTo(11.17, 12);
    g.lineTo(14, 12.97);
    g.lineTo(14.34, 12.03);
    g.lineTo(11.17, 11);
    g.lineTo(11.17, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9.17, 5);
    g.lineTo(6.17, 5);
    g.lineTo(6.17, 4);
    g.lineTo(9.17, 4);
    g.lineTo(9.17, 5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['calendar', 14, 16, g => {
    g.beginPath();
    g.moveTo(13, 2);
    g.lineTo(12, 2);
    g.lineTo(12, 3.5);
    g.bezierCurveTo(12, 3.78, 11.78, 4, 11.5, 4);
    g.lineTo(9.5, 4);
    g.bezierCurveTo(9.22, 4, 9, 3.78, 9, 3.5);
    g.lineTo(9, 2);
    g.lineTo(6, 2);
    g.lineTo(6, 3.5);
    g.bezierCurveTo(6, 3.78, 5.78, 4, 5.5, 4);
    g.lineTo(3.5, 4);
    g.bezierCurveTo(3.22, 4, 3, 3.78, 3, 3.5);
    g.lineTo(3, 2);
    g.lineTo(2, 2);
    g.bezierCurveTo(1.45, 2, 1, 2.45, 1, 3);
    g.lineTo(1, 14);
    g.bezierCurveTo(1, 14.55, 1.45, 15, 2, 15);
    g.lineTo(13, 15);
    g.bezierCurveTo(13.55, 15, 14, 14.55, 14, 14);
    g.lineTo(14, 3);
    g.bezierCurveTo(14, 2.45, 13.55, 2, 13, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 14);
    g.lineTo(2, 14);
    g.lineTo(2, 5);
    g.lineTo(13, 5);
    g.lineTo(13, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5, 3);
    g.lineTo(4, 3);
    g.lineTo(4, 1);
    g.lineTo(5, 1);
    g.lineTo(5, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 3);
    g.lineTo(10, 3);
    g.lineTo(10, 1);
    g.lineTo(11, 1);
    g.lineTo(11, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 7);
    g.lineTo(5, 7);
    g.lineTo(5, 6);
    g.lineTo(6, 6);
    g.lineTo(6, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 7);
    g.lineTo(7, 7);
    g.lineTo(7, 6);
    g.lineTo(8, 6);
    g.lineTo(8, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 7);
    g.lineTo(9, 7);
    g.lineTo(9, 6);
    g.lineTo(10, 6);
    g.lineTo(10, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 7);
    g.lineTo(11, 7);
    g.lineTo(11, 6);
    g.lineTo(12, 6);
    g.lineTo(12, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 9);
    g.lineTo(3, 9);
    g.lineTo(3, 8);
    g.lineTo(4, 8);
    g.lineTo(4, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 9);
    g.lineTo(5, 9);
    g.lineTo(5, 8);
    g.lineTo(6, 8);
    g.lineTo(6, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 9);
    g.lineTo(7, 9);
    g.lineTo(7, 8);
    g.lineTo(8, 8);
    g.lineTo(8, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 9);
    g.lineTo(9, 9);
    g.lineTo(9, 8);
    g.lineTo(10, 8);
    g.lineTo(10, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 9);
    g.lineTo(11, 9);
    g.lineTo(11, 8);
    g.lineTo(12, 8);
    g.lineTo(12, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 11);
    g.lineTo(3, 11);
    g.lineTo(3, 10);
    g.lineTo(4, 10);
    g.lineTo(4, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 11);
    g.lineTo(5, 11);
    g.lineTo(5, 10);
    g.lineTo(6, 10);
    g.lineTo(6, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 11);
    g.lineTo(7, 11);
    g.lineTo(7, 10);
    g.lineTo(8, 10);
    g.lineTo(8, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 11);
    g.lineTo(9, 11);
    g.lineTo(9, 10);
    g.lineTo(10, 10);
    g.lineTo(10, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 11);
    g.lineTo(11, 11);
    g.lineTo(11, 10);
    g.lineTo(12, 10);
    g.lineTo(12, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 13);
    g.lineTo(3, 13);
    g.lineTo(3, 12);
    g.lineTo(4, 12);
    g.lineTo(4, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 13);
    g.lineTo(5, 13);
    g.lineTo(5, 12);
    g.lineTo(6, 12);
    g.lineTo(6, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 13);
    g.lineTo(7, 13);
    g.lineTo(7, 12);
    g.lineTo(8, 12);
    g.lineTo(8, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 13);
    g.lineTo(9, 13);
    g.lineTo(9, 12);
    g.lineTo(10, 12);
    g.lineTo(10, 13);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['check', 12, 16, g => {
    g.beginPath();
    g.moveTo(12, 5.5);
    g.lineTo(4, 13.5);
    g.lineTo(0, 9.5);
    g.lineTo(1.5, 8);
    g.lineTo(4, 10.5);
    g.lineTo(10.5, 4);
    g.lineTo(12, 5.5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['checklist', 16, 16, g => {
    g.beginPath();
    g.moveTo(16, 8.5);
    g.lineTo(10, 14.5);
    g.lineTo(7, 11.5);
    g.lineTo(8.5, 10);
    g.lineTo(10, 11.5);
    g.lineTo(14.5, 7);
    g.lineTo(16, 8.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5.7, 12.2);
    g.lineTo(6.5, 13);
    g.lineTo(2, 13);
    g.bezierCurveTo(1.45, 13, 1, 12.55, 1, 12);
    g.lineTo(1, 3);
    g.bezierCurveTo(1, 2.45, 1.45, 2, 2, 2);
    g.lineTo(9, 2);
    g.bezierCurveTo(9.55, 2, 10, 2.45, 10, 3);
    g.lineTo(10, 9.5);
    g.lineTo(9.2, 8.7);
    g.bezierCurveTo(8.81, 8.31, 8.17, 8.31, 7.78, 8.7);
    g.lineTo(5.7, 10.8);
    g.ellipse(6.40355597, 11.505, 0.996, 0.996, 0, -2.3551693, 2.3551693, true);
    g.lineTo(5.7, 12.2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 4);
    g.lineTo(9, 4);
    g.lineTo(9, 3);
    g.lineTo(4, 3);
    g.lineTo(4, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 6);
    g.lineTo(9, 6);
    g.lineTo(9, 5);
    g.lineTo(4, 5);
    g.lineTo(4, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 8);
    g.lineTo(7, 8);
    g.lineTo(7, 7);
    g.lineTo(4, 7);
    g.lineTo(4, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 9);
    g.lineTo(2, 9);
    g.lineTo(2, 10);
    g.lineTo(3, 10);
    g.lineTo(3, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 7);
    g.lineTo(2, 7);
    g.lineTo(2, 8);
    g.lineTo(3, 8);
    g.lineTo(3, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 5);
    g.lineTo(2, 5);
    g.lineTo(2, 6);
    g.lineTo(3, 6);
    g.lineTo(3, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 3);
    g.lineTo(2, 3);
    g.lineTo(2, 4);
    g.lineTo(3, 4);
    g.lineTo(3, 3);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['chevron-down', 10, 16, g => {
    g.beginPath();
    g.moveTo(5, 11.5);
    g.lineTo(0, 6.5);
    g.lineTo(1.5, 5);
    g.lineTo(5, 8.75);
    g.lineTo(8.5, 5);
    g.lineTo(10, 6.5);
    g.lineTo(5, 11.5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['chevron-left', 8, 16, g => {
    g.beginPath();
    g.moveTo(6, 3);
    g.lineTo(7.5, 4.5);
    g.lineTo(3.75, 8);
    g.lineTo(7.5, 11.5);
    g.lineTo(6, 13);
    g.lineTo(1, 8);
    g.lineTo(6, 3);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['chevron-right', 8, 16, g => {
    g.beginPath();
    g.moveTo(7.5, 8);
    g.lineTo(2.5, 13);
    g.lineTo(1, 11.5);
    g.lineTo(4.75, 8);
    g.lineTo(1, 4.5);
    g.lineTo(2.5, 3);
    g.lineTo(7.5, 8);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['chevron-up', 10, 16, g => {
    g.beginPath();
    g.moveTo(10, 10);
    g.lineTo(8.5, 11.5);
    g.lineTo(5, 7.75);
    g.lineTo(1.5, 11.5);
    g.lineTo(0, 10);
    g.lineTo(5, 5);
    g.lineTo(10, 10);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['circle-slash', 14, 16, g => {
    g.beginPath();
    g.moveTo(7, 1);
    g.bezierCurveTo(3.14, 1, 0, 4.14, 0, 8);
    g.bezierCurveTo(0, 11.86, 3.14, 15, 7, 15);
    g.bezierCurveTo(10.86, 15, 14, 11.86, 14, 8);
    g.bezierCurveTo(14, 4.14, 10.86, 1, 7, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 2.3);
    g.bezierCurveTo(8.3, 2.3, 9.5, 2.74, 10.47, 3.47);
    g.lineTo(2.47, 11.47);
    g.ellipse(7.05499416, 7.99180312, 5.755, 5.755, 0, 2.49260742, 3.14016835, false);
    g.bezierCurveTo(1.3, 4.86, 3.86, 2.3, 7, 2.3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 13.71);
    g.bezierCurveTo(5.7, 13.71, 4.5, 13.27, 3.53, 12.54);
    g.lineTo(11.53, 4.54);
    g.bezierCurveTo(12.26, 5.51, 12.7, 6.71, 12.7, 8.01);
    g.bezierCurveTo(12.7, 11.15, 10.14, 13.71, 7, 13.71);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['circuit-board', 14, 16, g => {
    g.beginPath();
    g.moveTo(3, 5);
    g.bezierCurveTo(3, 4.45, 3.45, 4, 4, 4);
    g.bezierCurveTo(4.55, 4, 5, 4.45, 5, 5);
    g.bezierCurveTo(5, 5.55, 4.55, 6, 4, 6);
    g.bezierCurveTo(3.45, 6, 3, 5.55, 3, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 5);
    g.bezierCurveTo(11, 4.45, 10.55, 4, 10, 4);
    g.bezierCurveTo(9.45, 4, 9, 4.45, 9, 5);
    g.bezierCurveTo(9, 5.55, 9.45, 6, 10, 6);
    g.bezierCurveTo(10.55, 6, 11, 5.55, 11, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 11);
    g.bezierCurveTo(11, 10.45, 10.55, 10, 10, 10);
    g.bezierCurveTo(9.45, 10, 9, 10.45, 9, 11);
    g.bezierCurveTo(9, 11.55, 9.45, 12, 10, 12);
    g.bezierCurveTo(10.55, 12, 11, 11.55, 11, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 1);
    g.lineTo(5, 1);
    g.lineTo(5, 3.17);
    g.bezierCurveTo(5.36, 3.36, 5.64, 3.64, 5.83, 4);
    g.lineTo(8.17, 4);
    g.bezierCurveTo(8.59, 3.22, 9.5, 2.72, 10.51, 2.95);
    g.bezierCurveTo(11.26, 3.14, 11.87, 3.75, 12.04, 4.5);
    g.bezierCurveTo(12.35, 5.88, 11.32, 7.09, 9.99, 7.09);
    g.bezierCurveTo(9.19, 7.09, 8.51, 6.65, 8.16, 6);
    g.lineTo(5.83, 6);
    g.bezierCurveTo(5.41, 6.8, 4.5, 7.28, 3.49, 7.03);
    g.bezierCurveTo(2.76, 6.86, 2.15, 6.25, 1.97, 5.51);
    g.bezierCurveTo(1.72, 4.49, 2.2, 3.59, 3, 3.17);
    g.lineTo(3, 1);
    g.lineTo(1, 1);
    g.bezierCurveTo(0.45, 1, 0, 1.45, 0, 2);
    g.lineTo(0, 14);
    g.bezierCurveTo(0, 14.55, 0.45, 15, 1, 15);
    g.lineTo(6, 10);
    g.lineTo(8.17, 10);
    g.bezierCurveTo(8.59, 9.22, 9.5, 8.72, 10.51, 8.95);
    g.bezierCurveTo(11.26, 9.14, 11.87, 9.75, 12.04, 10.5);
    g.bezierCurveTo(12.35, 11.88, 11.32, 13.09, 9.99, 13.09);
    g.bezierCurveTo(9.19, 13.09, 8.51, 12.65, 8.16, 12);
    g.lineTo(6.99, 12);
    g.lineTo(4, 15);
    g.lineTo(13, 15);
    g.bezierCurveTo(13.55, 15, 14, 14.55, 14, 14);
    g.lineTo(14, 2);
    g.bezierCurveTo(14, 1.45, 13.55, 1, 13, 1);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['clippy', 14, 16, g => {
    g.beginPath();
    g.moveTo(2, 13);
    g.lineTo(6, 13);
    g.lineTo(6, 14);
    g.lineTo(2, 14);
    g.lineTo(2, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 7);
    g.lineTo(2, 7);
    g.lineTo(2, 8);
    g.lineTo(7, 8);
    g.lineTo(7, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9, 10);
    g.lineTo(9, 8);
    g.lineTo(6, 11);
    g.lineTo(9, 14);
    g.lineTo(9, 12);
    g.lineTo(14, 12);
    g.lineTo(14, 10);
    g.lineTo(9, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4.5, 9);
    g.lineTo(2, 9);
    g.lineTo(2, 10);
    g.lineTo(4.5, 10);
    g.lineTo(4.5, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 12);
    g.lineTo(4.5, 12);
    g.lineTo(4.5, 11);
    g.lineTo(2, 11);
    g.lineTo(2, 12);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 13);
    g.lineTo(12, 13);
    g.lineTo(12, 15);
    g.bezierCurveTo(11.98, 15.28, 11.89, 15.52, 11.7, 15.7);
    g.bezierCurveTo(11.51, 15.88, 11.28, 15.98, 11, 16);
    g.lineTo(1, 16);
    g.bezierCurveTo(0.45, 16, 0, 15.55, 0, 15);
    g.lineTo(0, 4);
    g.bezierCurveTo(0, 3.45, 0.45, 3, 1, 3);
    g.lineTo(4, 3);
    g.bezierCurveTo(4, 1.89, 4.89, 1, 6, 1);
    g.bezierCurveTo(7.11, 1, 8, 1.89, 8, 3);
    g.lineTo(11, 3);
    g.bezierCurveTo(11.55, 3, 12, 3.45, 12, 4);
    g.lineTo(12, 9);
    g.lineTo(11, 9);
    g.lineTo(11, 6);
    g.lineTo(1, 6);
    g.lineTo(1, 15);
    g.lineTo(11, 15);
    g.lineTo(11, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 5);
    g.lineTo(10, 5);
    g.bezierCurveTo(10, 4.45, 9.55, 4, 9, 4);
    g.lineTo(8, 4);
    g.bezierCurveTo(7.45, 4, 7, 3.55, 7, 3);
    g.bezierCurveTo(7, 2.45, 6.55, 2, 6, 2);
    g.bezierCurveTo(5.45, 2, 5, 2.45, 5, 3);
    g.bezierCurveTo(5, 3.55, 4.55, 4, 4, 4);
    g.lineTo(3, 4);
    g.bezierCurveTo(2.45, 4, 2, 4.45, 2, 5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['clock', 14, 16, g => {
    g.beginPath();
    g.moveTo(8, 8);
    g.lineTo(11, 8);
    g.lineTo(11, 10);
    g.lineTo(7, 10);
    g.bezierCurveTo(6.45, 10, 6, 9.55, 6, 9);
    g.lineTo(6, 4);
    g.lineTo(8, 4);
    g.lineTo(8, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 2.3);
    g.bezierCurveTo(10.14, 2.3, 12.7, 4.86, 12.7, 8);
    g.bezierCurveTo(12.7, 11.14, 10.14, 13.7, 7, 13.7);
    g.ellipse(7.00999126, 7.99000874, 5.71, 5.71, 0, 1.57254611, 3.13984287, false);
    g.bezierCurveTo(1.3, 4.86, 3.86, 2.3, 7, 2.3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 1);
    g.bezierCurveTo(3.14, 1, 0, 4.14, 0, 8);
    g.bezierCurveTo(0, 11.86, 3.14, 15, 7, 15);
    g.bezierCurveTo(10.86, 15, 14, 11.86, 14, 8);
    g.bezierCurveTo(14, 4.14, 10.86, 1, 7, 1);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['cloud-download', 16, 16, g => {
    g.beginPath();
    g.moveTo(9, 12);
    g.lineTo(11, 12);
    g.lineTo(8, 15);
    g.lineTo(5, 12);
    g.lineTo(7, 12);
    g.lineTo(7, 7);
    g.lineTo(9, 7);
    g.lineTo(9, 12);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 4);
    g.bezierCurveTo(12, 3.56, 11.09, 1, 7.5, 1);
    g.bezierCurveTo(5.08, 1, 3, 2.92, 3, 5);
    g.bezierCurveTo(1.02, 5, 0, 6.52, 0, 8);
    g.bezierCurveTo(0, 9.53, 1, 11, 3, 11);
    g.lineTo(6, 11);
    g.lineTo(6, 9.7);
    g.lineTo(3, 9.7);
    g.bezierCurveTo(1.38, 9.7, 1.3, 8.28, 1.3, 8);
    g.bezierCurveTo(1.3, 7.83, 1.35, 6.3, 3, 6.3);
    g.lineTo(4.3, 6.3);
    g.lineTo(4.3, 5);
    g.bezierCurveTo(4.3, 3.61, 5.86, 2.3, 7.5, 2.3);
    g.bezierCurveTo(10.05, 2.3, 10.63, 3.85, 10.7, 4.1);
    g.lineTo(10.7, 5.3);
    g.lineTo(12, 5.3);
    g.bezierCurveTo(12.81, 5.3, 14.7, 5.52, 14.7, 7.5);
    g.bezierCurveTo(14.7, 9.59, 12.45, 9.7, 12, 9.7);
    g.lineTo(10, 9.7);
    g.lineTo(10, 11);
    g.lineTo(12, 11);
    g.bezierCurveTo(14.08, 11, 16, 9.84, 16, 7.5);
    g.bezierCurveTo(16, 5.06, 14.08, 4, 12, 4);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['cloud-upload', 16, 16, g => {
    g.beginPath();
    g.moveTo(7, 9);
    g.lineTo(5, 9);
    g.lineTo(8, 6);
    g.lineTo(11, 9);
    g.lineTo(9, 9);
    g.lineTo(9, 14);
    g.lineTo(7, 14);
    g.lineTo(7, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 5);
    g.bezierCurveTo(12, 4.56, 11.09, 2, 7.5, 2);
    g.bezierCurveTo(5.08, 2, 3, 3.92, 3, 6);
    g.bezierCurveTo(1.02, 6, 0, 7.52, 0, 9);
    g.bezierCurveTo(0, 10.53, 1, 12, 3, 12);
    g.lineTo(6, 12);
    g.lineTo(6, 10.7);
    g.lineTo(3, 10.7);
    g.bezierCurveTo(1.38, 10.7, 1.3, 9.28, 1.3, 9);
    g.bezierCurveTo(1.3, 8.83, 1.35, 7.3, 3, 7.3);
    g.lineTo(4.3, 7.3);
    g.lineTo(4.3, 6);
    g.bezierCurveTo(4.3, 4.61, 5.86, 3.3, 7.5, 3.3);
    g.bezierCurveTo(10.05, 3.3, 10.63, 4.85, 10.7, 5.1);
    g.lineTo(10.7, 6.3);
    g.lineTo(12, 6.3);
    g.bezierCurveTo(12.81, 6.3, 14.7, 6.52, 14.7, 8.5);
    g.bezierCurveTo(14.7, 10.59, 12.45, 10.7, 12, 10.7);
    g.lineTo(10, 10.7);
    g.lineTo(10, 12);
    g.lineTo(12, 12);
    g.bezierCurveTo(14.08, 12, 16, 10.84, 16, 8.5);
    g.bezierCurveTo(16, 6.06, 14.08, 5, 12, 5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['code', 14, 16, g => {
    g.beginPath();
    g.moveTo(9.5, 3);
    g.lineTo(8, 4.5);
    g.lineTo(11.5, 8);
    g.lineTo(8, 11.5);
    g.lineTo(9.5, 13);
    g.lineTo(14, 8);
    g.lineTo(9.5, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4.5, 3);
    g.lineTo(0, 8);
    g.lineTo(4.5, 13);
    g.lineTo(6, 11.5);
    g.lineTo(2.5, 8);
    g.lineTo(6, 4.5);
    g.lineTo(4.5, 3);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['comment-discussion', 16, 16, g => {
    g.beginPath();
    g.moveTo(15, 1);
    g.lineTo(6, 1);
    g.bezierCurveTo(5.45, 1, 5, 1.45, 5, 2);
    g.lineTo(5, 4);
    g.lineTo(1, 4);
    g.bezierCurveTo(0.45, 4, 0, 4.45, 0, 5);
    g.lineTo(0, 11);
    g.bezierCurveTo(0, 11.55, 0.45, 12, 1, 12);
    g.lineTo(2, 12);
    g.lineTo(2, 15);
    g.lineTo(5, 12);
    g.lineTo(9, 12);
    g.bezierCurveTo(9.55, 12, 10, 11.55, 10, 11);
    g.lineTo(10, 9);
    g.lineTo(11, 9);
    g.lineTo(14, 12);
    g.lineTo(14, 9);
    g.lineTo(15, 9);
    g.bezierCurveTo(15.55, 9, 16, 8.55, 16, 8);
    g.lineTo(16, 2);
    g.bezierCurveTo(16, 1.45, 15.55, 1, 15, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9, 11);
    g.lineTo(4.5, 11);
    g.lineTo(3, 12.5);
    g.lineTo(3, 11);
    g.lineTo(1, 11);
    g.lineTo(1, 5);
    g.lineTo(5, 5);
    g.lineTo(5, 8);
    g.bezierCurveTo(5, 8.55, 5.45, 9, 6, 9);
    g.lineTo(9, 9);
    g.lineTo(9, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15, 8);
    g.lineTo(13, 8);
    g.lineTo(13, 9.5);
    g.lineTo(11.5, 8);
    g.lineTo(6, 8);
    g.lineTo(6, 2);
    g.lineTo(15, 2);
    g.lineTo(15, 8);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['comment', 16, 16, g => {
    g.beginPath();
    g.moveTo(14, 1);
    g.lineTo(2, 1);
    g.bezierCurveTo(1.45, 1, 1, 1.45, 1, 2);
    g.lineTo(1, 10);
    g.bezierCurveTo(1, 10.55, 1.45, 11, 2, 11);
    g.lineTo(4, 11);
    g.lineTo(4, 14.5);
    g.lineTo(7.5, 11);
    g.lineTo(14, 11);
    g.bezierCurveTo(14.55, 11, 15, 10.55, 15, 10);
    g.lineTo(15, 2);
    g.bezierCurveTo(15, 1.45, 14.55, 1, 14, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14, 10);
    g.lineTo(7, 10);
    g.lineTo(5, 12);
    g.lineTo(5, 10);
    g.lineTo(2, 10);
    g.lineTo(2, 2);
    g.lineTo(14, 2);
    g.lineTo(14, 10);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['credit-card', 16, 16, g => {
    g.beginPath();
    g.moveTo(12, 9);
    g.lineTo(2, 9);
    g.lineTo(2, 8);
    g.lineTo(12, 8);
    g.lineTo(12, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(16, 3);
    g.lineTo(16, 12);
    g.bezierCurveTo(16, 12.55, 15.55, 13, 15, 13);
    g.lineTo(1, 13);
    g.bezierCurveTo(0.45, 13, 0, 12.55, 0, 12);
    g.lineTo(0, 3);
    g.bezierCurveTo(0, 2.45, 0.45, 2, 1, 2);
    g.lineTo(15, 2);
    g.bezierCurveTo(15.55, 2, 16, 2.45, 16, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15, 6);
    g.lineTo(1, 6);
    g.lineTo(1, 12);
    g.lineTo(15, 12);
    g.lineTo(15, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15, 3);
    g.lineTo(1, 3);
    g.lineTo(1, 4);
    g.lineTo(15, 4);
    g.lineTo(15, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 10);
    g.lineTo(2, 10);
    g.lineTo(2, 11);
    g.lineTo(6, 11);
    g.lineTo(6, 10);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['dash', 8, 16, g => {
    g.beginPath();
    g.moveTo(0, 7);
    g.lineTo(0, 9);
    g.lineTo(8, 9);
    g.lineTo(8, 7);
    g.lineTo(0, 7);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['dashboard', 16, 16, g => {
    g.beginPath();
    g.moveTo(9, 5);
    g.lineTo(8, 5);
    g.lineTo(8, 4);
    g.lineTo(9, 4);
    g.lineTo(9, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 8);
    g.lineTo(12, 8);
    g.lineTo(12, 9);
    g.lineTo(13, 9);
    g.lineTo(13, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 5);
    g.lineTo(5, 5);
    g.lineTo(5, 6);
    g.lineTo(6, 6);
    g.lineTo(6, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5, 8);
    g.lineTo(4, 8);
    g.lineTo(4, 9);
    g.lineTo(5, 9);
    g.lineTo(5, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(16, 2.5);
    g.lineTo(15.5, 2);
    g.lineTo(9, 7);
    g.bezierCurveTo(8.94, 6.98, 8, 7, 8, 7);
    g.bezierCurveTo(7.45, 7, 7, 7.45, 7, 8);
    g.lineTo(7, 9);
    g.bezierCurveTo(7, 9.55, 7.45, 10, 8, 10);
    g.lineTo(9, 10);
    g.bezierCurveTo(9.55, 10, 10, 9.55, 10, 9);
    g.lineTo(10, 8.08);
    g.lineTo(16, 2.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14.41, 6.59);
    g.bezierCurveTo(14.6, 7.2, 14.71, 7.84, 14.71, 8.5);
    g.bezierCurveTo(14.71, 11.92, 11.93, 14.7, 8.51, 14.7);
    g.bezierCurveTo(5.09, 14.7, 2.3, 11.92, 2.3, 8.5);
    g.bezierCurveTo(2.3, 5.08, 5.08, 2.3, 8.5, 2.3);
    g.bezierCurveTo(9.7, 2.3, 10.81, 2.64, 11.77, 3.24);
    g.lineTo(12.71, 2.3);
    g.ellipse(8.50245356, 8.45899618, 7.459, 7.459, 0, -0.97146571, 4.7134007, true);
    g.bezierCurveTo(4.36, 1, 1, 4.36, 1, 8.5);
    g.bezierCurveTo(1, 12.64, 4.36, 16, 8.5, 16);
    g.bezierCurveTo(12.64, 16, 16, 12.64, 16, 8.5);
    g.bezierCurveTo(16, 7.47, 15.8, 6.48, 15.41, 5.59);
    g.lineTo(14.41, 6.59);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['database', 12, 16, g => {
    g.beginPath();
    g.moveTo(6, 15);
    g.bezierCurveTo(2.69, 15, 0, 14.1, 0, 13);
    g.lineTo(0, 11);
    g.bezierCurveTo(0, 10.83, 0.09, 10.66, 0.21, 10.5);
    g.bezierCurveTo(0.88, 11.36, 3.21, 12, 6, 12);
    g.bezierCurveTo(8.79, 12, 11.12, 11.36, 11.79, 10.5);
    g.bezierCurveTo(11.92, 10.66, 12, 10.83, 12, 11);
    g.lineTo(12, 13);
    g.bezierCurveTo(12, 14.1, 9.31, 15, 6, 15);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 11);
    g.bezierCurveTo(2.69, 11, 0, 10.1, 0, 9);
    g.lineTo(0, 7);
    g.bezierCurveTo(0, 6.89, 0.04, 6.79, 0.09, 6.69);
    g.bezierCurveTo(0.12, 6.63, 0.16, 6.56, 0.21, 6.5);
    g.bezierCurveTo(0.88, 7.36, 3.21, 8, 6, 8);
    g.bezierCurveTo(8.79, 8, 11.12, 7.36, 11.79, 6.5);
    g.bezierCurveTo(11.84, 6.56, 11.88, 6.63, 11.91, 6.69);
    g.bezierCurveTo(11.96, 6.79, 12, 6.9, 12, 7);
    g.lineTo(12, 9);
    g.bezierCurveTo(12, 10.1, 9.31, 11, 6, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 7);
    g.bezierCurveTo(2.69, 7, 0, 6.1, 0, 5);
    g.lineTo(0, 4);
    g.lineTo(0, 3);
    g.bezierCurveTo(0, 1.9, 2.69, 1, 6, 1);
    g.bezierCurveTo(9.31, 1, 12, 1.9, 12, 3);
    g.lineTo(12, 5);
    g.bezierCurveTo(12, 6.1, 9.31, 7, 6, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 2);
    g.bezierCurveTo(3.79, 2, 2, 2.45, 2, 3);
    g.bezierCurveTo(2, 3.55, 3.79, 4, 6, 4);
    g.bezierCurveTo(8.21, 4, 10, 3.55, 10, 3);
    g.bezierCurveTo(10, 2.45, 8.21, 2, 6, 2);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['desktop-download', 16, 16, g => {
    g.beginPath();
    g.moveTo(4, 6);
    g.lineTo(7, 6);
    g.lineTo(7, 0);
    g.lineTo(9, 0);
    g.lineTo(9, 6);
    g.lineTo(12, 6);
    g.lineTo(8, 10);
    g.lineTo(4, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15, 2);
    g.lineTo(11, 2);
    g.lineTo(11, 3);
    g.lineTo(15, 3);
    g.lineTo(15, 11);
    g.lineTo(1, 11);
    g.lineTo(1, 3);
    g.lineTo(5, 3);
    g.lineTo(5, 2);
    g.lineTo(1, 2);
    g.bezierCurveTo(0.45, 2, 0, 2.45, 0, 3);
    g.lineTo(0, 12);
    g.bezierCurveTo(0, 12.55, 0.45, 13, 1, 13);
    g.lineTo(6.34, 13);
    g.bezierCurveTo(6.09, 13.61, 5.48, 14.39, 4, 15);
    g.lineTo(12, 15);
    g.bezierCurveTo(10.52, 14.39, 9.91, 13.61, 9.66, 13);
    g.lineTo(15, 13);
    g.bezierCurveTo(15.55, 13, 16, 12.55, 16, 12);
    g.lineTo(16, 3);
    g.bezierCurveTo(16, 2.45, 15.55, 2, 15, 2);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['device-camera-video', 16, 16, g => {
    g.beginPath();
    g.moveTo(15.2, 2.091);
    g.lineTo(10, 5.721);
    g.lineTo(10, 3.001);
    g.bezierCurveTo(10, 2.451, 9.55, 2.001, 9, 2.001);
    g.lineTo(1, 2.001);
    g.bezierCurveTo(0.45, 2.001, 0, 2.451, 0, 3.001);
    g.lineTo(0, 12.001);
    g.bezierCurveTo(0, 12.551, 0.45, 13.001, 1, 13.001);
    g.lineTo(9, 13.001);
    g.bezierCurveTo(9.55, 13.001, 10, 12.551, 10, 12.001);
    g.lineTo(10, 9.281);
    g.lineTo(15.2, 12.911);
    g.bezierCurveTo(15.53, 13.141, 16, 12.911, 16, 12.501);
    g.lineTo(16, 2.501);
    g.bezierCurveTo(16, 2.091, 15.53, 1.861, 15.2, 2.091);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['device-camera', 16, 16, g => {
    g.beginPath();
    g.moveTo(15, 3);
    g.lineTo(7, 3);
    g.bezierCurveTo(7, 2.45, 6.55, 2, 6, 2);
    g.lineTo(2, 2);
    g.bezierCurveTo(1.45, 2, 1, 2.45, 1, 3);
    g.bezierCurveTo(0.45, 3, 0, 3.45, 0, 4);
    g.lineTo(0, 13);
    g.bezierCurveTo(0, 13.55, 0.45, 14, 1, 14);
    g.lineTo(15, 14);
    g.bezierCurveTo(15.55, 14, 16, 13.55, 16, 13);
    g.lineTo(16, 4);
    g.bezierCurveTo(16, 3.45, 15.55, 3, 15, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 5);
    g.lineTo(2, 5);
    g.lineTo(2, 4);
    g.lineTo(6, 4);
    g.lineTo(6, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10.5, 12);
    g.bezierCurveTo(8.56, 12, 7, 10.44, 7, 8.5);
    g.bezierCurveTo(7, 6.56, 8.56, 5, 10.5, 5);
    g.bezierCurveTo(12.44, 5, 14, 6.56, 14, 8.5);
    g.bezierCurveTo(14, 10.44, 12.44, 12, 10.5, 12);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 8.5);
    g.bezierCurveTo(13, 9.88, 11.87, 11, 10.5, 11);
    g.bezierCurveTo(9.13, 11, 8, 9.87, 8, 8.5);
    g.bezierCurveTo(8, 7.13, 9.13, 6, 10.5, 6);
    g.bezierCurveTo(11.87, 6, 13, 7.13, 13, 8.5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['device-desktop', 16, 16, g => {
    g.beginPath();
    g.moveTo(15, 2);
    g.lineTo(1, 2);
    g.bezierCurveTo(0.45, 2, 0, 2.45, 0, 3);
    g.lineTo(0, 12);
    g.bezierCurveTo(0, 12.55, 0.45, 13, 1, 13);
    g.lineTo(6.34, 13);
    g.bezierCurveTo(6.09, 13.61, 5.48, 14.39, 4, 15);
    g.lineTo(12, 15);
    g.bezierCurveTo(10.52, 14.39, 9.91, 13.61, 9.66, 13);
    g.lineTo(15, 13);
    g.bezierCurveTo(15.55, 13, 16, 12.55, 16, 12);
    g.lineTo(16, 3);
    g.bezierCurveTo(16, 2.45, 15.55, 2, 15, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15, 11);
    g.lineTo(1, 11);
    g.lineTo(1, 3);
    g.lineTo(15, 3);
    g.lineTo(15, 11);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['device-mobile', 10, 16, g => {
    g.beginPath();
    g.moveTo(9, 0);
    g.lineTo(1, 0);
    g.bezierCurveTo(0.45, 0, 0, 0.45, 0, 1);
    g.lineTo(0, 15);
    g.bezierCurveTo(0, 15.55, 0.45, 16, 1, 16);
    g.lineTo(9, 16);
    g.bezierCurveTo(9.55, 16, 10, 15.55, 10, 15);
    g.lineTo(10, 1);
    g.bezierCurveTo(10, 0.45, 9.55, 0, 9, 0);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5, 15.3);
    g.bezierCurveTo(4.28, 15.3, 3.7, 14.72, 3.7, 14);
    g.bezierCurveTo(3.7, 13.28, 4.28, 12.7, 5, 12.7);
    g.bezierCurveTo(5.72, 12.7, 6.3, 13.28, 6.3, 14);
    g.bezierCurveTo(6.3, 14.72, 5.72, 15.3, 5, 15.3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9, 12);
    g.lineTo(1, 12);
    g.lineTo(1, 2);
    g.lineTo(9, 2);
    g.lineTo(9, 12);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['diff-added', 14, 16, g => {
    g.beginPath();
    g.moveTo(13, 1);
    g.lineTo(1, 1);
    g.bezierCurveTo(0.45, 1, 0, 1.45, 0, 2);
    g.lineTo(0, 14);
    g.bezierCurveTo(0, 14.55, 0.45, 15, 1, 15);
    g.lineTo(13, 15);
    g.bezierCurveTo(13.55, 15, 14, 14.55, 14, 14);
    g.lineTo(14, 2);
    g.bezierCurveTo(14, 1.45, 13.55, 1, 13, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 14);
    g.lineTo(1, 14);
    g.lineTo(1, 2);
    g.lineTo(13, 2);
    g.lineTo(13, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 9);
    g.lineTo(3, 9);
    g.lineTo(3, 7);
    g.lineTo(6, 7);
    g.lineTo(6, 4);
    g.lineTo(8, 4);
    g.lineTo(8, 7);
    g.lineTo(11, 7);
    g.lineTo(11, 9);
    g.lineTo(8, 9);
    g.lineTo(8, 12);
    g.lineTo(6, 12);
    g.lineTo(6, 9);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['diff-ignored', 14, 16, g => {
    g.beginPath();
    g.moveTo(13, 1);
    g.lineTo(1, 1);
    g.bezierCurveTo(0.45, 1, 0, 1.45, 0, 2);
    g.lineTo(0, 14);
    g.bezierCurveTo(0, 14.55, 0.45, 15, 1, 15);
    g.lineTo(13, 15);
    g.bezierCurveTo(13.55, 15, 14, 14.55, 14, 14);
    g.lineTo(14, 2);
    g.bezierCurveTo(14, 1.45, 13.55, 1, 13, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 14);
    g.lineTo(1, 14);
    g.lineTo(1, 2);
    g.lineTo(13, 2);
    g.lineTo(13, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4.5, 12);
    g.lineTo(3, 12);
    g.lineTo(3, 10.5);
    g.lineTo(9.5, 4);
    g.lineTo(11, 4);
    g.lineTo(11, 5.5);
    g.lineTo(4.5, 12);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['diff-modified', 14, 16, g => {
    g.beginPath();
    g.moveTo(13, 1);
    g.lineTo(1, 1);
    g.bezierCurveTo(0.45, 1, 0, 1.45, 0, 2);
    g.lineTo(0, 14);
    g.bezierCurveTo(0, 14.55, 0.45, 15, 1, 15);
    g.lineTo(13, 15);
    g.bezierCurveTo(13.55, 15, 14, 14.55, 14, 14);
    g.lineTo(14, 2);
    g.bezierCurveTo(14, 1.45, 13.55, 1, 13, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 14);
    g.lineTo(1, 14);
    g.lineTo(1, 2);
    g.lineTo(13, 2);
    g.lineTo(13, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 8);
    g.bezierCurveTo(4, 6.34, 5.34, 5, 7, 5);
    g.bezierCurveTo(8.66, 5, 10, 6.34, 10, 8);
    g.bezierCurveTo(10, 9.66, 8.66, 11, 7, 11);
    g.bezierCurveTo(5.34, 11, 4, 9.66, 4, 8);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['diff-removed', 14, 16, g => {
    g.beginPath();
    g.moveTo(13, 1);
    g.lineTo(1, 1);
    g.bezierCurveTo(0.45, 1, 0, 1.45, 0, 2);
    g.lineTo(0, 14);
    g.bezierCurveTo(0, 14.55, 0.45, 15, 1, 15);
    g.lineTo(13, 15);
    g.bezierCurveTo(13.55, 15, 14, 14.55, 14, 14);
    g.lineTo(14, 2);
    g.bezierCurveTo(14, 1.45, 13.55, 1, 13, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 14);
    g.lineTo(1, 14);
    g.lineTo(1, 2);
    g.lineTo(13, 2);
    g.lineTo(13, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 9);
    g.lineTo(3, 9);
    g.lineTo(3, 7);
    g.lineTo(11, 7);
    g.lineTo(11, 9);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['diff-renamed', 14, 16, g => {
    g.beginPath();
    g.moveTo(6, 9);
    g.lineTo(3, 9);
    g.lineTo(3, 7);
    g.lineTo(6, 7);
    g.lineTo(6, 4);
    g.lineTo(11, 8);
    g.lineTo(6, 12);
    g.lineTo(6, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14, 2);
    g.lineTo(14, 14);
    g.bezierCurveTo(14, 14.55, 13.55, 15, 13, 15);
    g.lineTo(1, 15);
    g.bezierCurveTo(0.45, 15, 0, 14.55, 0, 14);
    g.lineTo(0, 2);
    g.bezierCurveTo(0, 1.45, 0.45, 1, 1, 1);
    g.lineTo(13, 1);
    g.bezierCurveTo(13.55, 1, 14, 1.45, 14, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 2);
    g.lineTo(1, 2);
    g.lineTo(1, 14);
    g.lineTo(13, 14);
    g.lineTo(13, 2);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['diff', 13, 16, g => {
    g.beginPath();
    g.moveTo(6, 7);
    g.lineTo(8, 7);
    g.lineTo(8, 8);
    g.lineTo(6, 8);
    g.lineTo(6, 10);
    g.lineTo(5, 10);
    g.lineTo(5, 8);
    g.lineTo(3, 8);
    g.lineTo(3, 7);
    g.lineTo(5, 7);
    g.lineTo(5, 5);
    g.lineTo(6, 5);
    g.lineTo(6, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 13);
    g.lineTo(8, 13);
    g.lineTo(8, 12);
    g.lineTo(3, 12);
    g.lineTo(3, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7.5, 2);
    g.lineTo(11, 5.5);
    g.lineTo(11, 15);
    g.bezierCurveTo(11, 15.55, 10.55, 16, 10, 16);
    g.lineTo(1, 16);
    g.bezierCurveTo(0.45, 16, 0, 15.55, 0, 15);
    g.lineTo(0, 3);
    g.bezierCurveTo(0, 2.45, 0.45, 2, 1, 2);
    g.lineTo(7.5, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 6);
    g.lineTo(7, 3);
    g.lineTo(1, 3);
    g.lineTo(1, 15);
    g.lineTo(10, 15);
    g.lineTo(10, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8.5, 0);
    g.lineTo(3, 0);
    g.lineTo(3, 1);
    g.lineTo(8, 1);
    g.lineTo(12, 5);
    g.lineTo(12, 13);
    g.lineTo(13, 13);
    g.lineTo(13, 4.5);
    g.lineTo(8.5, 0);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['ellipsis', 12, 16, g => {
    g.beginPath();
    g.moveTo(11, 5);
    g.lineTo(1, 5);
    g.bezierCurveTo(0.45, 5, 0, 5.45, 0, 6);
    g.lineTo(0, 10);
    g.bezierCurveTo(0, 10.55, 0.45, 11, 1, 11);
    g.lineTo(11, 11);
    g.bezierCurveTo(11.55, 11, 12, 10.55, 12, 10);
    g.lineTo(12, 6);
    g.bezierCurveTo(12, 5.45, 11.55, 5, 11, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 9);
    g.lineTo(2, 9);
    g.lineTo(2, 7);
    g.lineTo(4, 7);
    g.lineTo(4, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 9);
    g.lineTo(5, 9);
    g.lineTo(5, 7);
    g.lineTo(7, 7);
    g.lineTo(7, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 9);
    g.lineTo(8, 9);
    g.lineTo(8, 7);
    g.lineTo(10, 7);
    g.lineTo(10, 9);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['eye', 16, 16, g => {
    g.beginPath();
    g.moveTo(8.06, 2);
    g.bezierCurveTo(3, 2, 0, 8, 0, 8);
    g.bezierCurveTo(0, 8, 3, 14, 8.06, 14);
    g.bezierCurveTo(13, 14, 16, 8, 16, 8);
    g.bezierCurveTo(16, 8, 13, 2, 8.06, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 12);
    g.bezierCurveTo(5.8, 12, 4, 10.22, 4, 8);
    g.bezierCurveTo(4, 5.8, 5.8, 4, 8, 4);
    g.bezierCurveTo(10.22, 4, 12, 5.8, 12, 8);
    g.bezierCurveTo(12, 10.22, 10.22, 12, 8, 12);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 8);
    g.bezierCurveTo(10, 9.11, 9.11, 10, 8, 10);
    g.bezierCurveTo(6.89, 10, 6, 9.11, 6, 8);
    g.bezierCurveTo(6, 6.89, 6.89, 6, 8, 6);
    g.bezierCurveTo(9.11, 6, 10, 6.89, 10, 8);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['file-binary', 12, 16, g => {
    g.beginPath();
    g.moveTo(4, 12);
    g.lineTo(5, 12);
    g.lineTo(5, 13);
    g.lineTo(2, 13);
    g.lineTo(2, 12);
    g.lineTo(3, 12);
    g.lineTo(3, 10);
    g.lineTo(2, 10);
    g.lineTo(2, 9);
    g.lineTo(4, 9);
    g.lineTo(4, 12);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 4.5);
    g.lineTo(12, 14);
    g.bezierCurveTo(12, 14.55, 11.55, 15, 11, 15);
    g.lineTo(1, 15);
    g.bezierCurveTo(0.45, 15, 0, 14.55, 0, 14);
    g.lineTo(0, 2);
    g.bezierCurveTo(0, 1.45, 0.45, 1, 1, 1);
    g.lineTo(8.5, 1);
    g.lineTo(12, 4.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 5);
    g.lineTo(8, 2);
    g.lineTo(1, 2);
    g.lineTo(1, 14);
    g.lineTo(11, 14);
    g.lineTo(11, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 4);
    g.lineTo(6, 4);
    g.lineTo(6, 5);
    g.lineTo(7, 5);
    g.lineTo(7, 7);
    g.lineTo(6, 7);
    g.lineTo(6, 8);
    g.lineTo(9, 8);
    g.lineTo(9, 7);
    g.lineTo(8, 7);
    g.lineTo(8, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 4);
    g.lineTo(5, 4);
    g.lineTo(5, 8);
    g.lineTo(2, 8);
    g.lineTo(2, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 7);
    g.lineTo(4, 7);
    g.lineTo(4, 5);
    g.lineTo(3, 5);
    g.lineTo(3, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 9);
    g.lineTo(9, 9);
    g.lineTo(9, 13);
    g.lineTo(6, 13);
    g.lineTo(6, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 12);
    g.lineTo(8, 12);
    g.lineTo(8, 10);
    g.lineTo(7, 10);
    g.lineTo(7, 12);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['file-code', 12, 16, g => {
    g.beginPath();
    g.moveTo(8.5, 1);
    g.lineTo(1, 1);
    g.bezierCurveTo(0.45, 1, 0, 1.45, 0, 2);
    g.lineTo(0, 14);
    g.bezierCurveTo(0, 14.55, 0.45, 15, 1, 15);
    g.lineTo(11, 15);
    g.bezierCurveTo(11.55, 15, 12, 14.55, 12, 14);
    g.lineTo(12, 4.5);
    g.lineTo(8.5, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 14);
    g.lineTo(1, 14);
    g.lineTo(1, 2);
    g.lineTo(8, 2);
    g.lineTo(11, 5);
    g.lineTo(11, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5, 6.98);
    g.lineTo(3.5, 8.5);
    g.lineTo(5, 10);
    g.lineTo(4.5, 11);
    g.lineTo(2, 8.5);
    g.lineTo(4.5, 6);
    g.lineTo(5, 6.98);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7.5, 6);
    g.lineTo(10, 8.5);
    g.lineTo(7.5, 11);
    g.lineTo(7, 10.02);
    g.lineTo(8.5, 8.5);
    g.lineTo(7, 7);
    g.lineTo(7.5, 6);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['file-directory', 14, 16, g => {
    g.beginPath();
    g.moveTo(13, 4);
    g.lineTo(7, 4);
    g.lineTo(7, 3);
    g.bezierCurveTo(7, 2.34, 6.69, 2, 6, 2);
    g.lineTo(1, 2);
    g.bezierCurveTo(0.45, 2, 0, 2.45, 0, 3);
    g.lineTo(0, 13);
    g.bezierCurveTo(0, 13.55, 0.45, 14, 1, 14);
    g.lineTo(13, 14);
    g.bezierCurveTo(13.55, 14, 14, 13.55, 14, 13);
    g.lineTo(14, 5);
    g.bezierCurveTo(14, 4.45, 13.55, 4, 13, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 4);
    g.lineTo(1, 4);
    g.lineTo(1, 3);
    g.lineTo(6, 3);
    g.lineTo(6, 4);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['file-media', 12, 16, g => {
    g.beginPath();
    g.moveTo(6, 5);
    g.lineTo(8, 5);
    g.lineTo(8, 7);
    g.lineTo(6, 7);
    g.lineTo(6, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 4.5);
    g.lineTo(12, 14);
    g.bezierCurveTo(12, 14.55, 11.55, 15, 11, 15);
    g.lineTo(1, 15);
    g.bezierCurveTo(0.45, 15, 0, 14.55, 0, 14);
    g.lineTo(0, 2);
    g.bezierCurveTo(0, 1.45, 0.45, 1, 1, 1);
    g.lineTo(8.5, 1);
    g.lineTo(12, 4.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 5);
    g.lineTo(8, 2);
    g.lineTo(1, 2);
    g.lineTo(1, 13);
    g.lineTo(4, 8);
    g.lineTo(6, 12);
    g.lineTo(8, 10);
    g.lineTo(11, 13);
    g.lineTo(11, 5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['file-pdf', 12, 16, g => {
    g.beginPath();
    g.moveTo(8.5, 1);
    g.lineTo(1, 1);
    g.ellipse(1, 2, 1, 1, 0, -1.57079633, 3.14159265, true);
    g.lineTo(0, 14);
    g.ellipse(1, 14, 1, 1, 0, -3.14159265, 1.57079633, true);
    g.lineTo(11, 15);
    g.ellipse(11, 14, 1, 1, 0, -4.71238898, 0, true);
    g.lineTo(12, 4.5);
    g.lineTo(8.5, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1, 2);
    g.lineTo(5, 2);
    g.ellipse(5.199824, 2.64997721, 0.68, 0.68, 0, -1.86905774, 3.86471811, true);
    g.ellipse(5.51617941, 2.89557716, 1.08, 1.08, 0, -2.44180806, 3.35200967, true);
    g.ellipse(8.56248967, 3.65892794, 4.22, 4.22, 0, -2.90504984, 3.02734617, true);
    g.bezierCurveTo(4.43, 4.749, 4.543, 5.351, 4.71, 5.94);
    g.ellipse(-15.9010908, -1.09927097, 21.78, 21.78, 0, 0.32910781, 0.46154195, false);
    g.bezierCurveTo(3.1, 9.6, 2.8, 10.26, 2.69, 10.44);
    g.ellipse(5.19633489, 17.14807025, 7.161, 7.161, 0, -1.92836518, 4.24970315, true);
    g.ellipse(3.73585152, 14.553518, 4.19, 4.19, 0, -1.99795271, 4.00091898, true);
    g.lineTo(1, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5.42, 6.8);
    g.ellipse(10.82303676, 5.14782152, 5.65, 5.65, 0, -3.43835014, 2.41766492, true);
    g.bezierCurveTo(6.865, 9.127, 7.185, 9.307, 7.53, 9.42);
    g.bezierCurveTo(6.89, 9.51, 6.3, 9.62, 5.72, 9.75);
    g.ellipse(8.59068353, 21.62802913, 12.22, 12.22, 0, -1.80792932, 4.3193097, true);
    g.bezierCurveTo(3.323, 10.583, 4.13, 9.9, 4.52, 9.09);
    g.bezierCurveTo(4.885, 8.35, 5.19, 7.58, 5.43, 6.79);
    g.lineTo(5.42, 6.8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 14);
    g.lineTo(1.5, 14);
    g.ellipse(1.415, 13.26187806, 0.743, 0.743, 0, 1.45614423, 1.68544842, false);
    g.ellipse(0.62295438, 12.00137885, 2.12, 2.12, 0, -5.05241549, 0.8259597, true);
    g.ellipse(-5.08251148, 6.36249142, 10.14, 10.14, 0, -5.49395194, 0.49507707, true);
    g.bezierCurveTo(4.15, 11.05, 4.42, 10.95, 4.65, 10.87);
    g.lineTo(5.07, 10.73);
    g.bezierCurveTo(5.52, 10.6, 6.01, 10.5, 6.51, 10.4);
    g.bezierCurveTo(7.01, 10.3, 7.51, 10.24, 7.99, 10.2);
    g.bezierCurveTo(8.437, 10.416, 8.902, 10.594, 9.38, 10.73);
    g.bezierCurveTo(9.783, 10.84, 10.194, 10.918, 10.61, 10.96);
    g.lineTo(10.99, 10.96);
    g.lineTo(10.99, 14);
    g.lineTo(11, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 9.14);
    g.ellipse(9.1874893, 12.41145303, 3.74, 3.74, 0, -1.06485788, 5.03127142, true);
    g.ellipse(9.37509299, 12.96345686, 4.22, 4.22, 0, -1.33523352, 4.76808294, true);
    g.bezierCurveTo(9.199, 8.753, 8.788, 8.78, 8.38, 8.83);
    g.ellipse(9.46518453, 6.03314917, 3, 3, 0, 1.94091726, 2.33930178, false);
    g.ellipse(11.91606499, 4.15651337, 6.07, 6.07, 0, 2.41477438, 2.8571315, false);
    g.bezierCurveTo(6.201, 5.198, 6.268, 4.53, 6.29, 3.86);
    g.bezierCurveTo(6.31, 3.61, 6.31, 3.36, 6.29, 3.11);
    g.ellipse(5.26547325, 2.88011972, 1.05, 1.05, 0, -6.06246388, -0.66767463, true);
    g.ellipse(5.51953998, 2.81904615, 0.82, 0.82, 0, -0.80142614, 4.66415079, true);
    g.lineTo(8, 2);
    g.lineTo(11, 5);
    g.lineTo(11, 9.14);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['file-submodule', 14, 16, g => {
    g.beginPath();
    g.moveTo(10, 7);
    g.lineTo(4, 7);
    g.lineTo(4, 14);
    g.lineTo(13, 14);
    g.bezierCurveTo(13.55, 14, 14, 13.55, 14, 13);
    g.lineTo(14, 8);
    g.lineTo(10, 8);
    g.lineTo(10, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9, 9);
    g.lineTo(5, 9);
    g.lineTo(5, 8);
    g.lineTo(9, 8);
    g.lineTo(9, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 4);
    g.lineTo(7, 4);
    g.lineTo(7, 3);
    g.bezierCurveTo(7, 2.34, 6.69, 2, 6, 2);
    g.lineTo(1, 2);
    g.bezierCurveTo(0.45, 2, 0, 2.45, 0, 3);
    g.lineTo(0, 13);
    g.bezierCurveTo(0, 13.55, 0.45, 14, 1, 14);
    g.lineTo(3, 14);
    g.lineTo(3, 7);
    g.bezierCurveTo(3, 6.45, 3.45, 6, 4, 6);
    g.lineTo(10, 6);
    g.bezierCurveTo(10.55, 6, 11, 6.45, 11, 7);
    g.lineTo(14, 7);
    g.lineTo(14, 5);
    g.bezierCurveTo(14, 4.45, 13.55, 4, 13, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 4);
    g.lineTo(1, 4);
    g.lineTo(1, 3);
    g.lineTo(6, 3);
    g.lineTo(6, 4);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['file-symlink-directory', 14, 16, g => {
    g.beginPath();
    g.moveTo(13, 4);
    g.lineTo(7, 4);
    g.lineTo(7, 3);
    g.bezierCurveTo(7, 2.34, 6.69, 2, 6, 2);
    g.lineTo(1, 2);
    g.bezierCurveTo(0.45, 2, 0, 2.45, 0, 3);
    g.lineTo(0, 13);
    g.bezierCurveTo(0, 13.55, 0.45, 14, 1, 14);
    g.lineTo(13, 14);
    g.bezierCurveTo(13.55, 14, 14, 13.55, 14, 13);
    g.lineTo(14, 5);
    g.bezierCurveTo(14, 4.45, 13.55, 4, 13, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1, 3);
    g.lineTo(6, 3);
    g.lineTo(6, 4);
    g.lineTo(1, 4);
    g.lineTo(1, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 12);
    g.lineTo(7, 10);
    g.bezierCurveTo(6.02, 9.98, 5.16, 10.22, 4.45, 10.7);
    g.bezierCurveTo(3.74, 11.18, 3.26, 11.95, 3, 13);
    g.bezierCurveTo(3.02, 11.36, 3.39, 10.12, 4.13, 9.27);
    g.bezierCurveTo(4.86, 8.43, 5.82, 8, 7.01, 8);
    g.lineTo(7.01, 6);
    g.lineTo(11.01, 9);
    g.lineTo(7.01, 12);
    g.lineTo(7, 12);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['file-symlink-file', 12, 16, g => {
    g.beginPath();
    g.moveTo(8.5, 1);
    g.lineTo(1, 1);
    g.bezierCurveTo(0.45, 1, 0, 1.45, 0, 2);
    g.lineTo(0, 14);
    g.bezierCurveTo(0, 14.55, 0.45, 15, 1, 15);
    g.lineTo(11, 15);
    g.bezierCurveTo(11.55, 15, 12, 14.55, 12, 14);
    g.lineTo(12, 4.5);
    g.lineTo(8.5, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 14);
    g.lineTo(1, 14);
    g.lineTo(1, 2);
    g.lineTo(8, 2);
    g.lineTo(11, 5);
    g.lineTo(11, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 4.5);
    g.lineTo(10, 7.5);
    g.lineTo(6, 10.5);
    g.lineTo(6, 8.5);
    g.bezierCurveTo(5.02, 8.48, 4.16, 8.72, 3.45, 9.2);
    g.bezierCurveTo(2.74, 9.68, 2.26, 10.45, 2, 11.5);
    g.bezierCurveTo(2.02, 9.86, 2.39, 8.62, 3.13, 7.77);
    g.bezierCurveTo(3.86, 6.93, 4.82, 6.5, 6.01, 6.5);
    g.lineTo(6.01, 4.5);
    g.lineTo(6, 4.5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['file-zip', 12, 16, g => {
    g.beginPath();
    g.moveTo(8.5, 1);
    g.lineTo(1, 1);
    g.ellipse(1, 2, 1, 1, 0, -1.57079633, 3.14159265, true);
    g.lineTo(0, 14);
    g.ellipse(1, 14, 1, 1, 0, -3.14159265, 1.57079633, true);
    g.lineTo(11, 15);
    g.ellipse(11, 14, 1, 1, 0, -4.71238898, 0, true);
    g.lineTo(12, 4.5);
    g.lineTo(8.5, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 14);
    g.lineTo(1, 14);
    g.lineTo(1, 2);
    g.lineTo(4, 2);
    g.lineTo(4, 3);
    g.lineTo(5, 3);
    g.lineTo(5, 2);
    g.lineTo(8, 2);
    g.lineTo(11, 5);
    g.lineTo(11, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5, 4);
    g.lineTo(5, 3);
    g.lineTo(6, 3);
    g.lineTo(6, 4);
    g.lineTo(5, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 4);
    g.lineTo(5, 4);
    g.lineTo(5, 5);
    g.lineTo(4, 5);
    g.lineTo(4, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5, 6);
    g.lineTo(5, 5);
    g.lineTo(6, 5);
    g.lineTo(6, 6);
    g.lineTo(5, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 6);
    g.lineTo(5, 6);
    g.lineTo(5, 7);
    g.lineTo(4, 7);
    g.lineTo(4, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5, 8);
    g.lineTo(5, 7);
    g.lineTo(6, 7);
    g.lineTo(6, 8);
    g.lineTo(5, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 9.28);
    g.ellipse(4.99996357, 11.01207184, 2, 2, 0, -2.09437407, 3.14762861, true);
    g.lineTo(3, 12);
    g.lineTo(7, 12);
    g.lineTo(7, 11);
    g.ellipse(5, 11, 2, 2, 0, -6.28318531, -1.57079633, true);
    g.lineTo(5, 8);
    g.lineTo(4, 8);
    g.lineTo(4, 9.28);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 10);
    g.lineTo(6, 11);
    g.lineTo(4, 11);
    g.lineTo(4, 10);
    g.lineTo(6, 10);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['file', 12, 16, g => {
    g.beginPath();
    g.moveTo(6, 5);
    g.lineTo(2, 5);
    g.lineTo(2, 4);
    g.lineTo(6, 4);
    g.lineTo(6, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 8);
    g.lineTo(9, 8);
    g.lineTo(9, 7);
    g.lineTo(2, 7);
    g.lineTo(2, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 10);
    g.lineTo(9, 10);
    g.lineTo(9, 9);
    g.lineTo(2, 9);
    g.lineTo(2, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 12);
    g.lineTo(9, 12);
    g.lineTo(9, 11);
    g.lineTo(2, 11);
    g.lineTo(2, 12);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 4.5);
    g.lineTo(12, 14);
    g.bezierCurveTo(12, 14.55, 11.55, 15, 11, 15);
    g.lineTo(1, 15);
    g.bezierCurveTo(0.45, 15, 0, 14.55, 0, 14);
    g.lineTo(0, 2);
    g.bezierCurveTo(0, 1.45, 0.45, 1, 1, 1);
    g.lineTo(8.5, 1);
    g.lineTo(12, 4.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 5);
    g.lineTo(8, 2);
    g.lineTo(1, 2);
    g.lineTo(1, 14);
    g.lineTo(11, 14);
    g.lineTo(11, 5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['flame', 12, 16, g => {
    g.beginPath();
    g.moveTo(5.05, 0.01);
    g.bezierCurveTo(5.86, 2.18, 5.46, 3.39, 4.53, 4.32);
    g.bezierCurveTo(3.55, 5.37, 1.98, 6.15, 0.9, 7.68);
    g.bezierCurveTo(-0.55, 9.73, -0.8, 14.21, 4.43, 15.38);
    g.bezierCurveTo(2.23, 14.22, 1.76, 10.86, 4.13, 8.77);
    g.bezierCurveTo(3.52, 10.8, 4.66, 12.1, 6.07, 11.63);
    g.bezierCurveTo(7.46, 11.16, 8.37, 12.16, 8.34, 13.3);
    g.bezierCurveTo(8.32, 14.08, 8.03, 14.74, 7.21, 15.11);
    g.bezierCurveTo(10.63, 14.52, 11.99, 11.69, 11.99, 9.55);
    g.bezierCurveTo(11.99, 6.71, 9.46, 6.33, 10.74, 3.94);
    g.bezierCurveTo(9.22, 4.07, 8.71, 5.07, 8.85, 6.69);
    g.bezierCurveTo(8.94, 7.77, 7.83, 8.49, 6.99, 8.02);
    g.bezierCurveTo(6.32, 7.61, 6.33, 6.83, 6.93, 6.24);
    g.bezierCurveTo(8.18, 5.01, 8.68, 2.15, 5.05, 0.02);
    g.lineTo(5.03, 0);
    g.lineTo(5.05, 0.01);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['fold', 14, 16, g => {
    g.beginPath();
    g.moveTo(7, 9);
    g.lineTo(10, 12);
    g.lineTo(8, 12);
    g.lineTo(8, 15);
    g.lineTo(6, 15);
    g.lineTo(6, 12);
    g.lineTo(4, 12);
    g.lineTo(7, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 3);
    g.lineTo(8, 3);
    g.lineTo(8, 0);
    g.lineTo(6, 0);
    g.lineTo(6, 3);
    g.lineTo(4, 3);
    g.lineTo(7, 6);
    g.lineTo(10, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14, 5);
    g.bezierCurveTo(14, 4.45, 13.55, 4, 13, 4);
    g.lineTo(10.5, 4);
    g.lineTo(9.5, 5);
    g.lineTo(12.5, 5);
    g.lineTo(10.5, 7);
    g.lineTo(3.5, 7);
    g.lineTo(1.5, 5);
    g.lineTo(4.5, 5);
    g.lineTo(3.5, 4);
    g.lineTo(1, 4);
    g.bezierCurveTo(0.45, 4, 0, 4.45, 0, 5);
    g.lineTo(2.5, 7.5);
    g.lineTo(0, 10);
    g.bezierCurveTo(0, 10.55, 0.45, 11, 1, 11);
    g.lineTo(3.5, 11);
    g.lineTo(4.5, 10);
    g.lineTo(1.5, 10);
    g.lineTo(3.5, 8);
    g.lineTo(10.5, 8);
    g.lineTo(12.5, 10);
    g.lineTo(9.5, 10);
    g.lineTo(10.5, 11);
    g.lineTo(13, 11);
    g.bezierCurveTo(13.55, 11, 14, 10.55, 14, 10);
    g.lineTo(11.5, 7.5);
    g.lineTo(14, 5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['gear', 14, 16, g => {
    g.beginPath();
    g.moveTo(14, 8.76);
    g.lineTo(14, 7.16);
    g.lineTo(12.06, 6.52);
    g.lineTo(11.61, 5.43);
    g.lineTo(12.49, 3.59);
    g.lineTo(11.36, 2.46);
    g.lineTo(9.55, 3.37);
    g.lineTo(8.46, 2.92);
    g.lineTo(7.77, 1);
    g.lineTo(6.17, 1);
    g.lineTo(5.54, 2.94);
    g.lineTo(4.43, 3.39);
    g.lineTo(2.59, 2.51);
    g.lineTo(1.46, 3.64);
    g.lineTo(2.37, 5.45);
    g.lineTo(1.92, 6.54);
    g.lineTo(0, 7.22);
    g.lineTo(0, 8.81);
    g.lineTo(1.94, 9.45);
    g.lineTo(2.39, 10.54);
    g.lineTo(1.51, 12.38);
    g.lineTo(2.64, 13.51);
    g.lineTo(4.45, 12.6);
    g.lineTo(5.54, 13.05);
    g.lineTo(6.23, 14.97);
    g.lineTo(7.82, 14.97);
    g.lineTo(8.45, 13.03);
    g.lineTo(9.56, 12.58);
    g.lineTo(11.4, 13.46);
    g.lineTo(12.53, 12.33);
    g.lineTo(11.61, 10.52);
    g.lineTo(12.08, 9.43);
    g.lineTo(14, 8.74);
    g.lineTo(14, 8.76);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 10.99);
    g.bezierCurveTo(5.34, 10.99, 4, 9.65, 4, 7.99);
    g.bezierCurveTo(4, 6.33, 5.34, 4.99, 7, 4.99);
    g.bezierCurveTo(8.66, 4.99, 10, 6.33, 10, 7.99);
    g.bezierCurveTo(10, 9.65, 8.66, 10.99, 7, 10.99);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['gift', 14, 16, g => {
    g.beginPath();
    g.moveTo(13.02, 4);
    g.lineTo(11.64, 4);
    g.bezierCurveTo(11.83, 3.67, 11.97, 3.33, 12, 3.09);
    g.bezierCurveTo(12.06, 2.42, 11.89, 1.87, 11.48, 1.48);
    g.bezierCurveTo(11.12, 1.1, 10.67, 1, 10.12, 1);
    g.lineTo(10.01, 1);
    g.bezierCurveTo(9.48, 1.02, 8.9, 1.25, 8.48, 1.58);
    g.bezierCurveTo(8.06, 1.91, 7.75, 2.3, 7.51, 2.78);
    g.bezierCurveTo(7.28, 2.3, 6.96, 1.9, 6.54, 1.58);
    g.bezierCurveTo(6.12, 1.26, 5.54, 1, 5.01, 1);
    g.lineTo(4.98, 1);
    g.bezierCurveTo(4.42, 1, 3.92, 1.09, 3.54, 1.48);
    g.bezierCurveTo(3.13, 1.87, 2.96, 2.42, 3.02, 3.09);
    g.bezierCurveTo(3.05, 3.32, 3.19, 3.67, 3.38, 4);
    g.lineTo(2, 4);
    g.bezierCurveTo(1.45, 4, 1, 4.45, 1, 5);
    g.lineTo(1, 8);
    g.lineTo(2, 8);
    g.lineTo(2, 13);
    g.bezierCurveTo(2, 13.55, 2.45, 14, 3, 14);
    g.lineTo(12, 14);
    g.bezierCurveTo(12.55, 14, 13, 13.55, 13, 13);
    g.lineTo(13, 8);
    g.lineTo(14, 8);
    g.lineTo(14, 5);
    g.bezierCurveTo(14, 4.45, 13.55, 4, 13, 4);
    g.lineTo(13.02, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8.24, 3.12);
    g.bezierCurveTo(8.41, 2.76, 8.66, 2.45, 8.99, 2.2);
    g.bezierCurveTo(9.29, 1.97, 9.71, 1.81, 10.04, 1.79);
    g.lineTo(10.13, 1.79);
    g.bezierCurveTo(10.58, 1.79, 10.79, 1.9, 10.93, 2.04);
    g.bezierCurveTo(11.07, 2.18, 11.26, 2.43, 11.23, 2.99);
    g.bezierCurveTo(11.18, 3.18, 10.98, 3.6, 10.73, 3.99);
    g.lineTo(7.83, 3.99);
    g.lineTo(8.24, 3.11);
    g.lineTo(8.24, 3.12);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4.11, 2.04);
    g.bezierCurveTo(4.24, 1.91, 4.42, 1.79, 5.02, 1.79);
    g.bezierCurveTo(5.33, 1.79, 5.74, 1.96, 6.05, 2.2);
    g.bezierCurveTo(6.38, 2.45, 6.63, 2.75, 6.8, 3.12);
    g.lineTo(7.22, 4);
    g.lineTo(4.32, 4);
    g.bezierCurveTo(4.07, 3.61, 3.87, 3.19, 3.82, 3);
    g.bezierCurveTo(3.79, 2.44, 3.98, 2.19, 4.12, 2.05);
    g.lineTo(4.11, 2.04);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7.02, 12.99);
    g.lineTo(3.02, 12.99);
    g.lineTo(3.02, 8);
    g.lineTo(7.02, 8);
    g.lineTo(7.02, 13);
    g.lineTo(7.02, 12.99);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7.02, 6.99);
    g.lineTo(2.02, 6.99);
    g.lineTo(2.02, 5);
    g.lineTo(7.02, 5);
    g.lineTo(7.02, 7);
    g.lineTo(7.02, 6.99);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12.02, 12.99);
    g.lineTo(8.02, 12.99);
    g.lineTo(8.02, 8);
    g.lineTo(12.02, 8);
    g.lineTo(12.02, 13);
    g.lineTo(12.02, 12.99);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13.02, 6.99);
    g.lineTo(8.02, 6.99);
    g.lineTo(8.02, 5);
    g.lineTo(13.02, 5);
    g.lineTo(13.02, 7);
    g.lineTo(13.02, 6.99);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['gist-secret', 14, 16, g => {
    g.beginPath();
    g.moveTo(7.782, 10.5);
    g.lineTo(8.782, 14);
    g.lineTo(4.782, 14);
    g.lineTo(5.782, 10.5);
    g.lineTo(5.032, 9);
    g.lineTo(8.532, 9);
    g.lineTo(7.782, 10.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9.782, 6);
    g.lineTo(3.782, 6);
    g.lineTo(1.782, 7);
    g.lineTo(11.782, 7);
    g.lineTo(9.782, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8.782, 2);
    g.lineTo(6.782, 3);
    g.lineTo(4.782, 2);
    g.lineTo(3.782, 5);
    g.lineTo(9.782, 5);
    g.lineTo(8.782, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12.812, 9.75);
    g.lineTo(9.782, 9);
    g.lineTo(10.782, 11);
    g.lineTo(8.782, 14);
    g.lineTo(12.002, 14);
    g.bezierCurveTo(12.452, 14, 12.862, 13.69, 12.972, 13.25);
    g.lineTo(13.532, 10.97);
    g.bezierCurveTo(13.672, 10.44, 13.342, 9.89, 12.812, 9.75);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3.782, 9);
    g.lineTo(0.752, 9.75);
    g.bezierCurveTo(0.222, 9.89, -0.108, 10.44, 0.032, 10.97);
    g.lineTo(0.592, 13.25);
    g.bezierCurveTo(0.702, 13.69, 1.112, 14, 1.562, 14);
    g.lineTo(4.782, 14);
    g.lineTo(2.782, 11);
    g.lineTo(3.782, 9);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['gist', 12, 16, g => {
    g.beginPath();
    g.moveTo(7.5, 5);
    g.lineTo(10, 7.5);
    g.lineTo(7.5, 10);
    g.lineTo(6.75, 9.25);
    g.lineTo(8.5, 7.5);
    g.lineTo(6.75, 5.75);
    g.lineTo(7.5, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4.5, 5);
    g.lineTo(2, 7.5);
    g.lineTo(4.5, 10);
    g.lineTo(5.25, 9.25);
    g.lineTo(3.5, 7.5);
    g.lineTo(5.25, 5.75);
    g.lineTo(4.5, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(0, 13);
    g.lineTo(0, 2);
    g.bezierCurveTo(0, 1.45, 0.45, 1, 1, 1);
    g.lineTo(11, 1);
    g.bezierCurveTo(11.55, 1, 12, 1.45, 12, 2);
    g.lineTo(12, 13);
    g.bezierCurveTo(12, 13.55, 11.55, 14, 11, 14);
    g.lineTo(1, 14);
    g.bezierCurveTo(0.45, 14, 0, 13.55, 0, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1, 13);
    g.lineTo(11, 13);
    g.lineTo(11, 2);
    g.lineTo(1, 2);
    g.lineTo(1, 13);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['git-branch', 10, 16, g => {
    g.beginPath();
    g.moveTo(10, 5);
    g.bezierCurveTo(10, 3.89, 9.11, 3, 8, 3);
    g.ellipse(7.99473412, 4.99299304, 1.993, 1.993, 0, -1.56815414, 2.09337229, true);
    g.lineTo(7, 7.02);
    g.bezierCurveTo(6.98, 7.54, 6.77, 8, 6.37, 8.4);
    g.bezierCurveTo(5.97, 8.8, 5.51, 9.01, 4.99, 9.03);
    g.bezierCurveTo(4.16, 9.05, 3.51, 9.19, 2.99, 9.48);
    g.lineTo(2.99, 4.72);
    g.ellipse(1.99526588, 2.99299304, 1.993, 1.993, 0, -5.23496495, -1.57343852, true);
    g.bezierCurveTo(0.88, 1, 0, 1.89, 0, 3);
    g.ellipse(1.99996357, 2.98792816, 2, 2, 0, -3.14762861, 2.09437407, true);
    g.lineTo(1, 11.28);
    g.bezierCurveTo(0.41, 11.63, 0, 12.27, 0, 13);
    g.bezierCurveTo(0, 14.11, 0.89, 15, 2, 15);
    g.bezierCurveTo(3.11, 15, 4, 14.11, 4, 13);
    g.bezierCurveTo(4, 12.47, 3.8, 12, 3.47, 11.64);
    g.bezierCurveTo(3.56, 11.58, 3.95, 11.23, 4.06, 11.17);
    g.bezierCurveTo(4.31, 11.06, 4.62, 11, 5, 11);
    g.bezierCurveTo(6.05, 10.95, 6.95, 10.55, 7.75, 9.75);
    g.bezierCurveTo(8.55, 8.95, 8.95, 7.77, 9, 6.73);
    g.lineTo(8.98, 6.73);
    g.bezierCurveTo(9.59, 6.37, 10, 5.73, 10, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 1.8);
    g.bezierCurveTo(2.66, 1.8, 3.2, 2.35, 3.2, 3);
    g.bezierCurveTo(3.2, 3.65, 2.65, 4.2, 2, 4.2);
    g.bezierCurveTo(1.35, 4.2, 0.8, 3.65, 0.8, 3);
    g.bezierCurveTo(0.8, 2.35, 1.35, 1.8, 2, 1.8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 14.21);
    g.bezierCurveTo(1.34, 14.21, 0.8, 13.66, 0.8, 13.01);
    g.bezierCurveTo(0.8, 12.36, 1.35, 11.81, 2, 11.81);
    g.bezierCurveTo(2.65, 11.81, 3.2, 12.36, 3.2, 13.01);
    g.bezierCurveTo(3.2, 13.66, 2.65, 14.21, 2, 14.21);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 6.21);
    g.bezierCurveTo(7.34, 6.21, 6.8, 5.66, 6.8, 5.01);
    g.bezierCurveTo(6.8, 4.36, 7.35, 3.81, 8, 3.81);
    g.bezierCurveTo(8.65, 3.81, 9.2, 4.36, 9.2, 5.01);
    g.bezierCurveTo(9.2, 5.66, 8.65, 6.21, 8, 6.21);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['git-commit', 14, 16, g => {
    g.beginPath();
    g.moveTo(10.86, 7);
    g.bezierCurveTo(10.41, 5.28, 8.86, 4, 7, 4);
    g.bezierCurveTo(5.14, 4, 3.59, 5.28, 3.14, 7);
    g.lineTo(0, 7);
    g.lineTo(0, 9);
    g.lineTo(3.14, 9);
    g.bezierCurveTo(3.59, 10.72, 5.14, 12, 7, 12);
    g.bezierCurveTo(8.86, 12, 10.41, 10.72, 10.86, 9);
    g.lineTo(14, 9);
    g.lineTo(14, 7);
    g.lineTo(10.86, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 10.2);
    g.bezierCurveTo(5.78, 10.2, 4.8, 9.22, 4.8, 8);
    g.bezierCurveTo(4.8, 6.78, 5.78, 5.8, 7, 5.8);
    g.bezierCurveTo(8.22, 5.8, 9.2, 6.78, 9.2, 8);
    g.bezierCurveTo(9.2, 9.22, 8.22, 10.2, 7, 10.2);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['git-compare', 14, 16, g => {
    g.beginPath();
    g.moveTo(5, 12);
    g.lineTo(4, 12);
    g.bezierCurveTo(3.73, 11.98, 3.52, 11.89, 3.31, 11.69);
    g.bezierCurveTo(3.1, 11.49, 3.01, 11.27, 3, 11);
    g.lineTo(3, 4.72);
    g.ellipse(2.00526588, 2.99299304, 1.993, 1.993, 0, -5.23496495, -1.57343852, true);
    g.ellipse(1.99473412, 2.99299304, 1.993, 1.993, 0, -1.56815414, 2.09337229, true);
    g.lineTo(1, 11);
    g.bezierCurveTo(1.03, 11.78, 1.34, 12.47, 1.94, 13.06);
    g.bezierCurveTo(2.54, 13.65, 3.22, 13.97, 4, 14);
    g.lineTo(5, 14);
    g.lineTo(5, 16);
    g.lineTo(8, 13);
    g.lineTo(5, 10);
    g.lineTo(5, 12);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 1.8);
    g.bezierCurveTo(2.66, 1.8, 3.2, 2.35, 3.2, 3);
    g.bezierCurveTo(3.2, 3.65, 2.65, 4.2, 2, 4.2);
    g.bezierCurveTo(1.35, 4.2, 0.8, 3.65, 0.8, 3);
    g.bezierCurveTo(0.8, 2.35, 1.35, 1.8, 2, 1.8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 11.28);
    g.lineTo(13, 5);
    g.bezierCurveTo(12.97, 4.22, 12.66, 3.53, 12.06, 2.94);
    g.bezierCurveTo(11.46, 2.35, 10.78, 2.03, 10, 2);
    g.lineTo(9, 2);
    g.lineTo(9, 0);
    g.lineTo(6, 3);
    g.lineTo(9, 6);
    g.lineTo(9, 4);
    g.lineTo(10, 4);
    g.bezierCurveTo(10.27, 4.02, 10.48, 4.11, 10.69, 4.31);
    g.bezierCurveTo(10.9, 4.51, 10.99, 4.73, 11, 5);
    g.lineTo(11, 11.28);
    g.ellipse(11.99473412, 13.00700696, 1.993, 1.993, 0, -2.09337229, 1.56815414, true);
    g.ellipse(12.00526588, 13.00700696, 1.993, 1.993, 0, -4.70974679, -1.04822036, true);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 14.2);
    g.bezierCurveTo(11.34, 14.2, 10.8, 13.65, 10.8, 13);
    g.bezierCurveTo(10.8, 12.35, 11.35, 11.8, 12, 11.8);
    g.bezierCurveTo(12.65, 11.8, 13.2, 12.35, 13.2, 13);
    g.bezierCurveTo(13.2, 13.65, 12.65, 14.2, 12, 14.2);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['git-merge', 12, 16, g => {
    g.beginPath();
    g.moveTo(10, 7.01);
    g.bezierCurveTo(9.27, 7.01, 8.62, 7.42, 8.27, 8.03);
    g.lineTo(8.27, 8.01);
    g.bezierCurveTo(7.22, 7.99, 6, 7.65, 5.14, 6.99);
    g.bezierCurveTo(4.39, 6.41, 3.64, 5.38, 3.25, 4.55);
    g.ellipse(2.00590484, 2.99299125, 1.993, 1.993, 0, -5.38653757, -1.57375912, true);
    g.bezierCurveTo(0.89, 1, 0, 1.9, 0, 3.01);
    g.ellipse(1.99996357, 2.99792816, 2, 2, 0, -3.14762861, 2.09437407, true);
    g.lineTo(1, 11.29);
    g.bezierCurveTo(0.41, 11.64, 0, 12.28, 0, 13.01);
    g.bezierCurveTo(0, 14.12, 0.89, 15.01, 2, 15.01);
    g.ellipse(2.00526588, 13.01700696, 1.993, 1.993, 0, -4.70974679, -1.04822036, true);
    g.lineTo(3, 7.68);
    g.bezierCurveTo(3.67, 8.38, 4.44, 8.95, 5.3, 9.37);
    g.bezierCurveTo(6.16, 9.79, 7.33, 10, 8.27, 10.01);
    g.lineTo(8.27, 9.99);
    g.bezierCurveTo(8.63, 10.6, 9.27, 11.01, 10, 11.01);
    g.bezierCurveTo(11.11, 11.01, 12, 10.12, 12, 9.01);
    g.bezierCurveTo(12, 7.9, 11.11, 7.01, 10, 7.01);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3.2, 13.01);
    g.bezierCurveTo(3.2, 13.67, 2.65, 14.21, 2, 14.21);
    g.bezierCurveTo(1.35, 14.21, 0.8, 13.66, 0.8, 13.01);
    g.bezierCurveTo(0.8, 12.36, 1.35, 11.81, 2, 11.81);
    g.bezierCurveTo(2.65, 11.81, 3.2, 12.36, 3.2, 13.01);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 4.21);
    g.bezierCurveTo(1.34, 4.21, 0.8, 3.66, 0.8, 3.01);
    g.bezierCurveTo(0.8, 2.36, 1.35, 1.81, 2, 1.81);
    g.bezierCurveTo(2.65, 1.81, 3.2, 2.36, 3.2, 3.01);
    g.bezierCurveTo(3.2, 3.66, 2.65, 4.21, 2, 4.21);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 10.21);
    g.bezierCurveTo(9.34, 10.21, 8.8, 9.66, 8.8, 9.01);
    g.bezierCurveTo(8.8, 8.36, 9.35, 7.81, 10, 7.81);
    g.bezierCurveTo(10.65, 7.81, 11.2, 8.36, 11.2, 9.01);
    g.bezierCurveTo(11.2, 9.66, 10.65, 10.21, 10, 10.21);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['git-pull-request', 12, 16, g => {
    g.beginPath();
    g.moveTo(11, 11.28);
    g.lineTo(11, 5);
    g.bezierCurveTo(10.97, 4.22, 10.66, 3.53, 10.06, 2.94);
    g.bezierCurveTo(9.46, 2.35, 8.78, 2.03, 8, 2);
    g.lineTo(7, 2);
    g.lineTo(7, 0);
    g.lineTo(4, 3);
    g.lineTo(7, 6);
    g.lineTo(7, 4);
    g.lineTo(8, 4);
    g.bezierCurveTo(8.27, 4.02, 8.48, 4.11, 8.69, 4.31);
    g.bezierCurveTo(8.9, 4.51, 8.99, 4.73, 9, 5);
    g.lineTo(9, 11.28);
    g.ellipse(9.99473412, 13.00700696, 1.993, 1.993, 0, -2.09337229, 1.56815414, true);
    g.ellipse(10.00526588, 13.00700696, 1.993, 1.993, 0, -4.70974679, -1.04822036, true);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 14.2);
    g.bezierCurveTo(9.34, 14.2, 8.8, 13.65, 8.8, 13);
    g.bezierCurveTo(8.8, 12.35, 9.35, 11.8, 10, 11.8);
    g.bezierCurveTo(10.65, 11.8, 11.2, 12.35, 11.2, 13);
    g.bezierCurveTo(11.2, 13.65, 10.65, 14.2, 10, 14.2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 3);
    g.bezierCurveTo(4, 1.89, 3.11, 1, 2, 1);
    g.ellipse(1.99473412, 2.99299304, 1.993, 1.993, 0, -1.56815414, 2.09337229, true);
    g.lineTo(1, 11.28);
    g.ellipse(1.99473412, 13.00700696, 1.993, 1.993, 0, -2.09337229, 1.56815414, true);
    g.ellipse(2.00526588, 13.00700696, 1.993, 1.993, 0, -4.70974679, -1.04822036, true);
    g.lineTo(3, 4.72);
    g.bezierCurveTo(3.59, 4.38, 4, 3.74, 4, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3.2, 13);
    g.bezierCurveTo(3.2, 13.66, 2.65, 14.2, 2, 14.2);
    g.bezierCurveTo(1.35, 14.2, 0.8, 13.65, 0.8, 13);
    g.bezierCurveTo(0.8, 12.35, 1.35, 11.8, 2, 11.8);
    g.bezierCurveTo(2.65, 11.8, 3.2, 12.35, 3.2, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 4.2);
    g.bezierCurveTo(1.34, 4.2, 0.8, 3.65, 0.8, 3);
    g.bezierCurveTo(0.8, 2.35, 1.35, 1.8, 2, 1.8);
    g.bezierCurveTo(2.65, 1.8, 3.2, 2.35, 3.2, 3);
    g.bezierCurveTo(3.2, 3.65, 2.65, 4.2, 2, 4.2);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['globe', 14, 16, g => {
    g.beginPath();
    g.moveTo(7, 1);
    g.bezierCurveTo(3.14, 1, 0, 4.14, 0, 8);
    g.bezierCurveTo(0, 11.86, 3.14, 15, 7, 15);
    g.bezierCurveTo(7.48, 15, 7.94, 14.95, 8.38, 14.86);
    g.bezierCurveTo(8.21, 14.78, 8.18, 14.13, 8.36, 13.77);
    g.bezierCurveTo(8.55, 13.36, 9.17, 12.32, 8.56, 11.97);
    g.bezierCurveTo(7.95, 11.62, 8.12, 11.47, 7.75, 11.06);
    g.bezierCurveTo(7.38, 10.65, 7.53, 10.59, 7.5, 10.48);
    g.bezierCurveTo(7.42, 10.14, 7.86, 9.59, 7.89, 9.54);
    g.bezierCurveTo(7.91, 9.48, 7.91, 9.27, 7.89, 9.21);
    g.bezierCurveTo(7.89, 9.13, 7.62, 8.99, 7.55, 8.98);
    g.bezierCurveTo(7.49, 8.98, 7.44, 9.09, 7.35, 9.11);
    g.bezierCurveTo(7.26, 9.13, 6.85, 8.86, 6.76, 8.78);
    g.bezierCurveTo(6.67, 8.7, 6.62, 8.55, 6.49, 8.44);
    g.bezierCurveTo(6.36, 8.31, 6.35, 8.41, 6.16, 8.33);
    g.bezierCurveTo(5.97, 8.25, 5.36, 8.02, 4.88, 7.85);
    g.bezierCurveTo(4.4, 7.66, 4.36, 7.38, 4.36, 7.19);
    g.bezierCurveTo(4.34, 6.99, 4.06, 6.72, 3.94, 6.52);
    g.bezierCurveTo(3.8, 6.32, 3.78, 6.05, 3.74, 6.11);
    g.bezierCurveTo(3.7, 6.17, 3.99, 6.89, 3.94, 6.92);
    g.bezierCurveTo(3.89, 6.94, 3.78, 6.72, 3.64, 6.54);
    g.bezierCurveTo(3.5, 6.35, 3.78, 6.45, 3.34, 5.59);
    g.bezierCurveTo(2.9, 4.73, 3.48, 4.29, 3.51, 3.84);
    g.bezierCurveTo(3.54, 3.39, 3.89, 4.01, 3.7, 3.71);
    g.bezierCurveTo(3.51, 3.41, 3.7, 2.82, 3.56, 2.6);
    g.bezierCurveTo(3.43, 2.38, 2.68, 2.85, 2.68, 2.85);
    g.bezierCurveTo(2.7, 2.63, 3.37, 2.27, 3.84, 1.93);
    g.bezierCurveTo(4.31, 1.59, 4.62, 1.87, 5, 1.98);
    g.bezierCurveTo(5.39, 2.11, 5.41, 2.07, 5.28, 1.93);
    g.bezierCurveTo(5.15, 1.8, 5.34, 1.76, 5.64, 1.8);
    g.bezierCurveTo(5.92, 1.85, 6.02, 2.21, 6.47, 2.16);
    g.bezierCurveTo(6.94, 2.13, 6.52, 2.25, 6.58, 2.38);
    g.bezierCurveTo(6.64, 2.51, 6.52, 2.49, 6.2, 2.68);
    g.bezierCurveTo(5.9, 2.88, 6.22, 2.9, 6.75, 3.29);
    g.bezierCurveTo(7.28, 3.68, 7.13, 3.04, 7.06, 2.74);
    g.bezierCurveTo(6.99, 2.44, 7.45, 2.68, 7.45, 2.68);
    g.bezierCurveTo(7.78, 2.9, 7.72, 2.7, 7.95, 2.76);
    g.bezierCurveTo(8.18, 2.82, 8.86, 3.4, 8.86, 3.4);
    g.bezierCurveTo(8.03, 3.84, 8.55, 3.88, 8.69, 3.99);
    g.bezierCurveTo(8.83, 4.1, 8.41, 4.29, 8.41, 4.29);
    g.bezierCurveTo(8.24, 4.12, 8.22, 4.31, 8.11, 4.37);
    g.bezierCurveTo(8, 4.43, 8.09, 4.59, 8.09, 4.59);
    g.bezierCurveTo(7.53, 4.68, 7.65, 5.28, 7.67, 5.42);
    g.bezierCurveTo(7.67, 5.56, 7.29, 5.78, 7.2, 6);
    g.bezierCurveTo(7.11, 6.2, 7.45, 6.64, 7.26, 6.66);
    g.bezierCurveTo(7.07, 6.69, 6.92, 6, 5.95, 6.25);
    g.bezierCurveTo(5.65, 6.33, 5.01, 6.66, 5.36, 7.33);
    g.bezierCurveTo(5.72, 8.02, 6.28, 7.14, 6.47, 7.24);
    g.bezierCurveTo(6.66, 7.34, 6.41, 7.77, 6.45, 7.79);
    g.bezierCurveTo(6.49, 7.81, 6.98, 7.81, 7.01, 8.4);
    g.bezierCurveTo(7.04, 8.99, 7.78, 8.93, 7.93, 8.95);
    g.bezierCurveTo(8.1, 8.95, 8.63, 8.51, 8.7, 8.5);
    g.bezierCurveTo(8.76, 8.47, 9.08, 8.22, 9.73, 8.59);
    g.bezierCurveTo(10.39, 8.95, 10.71, 8.9, 10.93, 9.06);
    g.bezierCurveTo(11.15, 9.22, 11.01, 9.53, 11.21, 9.64);
    g.bezierCurveTo(11.41, 9.75, 12.27, 9.61, 12.49, 9.95);
    g.bezierCurveTo(12.71, 10.29, 11.61, 12.04, 11.27, 12.23);
    g.bezierCurveTo(10.93, 12.42, 10.79, 12.87, 10.43, 13.15);
    g.bezierCurveTo(10.07, 13.43, 9.62, 13.79, 9.16, 14.06);
    g.bezierCurveTo(8.75, 14.29, 8.69, 14.72, 8.5, 14.86);
    g.bezierCurveTo(11.64, 14.16, 13.98, 11.36, 13.98, 8.02);
    g.bezierCurveTo(13.98, 4.16, 10.84, 1.02, 6.98, 1.02);
    g.lineTo(7, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8.64, 7.56);
    g.bezierCurveTo(8.55, 7.59, 8.36, 7.78, 7.86, 7.48);
    g.bezierCurveTo(7.38, 7.18, 7.05, 7.25, 7, 7.2);
    g.bezierCurveTo(7, 7.2, 6.95, 7.09, 7.17, 7.06);
    g.bezierCurveTo(7.61, 7.01, 8.15, 7.47, 8.28, 7.47);
    g.bezierCurveTo(8.41, 7.47, 8.47, 7.34, 8.69, 7.42);
    g.bezierCurveTo(8.91, 7.5, 8.74, 7.55, 8.64, 7.56);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6.34, 1.7);
    g.bezierCurveTo(6.29, 1.67, 6.37, 1.62, 6.43, 1.56);
    g.bezierCurveTo(6.46, 1.53, 6.45, 1.45, 6.48, 1.42);
    g.bezierCurveTo(6.59, 1.31, 7.09, 1.17, 7, 1.45);
    g.bezierCurveTo(6.89, 1.72, 6.42, 1.75, 6.34, 1.7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7.57, 2.59);
    g.bezierCurveTo(7.38, 2.57, 6.99, 2.54, 7.05, 2.45);
    g.bezierCurveTo(7.35, 2.17, 6.96, 2.07, 6.71, 2.07);
    g.bezierCurveTo(6.46, 2.05, 6.37, 1.91, 6.49, 1.88);
    g.bezierCurveTo(6.61, 1.85, 7.1, 1.9, 7.19, 1.96);
    g.bezierCurveTo(7.27, 2.02, 7.71, 2.21, 7.74, 2.34);
    g.bezierCurveTo(7.76, 2.47, 7.74, 2.59, 7.57, 2.59);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9.04, 2.54);
    g.bezierCurveTo(8.9, 2.63, 8.21, 2.13, 8.09, 2.02);
    g.bezierCurveTo(7.53, 1.54, 7.2, 1.71, 7.09, 1.61);
    g.bezierCurveTo(6.98, 1.51, 7.01, 1.42, 7.2, 1.27);
    g.bezierCurveTo(7.39, 1.12, 7.89, 1.33, 8.2, 1.36);
    g.bezierCurveTo(8.5, 1.39, 8.86, 1.63, 8.86, 1.91);
    g.bezierCurveTo(8.88, 2.16, 9.19, 2.41, 9.05, 2.54);
    g.lineTo(9.04, 2.54);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['grabber', 8, 16, g => {
    g.beginPath();
    g.moveTo(8, 4);
    g.lineTo(8, 5);
    g.lineTo(0, 5);
    g.lineTo(0, 4);
    g.lineTo(8, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(0, 8);
    g.lineTo(8, 8);
    g.lineTo(8, 7);
    g.lineTo(0, 7);
    g.lineTo(0, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(0, 11);
    g.lineTo(8, 11);
    g.lineTo(8, 10);
    g.lineTo(0, 10);
    g.lineTo(0, 11);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['graph', 16, 16, g => {
    g.beginPath();
    g.moveTo(16, 14);
    g.lineTo(16, 15);
    g.lineTo(0, 15);
    g.lineTo(0, 0);
    g.lineTo(1, 0);
    g.lineTo(1, 14);
    g.lineTo(16, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5, 13);
    g.lineTo(3, 13);
    g.lineTo(3, 8);
    g.lineTo(5, 8);
    g.lineTo(5, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9, 13);
    g.lineTo(7, 13);
    g.lineTo(7, 3);
    g.lineTo(9, 3);
    g.lineTo(9, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 13);
    g.lineTo(11, 13);
    g.lineTo(11, 6);
    g.lineTo(13, 6);
    g.lineTo(13, 13);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['heart', 12, 16, g => {
    g.beginPath();
    g.moveTo(11.2, 3);
    g.bezierCurveTo(10.68, 2.37, 9.95, 2.05, 9, 2);
    g.bezierCurveTo(8.03, 2, 7.31, 2.42, 6.8, 3);
    g.bezierCurveTo(6.29, 3.58, 6.02, 3.92, 6, 4);
    g.bezierCurveTo(5.98, 3.92, 5.72, 3.58, 5.2, 3);
    g.bezierCurveTo(4.68, 2.42, 4.03, 2, 3, 2);
    g.bezierCurveTo(2.05, 2.05, 1.31, 2.38, 0.8, 3);
    g.bezierCurveTo(0.28, 3.61, 0.02, 4.28, 0, 5);
    g.bezierCurveTo(0, 5.52, 0.09, 6.52, 0.67, 7.67);
    g.bezierCurveTo(1.25, 8.82, 3.01, 10.61, 6, 13);
    g.bezierCurveTo(8.98, 10.61, 10.77, 8.83, 11.34, 7.67);
    g.bezierCurveTo(11.91, 6.51, 12, 5.5, 12, 5);
    g.bezierCurveTo(11.98, 4.28, 11.72, 3.61, 11.2, 2.98);
    g.lineTo(11.2, 3);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['history', 14, 16, g => {
    g.beginPath();
    g.moveTo(8, 13);
    g.lineTo(6, 13);
    g.lineTo(6, 6);
    g.lineTo(11, 6);
    g.lineTo(11, 8);
    g.lineTo(8, 8);
    g.lineTo(8, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 1);
    g.bezierCurveTo(4.81, 1, 2.87, 2.02, 1.59, 3.59);
    g.lineTo(0, 2);
    g.lineTo(0, 6);
    g.lineTo(4, 6);
    g.lineTo(2.5, 4.5);
    g.bezierCurveTo(3.55, 3.17, 5.17, 2.3, 7, 2.3);
    g.bezierCurveTo(10.14, 2.3, 12.7, 4.86, 12.7, 8);
    g.bezierCurveTo(12.7, 11.14, 10.14, 13.7, 7, 13.7);
    g.ellipse(7.00999126, 7.99000874, 5.71, 5.71, 0, 1.57254611, 3.13984287, false);
    g.bezierCurveTo(1.3, 7.66, 1.33, 7.33, 1.39, 7);
    g.lineTo(0.08, 7);
    g.bezierCurveTo(0.03, 7.33, 0, 7.66, 0, 8);
    g.bezierCurveTo(0, 11.86, 3.14, 15, 7, 15);
    g.bezierCurveTo(10.86, 15, 14, 11.86, 14, 8);
    g.bezierCurveTo(14, 4.14, 10.86, 1, 7, 1);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['home', 16, 16, g => {
    g.beginPath();
    g.moveTo(16, 9);
    g.lineTo(13, 6);
    g.lineTo(13, 2);
    g.lineTo(11, 2);
    g.lineTo(11, 4);
    g.lineTo(8, 1);
    g.lineTo(0, 9);
    g.lineTo(2, 9);
    g.lineTo(3, 14);
    g.bezierCurveTo(3, 14.55, 3.45, 15, 4, 15);
    g.lineTo(12, 15);
    g.bezierCurveTo(12.55, 15, 13, 14.55, 13, 14);
    g.lineTo(14, 9);
    g.lineTo(16, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 14);
    g.lineTo(9, 14);
    g.lineTo(9, 10);
    g.lineTo(7, 10);
    g.lineTo(7, 14);
    g.lineTo(4, 14);
    g.lineTo(2.81, 7.69);
    g.lineTo(8, 2.5);
    g.lineTo(13.19, 7.69);
    g.lineTo(12, 14);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['horizontal-rule', 10, 16, g => {
    g.beginPath();
    g.moveTo(1, 7);
    g.lineTo(3, 7);
    g.lineTo(3, 9);
    g.lineTo(4, 9);
    g.lineTo(4, 3);
    g.lineTo(3, 3);
    g.lineTo(3, 6);
    g.lineTo(1, 6);
    g.lineTo(1, 3);
    g.lineTo(0, 3);
    g.lineTo(0, 9);
    g.lineTo(1, 9);
    g.lineTo(1, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 9);
    g.lineTo(10, 7);
    g.lineTo(9, 7);
    g.lineTo(9, 9);
    g.lineTo(10, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 6);
    g.lineTo(10, 4);
    g.lineTo(9, 4);
    g.lineTo(9, 6);
    g.lineTo(10, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 6);
    g.lineTo(7, 4);
    g.lineTo(9, 4);
    g.lineTo(9, 3);
    g.lineTo(6, 3);
    g.lineTo(6, 9);
    g.lineTo(7, 9);
    g.lineTo(7, 7);
    g.lineTo(9, 7);
    g.lineTo(9, 6);
    g.lineTo(7, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(0, 13);
    g.lineTo(10, 13);
    g.lineTo(10, 11);
    g.lineTo(0, 11);
    g.lineTo(0, 13);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['hubot', 14, 16, g => {
    g.beginPath();
    g.moveTo(3, 6);
    g.bezierCurveTo(2.45, 6, 2, 6.45, 2, 7);
    g.lineTo(2, 9);
    g.bezierCurveTo(2, 9.55, 2.45, 10, 3, 10);
    g.lineTo(11, 10);
    g.bezierCurveTo(11.55, 10, 12, 9.55, 12, 9);
    g.lineTo(12, 7);
    g.bezierCurveTo(12, 6.45, 11.55, 6, 11, 6);
    g.lineTo(3, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 7.75);
    g.lineTo(9.75, 9);
    g.lineTo(8.25, 9);
    g.lineTo(7, 7.75);
    g.lineTo(5.75, 9);
    g.lineTo(4.25, 9);
    g.lineTo(3, 7.75);
    g.lineTo(3, 7);
    g.lineTo(3.75, 7);
    g.lineTo(5, 8.25);
    g.lineTo(6.25, 7);
    g.lineTo(7.75, 7);
    g.lineTo(9, 8.25);
    g.lineTo(10.25, 7);
    g.lineTo(11, 7);
    g.lineTo(11, 7.75);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5, 11);
    g.lineTo(9, 11);
    g.lineTo(9, 12);
    g.lineTo(5, 12);
    g.lineTo(5, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 2);
    g.bezierCurveTo(3.14, 2, 0, 4.91, 0, 8.5);
    g.lineTo(0, 13);
    g.bezierCurveTo(0, 13.55, 0.45, 14, 1, 14);
    g.lineTo(13, 14);
    g.bezierCurveTo(13.55, 14, 14, 13.55, 14, 13);
    g.lineTo(14, 8.5);
    g.bezierCurveTo(14, 4.91, 10.86, 2, 7, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 13);
    g.lineTo(1, 13);
    g.lineTo(1, 8.5);
    g.bezierCurveTo(1, 5.41, 3.64, 2.91, 7, 2.91);
    g.bezierCurveTo(10.36, 2.91, 13, 5.41, 13, 8.5);
    g.lineTo(13, 13);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['inbox', 14, 16, g => {
    g.beginPath();
    g.moveTo(14, 9);
    g.lineTo(12.87, 1.86);
    g.bezierCurveTo(12.79, 1.38, 12.37, 1, 11.87, 1);
    g.lineTo(2.13, 1);
    g.bezierCurveTo(1.63, 1, 1.21, 1.38, 1.13, 1.86);
    g.lineTo(0, 9);
    g.lineTo(0, 14);
    g.bezierCurveTo(0, 14.55, 0.45, 15, 1, 15);
    g.lineTo(13, 15);
    g.bezierCurveTo(13.55, 15, 14, 14.55, 14, 14);
    g.lineTo(14, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10.72, 9.55);
    g.lineTo(10.28, 10.44);
    g.bezierCurveTo(10.11, 10.78, 9.76, 11, 9.37, 11);
    g.lineTo(4.61, 11);
    g.bezierCurveTo(4.23, 11, 3.89, 10.78, 3.72, 10.45);
    g.lineTo(3.28, 9.54);
    g.bezierCurveTo(3.11, 9.21, 2.76, 8.99, 2.39, 8.99);
    g.lineTo(1, 8.99);
    g.lineTo(2, 1.99);
    g.lineTo(12, 1.99);
    g.lineTo(13, 8.99);
    g.lineTo(11.62, 8.99);
    g.bezierCurveTo(11.23, 8.99, 10.89, 9.21, 10.71, 9.54);
    g.lineTo(10.72, 9.55);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['info', 14, 16, g => {
    g.beginPath();
    g.moveTo(6.3, 5.71);
    g.ellipse(6.96154162, 5.03938335, 0.942, 0.942, 0, 2.34938232, 3.17279023, false);
    g.bezierCurveTo(6.02, 4.73, 6.11, 4.49, 6.3, 4.31);
    g.bezierCurveTo(6.49, 4.13, 6.72, 4.03, 7, 4.03);
    g.bezierCurveTo(7.28, 4.03, 7.52, 4.12, 7.7, 4.31);
    g.bezierCurveTo(7.88, 4.5, 7.98, 4.73, 7.98, 5.01);
    g.bezierCurveTo(7.98, 5.29, 7.89, 5.53, 7.7, 5.71);
    g.ellipse(6.98575775, 5.01010143, 1, 1, 0, 0.77525548, 1.5565536, false);
    g.bezierCurveTo(6.72, 6.01, 6.48, 5.9, 6.3, 5.71);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 8.01);
    g.bezierCurveTo(7.98, 7.76, 7.89, 7.53, 7.69, 7.32);
    g.bezierCurveTo(7.49, 7.13, 7.27, 7.02, 7, 7.01);
    g.lineTo(6, 7.01);
    g.bezierCurveTo(5.73, 7.03, 5.52, 7.14, 5.31, 7.32);
    g.bezierCurveTo(5.11, 7.52, 5.01, 7.76, 5, 8.01);
    g.lineTo(6, 8.01);
    g.lineTo(6, 11.01);
    g.bezierCurveTo(6.02, 11.28, 6.11, 11.51, 6.31, 11.7);
    g.bezierCurveTo(6.51, 11.9, 6.73, 12.01, 7, 12.01);
    g.lineTo(8, 12.01);
    g.bezierCurveTo(8.27, 12.01, 8.48, 11.9, 8.69, 11.7);
    g.bezierCurveTo(8.89, 11.51, 8.99, 11.28, 9, 11.01);
    g.lineTo(8, 11.01);
    g.lineTo(8, 8);
    g.lineTo(8, 8.01);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 2.32);
    g.bezierCurveTo(3.86, 2.32, 1.3, 4.86, 1.3, 8);
    g.bezierCurveTo(1.3, 11.14, 3.86, 13.7, 7, 13.7);
    g.bezierCurveTo(10.14, 13.7, 12.7, 11.15, 12.7, 8);
    g.bezierCurveTo(12.7, 4.85, 10.14, 2.31, 7, 2.31);
    g.lineTo(7, 2.32);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 1);
    g.bezierCurveTo(10.86, 1, 14, 4.14, 14, 8);
    g.bezierCurveTo(14, 11.86, 10.86, 15, 7, 15);
    g.bezierCurveTo(3.14, 15, 0, 11.88, 0, 8);
    g.bezierCurveTo(0, 4.12, 3.14, 1, 7, 1);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['issue-closed', 16, 16, g => {
    g.beginPath();
    g.moveTo(7, 10);
    g.lineTo(9, 10);
    g.lineTo(9, 12);
    g.lineTo(7, 12);
    g.lineTo(7, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9, 4);
    g.lineTo(7, 4);
    g.lineTo(7, 9);
    g.lineTo(9, 9);
    g.lineTo(9, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10.5, 5.5);
    g.lineTo(9.5, 6.5);
    g.lineTo(12, 9);
    g.lineTo(16, 4.5);
    g.lineTo(15, 3.5);
    g.lineTo(12, 7);
    g.lineTo(10.5, 5.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 13.7);
    g.ellipse(8.00999126, 7.99000874, 5.71, 5.71, 0, 1.57254611, 3.13984287, false);
    g.bezierCurveTo(2.3, 4.86, 4.86, 2.3, 8, 2.3);
    g.bezierCurveTo(9.83, 2.3, 11.45, 3.18, 12.5, 4.5);
    g.lineTo(13.42, 3.58);
    g.ellipse(8.01719463, 7.94697872, 6.947, 6.947, 0, -0.67976928, 4.70991386, true);
    g.bezierCurveTo(4.14, 1, 1, 4.14, 1, 8);
    g.bezierCurveTo(1, 11.86, 4.14, 15, 8, 15);
    g.bezierCurveTo(11.86, 15, 15, 11.86, 15, 8);
    g.lineTo(13.48, 9.52);
    g.bezierCurveTo(12.82, 11.93, 10.62, 13.71, 8, 13.71);
    g.lineTo(8, 13.7);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['issue-opened', 14, 16, g => {
    g.beginPath();
    g.moveTo(7, 2.3);
    g.bezierCurveTo(10.14, 2.3, 12.7, 4.86, 12.7, 8);
    g.bezierCurveTo(12.7, 11.14, 10.14, 13.7, 7, 13.7);
    g.ellipse(7.00999126, 7.99000874, 5.71, 5.71, 0, 1.57254611, 3.13984287, false);
    g.bezierCurveTo(1.3, 4.86, 3.86, 2.3, 7, 2.3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 1);
    g.bezierCurveTo(3.14, 1, 0, 4.14, 0, 8);
    g.bezierCurveTo(0, 11.86, 3.14, 15, 7, 15);
    g.bezierCurveTo(10.86, 15, 14, 11.86, 14, 8);
    g.bezierCurveTo(14, 4.14, 10.86, 1, 7, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 4);
    g.lineTo(6, 4);
    g.lineTo(6, 9);
    g.lineTo(8, 9);
    g.lineTo(8, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 10);
    g.lineTo(6, 10);
    g.lineTo(6, 12);
    g.lineTo(8, 12);
    g.lineTo(8, 10);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['issue-reopened', 14, 16, g => {
    g.beginPath();
    g.moveTo(8, 9);
    g.lineTo(6, 9);
    g.lineTo(6, 4);
    g.lineTo(8, 4);
    g.lineTo(8, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 12);
    g.lineTo(8, 12);
    g.lineTo(8, 10);
    g.lineTo(6, 10);
    g.lineTo(6, 12);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12.33, 10);
    g.lineTo(10, 10);
    g.lineTo(11.5, 11.5);
    g.bezierCurveTo(10.45, 12.83, 8.83, 13.7, 7, 13.7);
    g.ellipse(7.00999126, 7.99000874, 5.71, 5.71, 0, 1.57254611, 3.13984287, false);
    g.bezierCurveTo(1.3, 7.66, 1.33, 7.33, 1.39, 7);
    g.lineTo(0.08, 7);
    g.bezierCurveTo(0.03, 7.33, 0, 7.66, 0, 8);
    g.bezierCurveTo(0, 11.86, 3.14, 15, 7, 15);
    g.bezierCurveTo(9.19, 15, 11.13, 13.98, 12.41, 12.41);
    g.lineTo(14, 14);
    g.lineTo(14, 10);
    g.lineTo(12.33, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1.67, 6);
    g.lineTo(4, 6);
    g.lineTo(2.5, 4.5);
    g.bezierCurveTo(3.55, 3.17, 5.17, 2.3, 7, 2.3);
    g.bezierCurveTo(10.14, 2.3, 12.7, 4.86, 12.7, 8);
    g.bezierCurveTo(12.7, 8.34, 12.67, 8.67, 12.61, 9);
    g.lineTo(13.92, 9);
    g.bezierCurveTo(13.97, 8.67, 14, 8.34, 14, 8);
    g.bezierCurveTo(14, 4.14, 10.86, 1, 7, 1);
    g.bezierCurveTo(4.81, 1, 2.87, 2.02, 1.59, 3.59);
    g.lineTo(0, 2);
    g.lineTo(0, 6);
    g.lineTo(1.67, 6);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['italic', 6, 16, g => {
    g.beginPath();
    g.moveTo(2.81, 5);
    g.lineTo(4.79, 5);
    g.lineTo(3, 14);
    g.lineTo(1, 14);
    g.lineTo(2.81, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3.17, 2.3);
    g.bezierCurveTo(3.17, 1.6, 3.75, 1, 4.5, 1);
    g.bezierCurveTo(5.06, 1, 5.63, 1.38, 5.63, 2.03);
    g.bezierCurveTo(5.63, 2.78, 5.04, 3.33, 4.3, 3.33);
    g.bezierCurveTo(3.72, 3.33, 3.17, 2.95, 3.17, 2.3);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['jersey', 14, 16, g => {
    g.beginPath();
    g.moveTo(4.5, 6);
    g.lineTo(4, 6.5);
    g.lineTo(4, 11.5);
    g.lineTo(4.5, 12);
    g.lineTo(6.5, 12);
    g.lineTo(7, 11.5);
    g.lineTo(7, 6.5);
    g.lineTo(6.5, 6);
    g.lineTo(4.5, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 11);
    g.lineTo(5, 11);
    g.lineTo(5, 7);
    g.lineTo(6, 7);
    g.lineTo(6, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12.27, 3.75);
    g.bezierCurveTo(12.05, 2.37, 11.96, 1.12, 12, 0);
    g.lineTo(9.02, 0);
    g.bezierCurveTo(9.02, 0.27, 8.89, 0.48, 8.63, 0.69);
    g.bezierCurveTo(8.38, 0.89, 8, 0.99, 7.5, 0.99);
    g.bezierCurveTo(7, 0.99, 6.62, 0.9, 6.37, 0.69);
    g.bezierCurveTo(6.14, 0.49, 6.01, 0.27, 6.01, 0);
    g.lineTo(3, 0);
    g.bezierCurveTo(3.05, 1.13, 2.97, 2.38, 2.75, 3.75);
    g.bezierCurveTo(2.55, 5.13, 1.95, 5.88, 1, 6);
    g.lineTo(1, 15);
    g.bezierCurveTo(1.02, 15.27, 1.11, 15.48, 1.31, 15.69);
    g.bezierCurveTo(1.51, 15.9, 1.73, 15.99, 2, 16);
    g.lineTo(13, 16);
    g.bezierCurveTo(13.27, 15.98, 13.48, 15.89, 13.69, 15.69);
    g.bezierCurveTo(13.9, 15.49, 13.99, 15.27, 14, 15);
    g.lineTo(14, 6);
    g.bezierCurveTo(13.05, 5.87, 12.47, 5.12, 12.25, 3.75);
    g.lineTo(12.27, 3.75);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 15);
    g.lineTo(2, 15);
    g.lineTo(2, 7);
    g.bezierCurveTo(2.89, 6.5, 3.48, 5.75, 3.72, 4.75);
    g.bezierCurveTo(3.96, 3.75, 4.03, 2.5, 4, 1);
    g.lineTo(5, 1);
    g.bezierCurveTo(4.98, 1.78, 5.16, 2.47, 5.52, 3.06);
    g.bezierCurveTo(5.88, 3.64, 6.54, 3.95, 7.52, 4);
    g.bezierCurveTo(8.5, 3.98, 9.16, 3.67, 9.52, 3.06);
    g.bezierCurveTo(9.88, 2.47, 10.02, 1.78, 10, 1);
    g.lineTo(11, 1);
    g.bezierCurveTo(11.02, 2.42, 11.13, 3.55, 11.33, 4.38);
    g.bezierCurveTo(11.53, 5.19, 12.02, 6.38, 13, 7.01);
    g.lineTo(13, 15.01);
    g.lineTo(13, 15);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8.5, 6);
    g.lineTo(8, 6.5);
    g.lineTo(8, 11.5);
    g.lineTo(8.5, 12);
    g.lineTo(10.5, 12);
    g.lineTo(11, 11.5);
    g.lineTo(11, 6.5);
    g.lineTo(10.5, 6);
    g.lineTo(8.5, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 11);
    g.lineTo(9, 11);
    g.lineTo(9, 7);
    g.lineTo(10, 7);
    g.lineTo(10, 11);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['kebab-horizontal', 13, 16, g => {
    g.beginPath();
    g.moveTo(1.5, 9);
    g.ellipse(1.5, 7.5, 1.5, 1.5, 0, -4.71238898, -1.57079633, true);
    g.ellipse(1.5, 7.5, 1.5, 1.5, 0, -1.57079633, 1.57079633, true);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6.5, 9);
    g.ellipse(6.5, 7.5, 1.5, 1.5, 0, -4.71238898, -1.57079633, true);
    g.ellipse(6.5, 7.5, 1.5, 1.5, 0, -1.57079633, 1.57079633, true);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 7.5);
    g.ellipse(11.5, 7.5, 1.5, 1.5, 0, 0, 3.14159265, false);
    g.ellipse(11.5, 7.5, 1.5, 1.5, 0, 3.14159265, 6.28318531, false);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['kebab-vertical', 3, 16, g => {
    g.beginPath();
    g.moveTo(0, 2.5);
    g.ellipse(1.5, 2.5, 1.5, 1.5, 0, -3.14159265, 0, true);
    g.ellipse(1.5, 2.5, 1.5, 1.5, 0, -6.28318531, -3.14159265, true);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(0, 7.5);
    g.ellipse(1.5, 7.5, 1.5, 1.5, 0, -3.14159265, 0, true);
    g.ellipse(1.5, 7.5, 1.5, 1.5, 0, -6.28318531, -3.14159265, true);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1.5, 14);
    g.ellipse(1.5, 12.5, 1.5, 1.5, 0, 1.57079633, 4.71238898, false);
    g.ellipse(1.5, 12.5, 1.5, 1.5, 0, 4.71238898, 7.85398163, false);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['key', 14, 16, g => {
    g.beginPath();
    g.moveTo(12.83, 2.17);
    g.bezierCurveTo(12.08, 1.42, 11.14, 1.03, 10, 1);
    g.bezierCurveTo(8.87, 1.03, 7.92, 1.42, 7.17, 2.17);
    g.bezierCurveTo(6.42, 2.92, 6.04, 3.86, 6.01, 5);
    g.bezierCurveTo(6.01, 5.3, 6.04, 5.59, 6.1, 5.89);
    g.lineTo(0, 12);
    g.lineTo(0, 13);
    g.lineTo(1, 14);
    g.lineTo(3, 14);
    g.lineTo(4, 13);
    g.lineTo(4, 12);
    g.lineTo(5, 12);
    g.lineTo(5, 11);
    g.lineTo(6, 11);
    g.lineTo(6, 10);
    g.lineTo(8, 10);
    g.lineTo(9.09, 8.89);
    g.bezierCurveTo(9.39, 8.97, 9.68, 9, 10, 9);
    g.bezierCurveTo(11.14, 8.97, 12.08, 8.58, 12.83, 7.83);
    g.bezierCurveTo(13.58, 7.08, 13.97, 6.14, 14, 5);
    g.bezierCurveTo(13.97, 3.86, 13.58, 2.92, 12.83, 2.17);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 5.38);
    g.bezierCurveTo(10.23, 5.38, 9.62, 4.77, 9.62, 4);
    g.bezierCurveTo(9.62, 3.23, 10.23, 2.62, 11, 2.62);
    g.bezierCurveTo(11.77, 2.62, 12.38, 3.23, 12.38, 4);
    g.bezierCurveTo(12.38, 4.77, 11.77, 5.38, 11, 5.38);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['keyboard', 16, 16, g => {
    g.beginPath();
    g.moveTo(10, 5);
    g.lineTo(9, 5);
    g.lineTo(9, 4);
    g.lineTo(10, 4);
    g.lineTo(10, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 6);
    g.lineTo(2, 6);
    g.lineTo(2, 7);
    g.lineTo(3, 7);
    g.lineTo(3, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 4);
    g.lineTo(7, 4);
    g.lineTo(7, 5);
    g.lineTo(8, 5);
    g.lineTo(8, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 4);
    g.lineTo(2, 4);
    g.lineTo(2, 5);
    g.lineTo(4, 5);
    g.lineTo(4, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 11);
    g.lineTo(14, 11);
    g.lineTo(14, 10);
    g.lineTo(12, 10);
    g.lineTo(12, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 7);
    g.lineTo(9, 7);
    g.lineTo(9, 6);
    g.lineTo(8, 6);
    g.lineTo(8, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 10);
    g.lineTo(2, 10);
    g.lineTo(2, 11);
    g.lineTo(4, 11);
    g.lineTo(4, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 4);
    g.lineTo(11, 4);
    g.lineTo(11, 5);
    g.lineTo(12, 5);
    g.lineTo(12, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14, 4);
    g.lineTo(13, 4);
    g.lineTo(13, 5);
    g.lineTo(14, 5);
    g.lineTo(14, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 9);
    g.lineTo(14, 9);
    g.lineTo(14, 6);
    g.lineTo(12, 6);
    g.lineTo(12, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(16, 3);
    g.lineTo(16, 12);
    g.bezierCurveTo(16, 12.55, 15.55, 13, 15, 13);
    g.lineTo(1, 13);
    g.bezierCurveTo(0.45, 13, 0, 12.55, 0, 12);
    g.lineTo(0, 3);
    g.bezierCurveTo(0, 2.45, 0.45, 2, 1, 2);
    g.lineTo(15, 2);
    g.bezierCurveTo(15.55, 2, 16, 2.45, 16, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15, 3);
    g.lineTo(1, 3);
    g.lineTo(1, 12);
    g.lineTo(15, 12);
    g.lineTo(15, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 7);
    g.lineTo(7, 7);
    g.lineTo(7, 6);
    g.lineTo(6, 6);
    g.lineTo(6, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 4);
    g.lineTo(5, 4);
    g.lineTo(5, 5);
    g.lineTo(6, 5);
    g.lineTo(6, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 7);
    g.lineTo(5, 7);
    g.lineTo(5, 6);
    g.lineTo(4, 6);
    g.lineTo(4, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5, 11);
    g.lineTo(11, 11);
    g.lineTo(11, 10);
    g.lineTo(5, 10);
    g.lineTo(5, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 7);
    g.lineTo(11, 7);
    g.lineTo(11, 6);
    g.lineTo(10, 6);
    g.lineTo(10, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 8);
    g.lineTo(2, 8);
    g.lineTo(2, 9);
    g.lineTo(3, 9);
    g.lineTo(3, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 8);
    g.lineTo(8, 9);
    g.lineTo(9, 9);
    g.lineTo(9, 8);
    g.lineTo(8, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 8);
    g.lineTo(6, 9);
    g.lineTo(7, 9);
    g.lineTo(7, 8);
    g.lineTo(6, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5, 8);
    g.lineTo(4, 8);
    g.lineTo(4, 9);
    g.lineTo(5, 9);
    g.lineTo(5, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 9);
    g.lineTo(11, 9);
    g.lineTo(11, 8);
    g.lineTo(10, 8);
    g.lineTo(10, 9);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['law', 14, 16, g => {
    g.beginPath();
    g.moveTo(7, 4);
    g.bezierCurveTo(6.17, 4, 5.5, 3.33, 5.5, 2.5);
    g.bezierCurveTo(5.5, 1.67, 6.17, 1, 7, 1);
    g.bezierCurveTo(7.83, 1, 8.5, 1.67, 8.5, 2.5);
    g.bezierCurveTo(8.5, 3.33, 7.83, 4, 7, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14, 10);
    g.bezierCurveTo(14, 11.11, 13.11, 12, 12, 12);
    g.lineTo(11, 12);
    g.bezierCurveTo(9.89, 12, 9, 11.11, 9, 10);
    g.lineTo(11, 6);
    g.lineTo(10, 6);
    g.bezierCurveTo(9.45, 6, 9, 5.55, 9, 5);
    g.lineTo(8, 5);
    g.lineTo(8, 13);
    g.bezierCurveTo(8.42, 13, 9, 13.45, 9, 14);
    g.lineTo(10, 14);
    g.bezierCurveTo(10.42, 14, 11, 14.45, 11, 15);
    g.lineTo(3, 15);
    g.bezierCurveTo(3, 14.45, 3.58, 14, 4, 14);
    g.lineTo(5, 14);
    g.bezierCurveTo(5, 13.45, 5.58, 13, 6, 13);
    g.lineTo(6.03, 13);
    g.lineTo(6, 5);
    g.lineTo(5, 5);
    g.bezierCurveTo(5, 5.55, 4.55, 6, 4, 6);
    g.lineTo(3, 6);
    g.lineTo(5, 10);
    g.bezierCurveTo(5, 11.11, 4.11, 12, 3, 12);
    g.lineTo(2, 12);
    g.bezierCurveTo(0.89, 12, 0, 11.11, 0, 10);
    g.lineTo(2, 6);
    g.lineTo(1, 6);
    g.lineTo(1, 5);
    g.lineTo(4, 5);
    g.bezierCurveTo(4, 4.45, 4.45, 4, 5, 4);
    g.lineTo(9, 4);
    g.bezierCurveTo(9.55, 4, 10, 4.45, 10, 5);
    g.lineTo(13, 5);
    g.lineTo(13, 6);
    g.lineTo(12, 6);
    g.lineTo(14, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2.5, 7);
    g.lineTo(1, 10);
    g.lineTo(4, 10);
    g.lineTo(2.5, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 10);
    g.lineTo(11.5, 7);
    g.lineTo(10, 10);
    g.lineTo(13, 10);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['light-bulb', 12, 16, g => {
    g.beginPath();
    g.moveTo(6.5, 0);
    g.bezierCurveTo(3.48, 0, 1, 2.19, 1, 5);
    g.bezierCurveTo(1, 5.92, 1.55, 7.25, 2, 8);
    g.bezierCurveTo(3.34, 10.25, 3.78, 10.78, 4, 12);
    g.lineTo(4, 13);
    g.lineTo(9, 13);
    g.lineTo(9, 12);
    g.bezierCurveTo(9.22, 10.78, 9.66, 10.25, 11, 8);
    g.bezierCurveTo(11.45, 7.25, 12, 5.92, 12, 5);
    g.bezierCurveTo(12, 2.19, 9.52, 0, 6.5, 0);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10.14, 7.48);
    g.bezierCurveTo(9.89, 7.92, 9.67, 8.28, 9.47, 8.59);
    g.bezierCurveTo(8.61, 10, 8.22, 10.65, 8.02, 11.82);
    g.bezierCurveTo(8, 11.87, 8, 11.93, 8, 11.99);
    g.lineTo(5, 11.99);
    g.bezierCurveTo(5, 11.93, 5, 11.86, 4.98, 11.82);
    g.bezierCurveTo(4.78, 10.65, 4.39, 9.99, 3.53, 8.59);
    g.bezierCurveTo(3.33, 8.28, 3.11, 7.92, 2.86, 7.48);
    g.bezierCurveTo(2.44, 6.78, 2, 5.65, 2, 5);
    g.bezierCurveTo(2, 2.8, 4.02, 1, 6.5, 1);
    g.bezierCurveTo(7.72, 1, 8.86, 1.42, 9.72, 2.19);
    g.bezierCurveTo(10.55, 2.94, 11, 3.94, 11, 5);
    g.bezierCurveTo(11, 5.66, 10.56, 6.78, 10.14, 7.48);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 14);
    g.lineTo(9, 14);
    g.bezierCurveTo(8.77, 15.14, 7.7, 16, 6.5, 16);
    g.bezierCurveTo(5.3, 16, 4.23, 15.14, 4, 14);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['link-external', 12, 16, g => {
    g.beginPath();
    g.moveTo(11, 10);
    g.lineTo(12, 10);
    g.lineTo(12, 13);
    g.bezierCurveTo(12, 13.55, 11.55, 14, 11, 14);
    g.lineTo(1, 14);
    g.bezierCurveTo(0.45, 14, 0, 13.55, 0, 13);
    g.lineTo(0, 3);
    g.bezierCurveTo(0, 2.45, 0.45, 2, 1, 2);
    g.lineTo(4, 2);
    g.lineTo(4, 3);
    g.lineTo(1, 3);
    g.lineTo(1, 13);
    g.lineTo(11, 13);
    g.lineTo(11, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 2);
    g.lineTo(8.25, 4.25);
    g.lineTo(5, 7.5);
    g.lineTo(6.5, 9);
    g.lineTo(9.75, 5.75);
    g.lineTo(12, 8);
    g.lineTo(12, 2);
    g.lineTo(6, 2);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['link', 16, 16, g => {
    g.beginPath();
    g.moveTo(4, 9);
    g.lineTo(5, 9);
    g.lineTo(5, 10);
    g.lineTo(4, 10);
    g.bezierCurveTo(2.5, 10, 1, 8.31, 1, 6.5);
    g.bezierCurveTo(1, 4.69, 2.55, 3, 4, 3);
    g.lineTo(8, 3);
    g.bezierCurveTo(9.45, 3, 11, 4.69, 11, 6.5);
    g.bezierCurveTo(11, 7.91, 10.09, 9.22, 9, 9.75);
    g.lineTo(9, 8.59);
    g.bezierCurveTo(9.58, 8.14, 10, 7.32, 10, 6.5);
    g.bezierCurveTo(10, 5.22, 8.98, 4, 8, 4);
    g.lineTo(4, 4);
    g.bezierCurveTo(3.02, 4, 2, 5.22, 2, 6.5);
    g.bezierCurveTo(2, 7.78, 3, 9, 4, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 6);
    g.lineTo(12, 6);
    g.lineTo(12, 7);
    g.lineTo(13, 7);
    g.bezierCurveTo(14, 7, 15, 8.22, 15, 9.5);
    g.bezierCurveTo(15, 10.78, 13.98, 12, 13, 12);
    g.lineTo(9, 12);
    g.bezierCurveTo(8.02, 12, 7, 10.78, 7, 9.5);
    g.bezierCurveTo(7, 8.67, 7.42, 7.86, 8, 7.41);
    g.lineTo(8, 6.25);
    g.bezierCurveTo(6.91, 6.78, 6, 8.09, 6, 9.5);
    g.bezierCurveTo(6, 11.31, 7.55, 13, 9, 13);
    g.lineTo(13, 13);
    g.bezierCurveTo(14.45, 13, 16, 11.31, 16, 9.5);
    g.bezierCurveTo(16, 7.69, 14.5, 6, 13, 6);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['list-ordered', 12, 16, g => {
    g.beginPath();
    g.moveTo(12.01, 13);
    g.bezierCurveTo(12.01, 13.59, 12.01, 14, 11.42, 14);
    g.lineTo(4.6, 14);
    g.bezierCurveTo(4.01, 14, 4.01, 13.59, 4.01, 13);
    g.bezierCurveTo(4.01, 12.41, 4.01, 12, 4.6, 12);
    g.lineTo(11.41, 12);
    g.bezierCurveTo(12, 12, 12, 12.41, 12, 13);
    g.lineTo(12.01, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4.6, 4);
    g.lineTo(11.41, 4);
    g.bezierCurveTo(12, 4, 12, 3.59, 12, 3);
    g.bezierCurveTo(12, 2.41, 12, 2, 11.41, 2);
    g.lineTo(4.6, 2);
    g.bezierCurveTo(4.01, 2, 4.01, 2.41, 4.01, 3);
    g.bezierCurveTo(4.01, 3.59, 4.01, 4, 4.6, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11.41, 7);
    g.lineTo(4.6, 7);
    g.bezierCurveTo(4.01, 7, 4.01, 7.41, 4.01, 8);
    g.bezierCurveTo(4.01, 8.59, 4.01, 9, 4.6, 9);
    g.lineTo(11.41, 9);
    g.bezierCurveTo(12, 9, 12, 8.59, 12, 8);
    g.bezierCurveTo(12, 7.41, 12, 7, 11.41, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2.01, 1);
    g.lineTo(1.29, 1);
    g.bezierCurveTo(0.99, 1.19, 0.71, 1.25, 0.26, 1.34);
    g.lineTo(0.26, 2);
    g.lineTo(1.01, 2);
    g.lineTo(1.01, 4.14);
    g.lineTo(0.17, 4.14);
    g.lineTo(0.17, 5);
    g.lineTo(3.01, 5);
    g.lineTo(3.01, 4.14);
    g.lineTo(2.01, 4.14);
    g.lineTo(2.01, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2.26, 9.13);
    g.bezierCurveTo(2.09, 9.13, 1.81, 9.16, 1.6, 9.19);
    g.bezierCurveTo(2.13, 8.63, 2.74, 7.94, 2.74, 7.3);
    g.bezierCurveTo(2.72, 6.52, 2.18, 6, 1.38, 6);
    g.bezierCurveTo(0.79, 6, 0.41, 6.2, 0, 6.64);
    g.lineTo(0.58, 7.22);
    g.bezierCurveTo(0.77, 7.03, 0.96, 6.84, 1.22, 6.84);
    g.bezierCurveTo(1.5, 6.84, 1.7, 7, 1.7, 7.36);
    g.bezierCurveTo(1.7, 7.89, 0.93, 8.56, 0, 9.42);
    g.lineTo(0, 10);
    g.lineTo(3, 10);
    g.lineTo(2.91, 9.12);
    g.lineTo(2.25, 9.12);
    g.lineTo(2.26, 9.13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2.18, 12.91);
    g.lineTo(2.18, 12.88);
    g.bezierCurveTo(2.62, 12.69, 2.82, 12.41, 2.82, 12.02);
    g.bezierCurveTo(2.82, 11.32, 2.26, 10.91, 1.38, 10.91);
    g.bezierCurveTo(0.9, 10.91, 0.49, 11.1, 0.1, 11.43);
    g.lineTo(0.65, 12.07);
    g.bezierCurveTo(0.9, 11.87, 1.09, 11.76, 1.34, 11.76);
    g.bezierCurveTo(1.61, 11.76, 1.76, 11.89, 1.76, 12.12);
    g.bezierCurveTo(1.76, 12.39, 1.56, 12.56, 0.9, 12.56);
    g.lineTo(0.9, 13.31);
    g.bezierCurveTo(1.73, 13.31, 1.88, 13.48, 1.88, 13.78);
    g.bezierCurveTo(1.88, 14.03, 1.65, 14.16, 1.3, 14.16);
    g.bezierCurveTo(1.02, 14.16, 0.74, 14.02, 0.49, 13.78);
    g.lineTo(0.01, 14.44);
    g.bezierCurveTo(0.31, 14.8, 0.78, 15, 1.42, 15);
    g.bezierCurveTo(2.25, 15, 2.95, 14.59, 2.95, 13.84);
    g.bezierCurveTo(2.95, 13.34, 2.64, 13.03, 2.18, 12.9);
    g.lineTo(2.18, 12.91);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['list-unordered', 12, 16, g => {
    g.beginPath();
    g.moveTo(2, 13);
    g.bezierCurveTo(2, 13.59, 2, 14, 1.41, 14);
    g.lineTo(0.59, 14);
    g.bezierCurveTo(0, 14, 0, 13.59, 0, 13);
    g.bezierCurveTo(0, 12.41, 0, 12, 0.59, 12);
    g.lineTo(1.4, 12);
    g.bezierCurveTo(1.99, 12, 1.99, 12.41, 1.99, 13);
    g.lineTo(2, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4.59, 4);
    g.lineTo(11.4, 4);
    g.bezierCurveTo(11.99, 4, 11.99, 3.59, 11.99, 3);
    g.bezierCurveTo(11.99, 2.41, 11.99, 2, 11.4, 2);
    g.lineTo(4.59, 2);
    g.bezierCurveTo(4, 2, 4, 2.41, 4, 3);
    g.bezierCurveTo(4, 3.59, 4, 4, 4.59, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1.41, 7);
    g.lineTo(0.59, 7);
    g.bezierCurveTo(0, 7, 0, 7.41, 0, 8);
    g.bezierCurveTo(0, 8.59, 0, 9, 0.59, 9);
    g.lineTo(1.4, 9);
    g.bezierCurveTo(1.99, 9, 1.99, 8.59, 1.99, 8);
    g.bezierCurveTo(1.99, 7.41, 1.99, 7, 1.4, 7);
    g.lineTo(1.41, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1.41, 2);
    g.lineTo(0.59, 2);
    g.bezierCurveTo(0, 2, 0, 2.41, 0, 3);
    g.bezierCurveTo(0, 3.59, 0, 4, 0.59, 4);
    g.lineTo(1.4, 4);
    g.bezierCurveTo(1.99, 4, 1.99, 3.59, 1.99, 3);
    g.bezierCurveTo(1.99, 2.41, 1.99, 2, 1.4, 2);
    g.lineTo(1.41, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11.41, 7);
    g.lineTo(4.59, 7);
    g.bezierCurveTo(4, 7, 4, 7.41, 4, 8);
    g.bezierCurveTo(4, 8.59, 4, 9, 4.59, 9);
    g.lineTo(11.4, 9);
    g.bezierCurveTo(11.99, 9, 11.99, 8.59, 11.99, 8);
    g.bezierCurveTo(11.99, 7.41, 11.99, 7, 11.4, 7);
    g.lineTo(11.41, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11.41, 12);
    g.lineTo(4.59, 12);
    g.bezierCurveTo(4, 12, 4, 12.41, 4, 13);
    g.bezierCurveTo(4, 13.59, 4, 14, 4.59, 14);
    g.lineTo(11.4, 14);
    g.bezierCurveTo(11.99, 14, 11.99, 13.59, 11.99, 13);
    g.bezierCurveTo(11.99, 12.41, 11.99, 12, 11.4, 12);
    g.lineTo(11.41, 12);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['location', 12, 16, g => {
    g.beginPath();
    g.moveTo(6, 0);
    g.bezierCurveTo(2.69, 0, 0, 2.5, 0, 5.5);
    g.bezierCurveTo(0, 10.02, 6, 16, 6, 16);
    g.bezierCurveTo(6, 16, 12, 10.02, 12, 5.5);
    g.bezierCurveTo(12, 2.5, 9.31, 0, 6, 0);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 14.55);
    g.bezierCurveTo(4.14, 12.52, 1, 8.44, 1, 5.5);
    g.bezierCurveTo(1, 3.02, 3.25, 1, 6, 1);
    g.bezierCurveTo(7.34, 1, 8.61, 1.48, 9.56, 2.36);
    g.bezierCurveTo(10.48, 3.22, 11, 4.33, 11, 5.5);
    g.bezierCurveTo(11, 8.44, 7.86, 12.52, 6, 14.55);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 5.5);
    g.bezierCurveTo(8, 6.61, 7.11, 7.5, 6, 7.5);
    g.bezierCurveTo(4.89, 7.5, 4, 6.61, 4, 5.5);
    g.bezierCurveTo(4, 4.39, 4.89, 3.5, 6, 3.5);
    g.bezierCurveTo(7.11, 3.5, 8, 4.39, 8, 5.5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['lock', 12, 16, g => {
    g.beginPath();
    g.moveTo(4, 13);
    g.lineTo(3, 13);
    g.lineTo(3, 12);
    g.lineTo(4, 12);
    g.lineTo(4, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 7);
    g.lineTo(12, 14);
    g.bezierCurveTo(12, 14.55, 11.55, 15, 11, 15);
    g.lineTo(1, 15);
    g.bezierCurveTo(0.45, 15, 0, 14.55, 0, 14);
    g.lineTo(0, 7);
    g.bezierCurveTo(0, 6.45, 0.45, 6, 1, 6);
    g.lineTo(2, 6);
    g.lineTo(2, 4);
    g.bezierCurveTo(2, 1.8, 3.8, 0, 6, 0);
    g.bezierCurveTo(8.2, 0, 10, 1.8, 10, 4);
    g.lineTo(10, 6);
    g.lineTo(11, 6);
    g.bezierCurveTo(11.55, 6, 12, 6.45, 12, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3.8, 6);
    g.lineTo(8.21, 6);
    g.lineTo(8.21, 4);
    g.bezierCurveTo(8.21, 2.78, 7.23, 1.8, 6.01, 1.8);
    g.bezierCurveTo(4.79, 1.8, 3.81, 2.78, 3.81, 4);
    g.lineTo(3.81, 6);
    g.lineTo(3.8, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 7);
    g.lineTo(2, 7);
    g.lineTo(2, 14);
    g.lineTo(11, 14);
    g.lineTo(11, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 8);
    g.lineTo(3, 8);
    g.lineTo(3, 9);
    g.lineTo(4, 9);
    g.lineTo(4, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 10);
    g.lineTo(3, 10);
    g.lineTo(3, 11);
    g.lineTo(4, 11);
    g.lineTo(4, 10);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['logo-gist', 25, 16, g => {
    g.beginPath();
    g.moveTo(4.7, 8.73);
    g.lineTo(7.15, 8.73);
    g.lineTo(7.15, 12.75);
    g.bezierCurveTo(6.6, 13.02, 5.51, 13.09, 4.62, 13.09);
    g.bezierCurveTo(2.06, 13.09, 1.15, 10.89, 1.15, 8.04);
    g.bezierCurveTo(1.15, 5.19, 2.06, 2.98, 4.63, 2.98);
    g.bezierCurveTo(5.91, 2.98, 6.69, 3.21, 7.91, 3.71);
    g.lineTo(7.91, 2.66);
    g.bezierCurveTo(7.27, 2.33, 6.25, 2, 4.63, 2);
    g.bezierCurveTo(1.13, 2, 0, 4.69, 0, 8.03);
    g.bezierCurveTo(0, 11.37, 1.11, 14.06, 4.63, 14.06);
    g.bezierCurveTo(6.27, 14.06, 7.44, 13.79, 8.22, 13.42);
    g.lineTo(8.22, 7.73);
    g.lineTo(4.7, 7.73);
    g.lineTo(4.7, 8.73);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11.09, 12.45);
    g.lineTo(11.09, 6.06);
    g.lineTo(10.04, 6.06);
    g.lineTo(10.04, 12.34);
    g.bezierCurveTo(10.04, 13.59, 10.62, 14.06, 11.76, 14.06);
    g.lineTo(11.76, 13.17);
    g.bezierCurveTo(11.28, 13.17, 11.09, 13.01, 11.09, 12.47);
    g.lineTo(11.09, 12.45);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11.34, 3.73);
    g.bezierCurveTo(11.34, 3.29, 11.01, 2.95, 10.56, 2.95);
    g.bezierCurveTo(10.11, 2.95, 9.79, 3.29, 9.79, 3.73);
    g.bezierCurveTo(9.79, 4.17, 10.12, 4.51, 10.56, 4.51);
    g.bezierCurveTo(11, 4.51, 11.34, 4.17, 11.34, 3.73);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15.68, 9.42);
    g.bezierCurveTo(14.18, 9.29, 13.9, 8.94, 13.9, 8.25);
    g.bezierCurveTo(13.9, 7.48, 14.23, 6.91, 15.78, 6.91);
    g.bezierCurveTo(16.83, 6.91, 17.44, 7.07, 18.05, 7.27);
    g.lineTo(18.05, 6.33);
    g.bezierCurveTo(17.36, 6.03, 16.53, 5.94, 15.8, 5.94);
    g.bezierCurveTo(13.6, 5.94, 12.88, 7.14, 12.88, 8.25);
    g.bezierCurveTo(12.88, 9.33, 13.35, 10.13, 15.61, 10.33);
    g.bezierCurveTo(17.16, 10.46, 17.38, 10.96, 17.38, 11.67);
    g.bezierCurveTo(17.38, 12.4, 16.94, 13.09, 15.32, 13.09);
    g.bezierCurveTo(14.21, 13.09, 13.46, 12.9, 12.99, 12.73);
    g.lineTo(12.99, 13.67);
    g.bezierCurveTo(13.49, 13.87, 14.57, 14.06, 15.32, 14.06);
    g.bezierCurveTo(17.7, 14.06, 18.46, 12.86, 18.46, 11.65);
    g.bezierCurveTo(18.46, 10.37, 17.93, 9.62, 15.71, 9.42);
    g.lineTo(15.68, 9.42);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(24.26, 6.95);
    g.lineTo(24.26, 6.09);
    g.lineTo(21.84, 6.09);
    g.lineTo(21.84, 3.59);
    g.lineTo(20.76, 3.9);
    g.lineTo(20.76, 6.01);
    g.lineTo(19.2, 6.45);
    g.lineTo(19.2, 6.93);
    g.lineTo(20.76, 6.93);
    g.lineTo(20.76, 11.93);
    g.bezierCurveTo(20.76, 13.46, 21.95, 14.06, 23.26, 14.06);
    g.bezierCurveTo(23.45, 14.06, 23.78, 14.04, 23.95, 14.01);
    g.lineTo(23.95, 13.12);
    g.bezierCurveTo(23.76, 13.15, 23.54, 13.15, 23.34, 13.15);
    g.bezierCurveTo(22.37, 13.15, 21.84, 12.76, 21.84, 11.81);
    g.lineTo(21.84, 6.94);
    g.lineTo(24.26, 6.94);
    g.lineTo(24.26, 6.96);
    g.lineTo(24.26, 6.95);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['logo-github', 45, 16, g => {
    g.beginPath();
    g.moveTo(18.53, 12.03);
    g.lineTo(18.51, 12.03);
    g.bezierCurveTo(18.519, 12.03, 18.525, 12.04, 18.534, 12.041);
    g.lineTo(18.54, 12.041);
    g.lineTo(18.53, 12.031);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(18.534, 12.042);
    g.bezierCurveTo(18.441, 12.043, 18.207, 12.092, 17.96, 12.092);
    g.bezierCurveTo(17.18, 12.092, 16.91, 11.732, 16.91, 11.262);
    g.lineTo(16.91, 8.13);
    g.lineTo(18.5, 8.13);
    g.bezierCurveTo(18.59, 8.13, 18.66, 8.05, 18.66, 7.94);
    g.lineTo(18.66, 6.24);
    g.bezierCurveTo(18.66, 6.15, 18.58, 6.07, 18.5, 6.07);
    g.lineTo(16.91, 6.07);
    g.lineTo(16.91, 3.96);
    g.bezierCurveTo(16.91, 3.88, 16.86, 3.83, 16.77, 3.83);
    g.lineTo(14.61, 3.83);
    g.bezierCurveTo(14.52, 3.83, 14.47, 3.88, 14.47, 3.96);
    g.lineTo(14.47, 6.13);
    g.bezierCurveTo(13.345, 6.405, 13.38, 6.4, 13.31, 6.41);
    g.bezierCurveTo(13.23, 6.43, 13.18, 6.5, 13.18, 6.58);
    g.lineTo(13.18, 7.94);
    g.bezierCurveTo(13.18, 8.05, 13.26, 8.13, 13.35, 8.13);
    g.lineTo(14.46, 8.13);
    g.lineTo(14.46, 11.41);
    g.bezierCurveTo(14.46, 13.85, 16.16, 14.1, 17.32, 14.1);
    g.bezierCurveTo(17.85, 14.1, 18.49, 13.93, 18.59, 13.88);
    g.bezierCurveTo(18.65, 13.86, 18.68, 13.79, 18.68, 13.72);
    g.lineTo(18.68, 12.22);
    g.ellipse(18.50309243, 12.21428058, 0.177, 0.177, 0, -6.2508666, -1.39527748, true);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(42.23, 9.84);
    g.bezierCurveTo(42.23, 8.03, 41.5, 7.79, 40.73, 7.87);
    g.bezierCurveTo(40.13, 7.91, 39.65, 8.21, 39.65, 8.21);
    g.lineTo(39.65, 11.73);
    g.bezierCurveTo(40.505, 12.08, 40.14, 12.07, 40.87, 12.09);
    g.bezierCurveTo(41.9, 12.12, 42.23, 11.75, 42.23, 9.84);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(44.66, 9.68);
    g.bezierCurveTo(44.66, 13.11, 43.55, 14.09, 41.61, 14.09);
    g.bezierCurveTo(39.97, 14.09, 39.09, 13.26, 39.09, 13.26);
    g.bezierCurveTo(39.09, 13.26, 39.05, 13.72, 39, 13.78);
    g.bezierCurveTo(38.97, 13.84, 38.92, 13.86, 38.86, 13.86);
    g.lineTo(37.38, 13.86);
    g.bezierCurveTo(37.28, 13.86, 37.19, 13.78, 37.19, 13.69);
    g.lineTo(37.21, 2.58);
    g.bezierCurveTo(37.21, 2.49, 37.29, 2.41, 37.38, 2.41);
    g.lineTo(39.51, 2.41);
    g.bezierCurveTo(39.6, 2.41, 39.68, 2.49, 39.68, 2.58);
    g.lineTo(39.68, 6.35);
    g.bezierCurveTo(41.1, 5.82, 40.5, 5.82, 41.7, 5.82);
    g.lineTo(41.69, 5.8);
    g.bezierCurveTo(42.89, 5.8, 44.66, 6.25, 44.66, 9.68);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(35.94, 6.07);
    g.lineTo(33.84, 6.07);
    g.bezierCurveTo(33.73, 6.07, 33.67, 6.15, 33.67, 6.26);
    g.lineTo(33.67, 11.7);
    g.bezierCurveTo(32.745, 12.09, 33.12, 12.09, 32.37, 12.09);
    g.bezierCurveTo(31.62, 12.09, 31.4, 11.75, 31.4, 11);
    g.lineTo(31.4, 6.25);
    g.bezierCurveTo(31.4, 6.16, 31.32, 6.08, 31.23, 6.08);
    g.lineTo(29.09, 6.08);
    g.bezierCurveTo(29, 6.08, 28.92, 6.16, 28.92, 6.25);
    g.lineTo(28.92, 11.36);
    g.bezierCurveTo(28.92, 13.56, 30.15, 14.11, 31.84, 14.11);
    g.bezierCurveTo(33.23, 14.11, 34.36, 13.34, 34.36, 13.34);
    g.bezierCurveTo(34.36, 13.34, 34.41, 13.73, 34.44, 13.79);
    g.bezierCurveTo(34.46, 13.84, 34.53, 13.88, 34.6, 13.88);
    g.lineTo(35.94, 13.88);
    g.bezierCurveTo(36.05, 13.88, 36.11, 13.8, 36.11, 13.71);
    g.lineTo(36.13, 6.24);
    g.bezierCurveTo(36.13, 6.15, 36.05, 6.07, 35.94, 6.07);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12.24, 6.06);
    g.lineTo(10.11, 6.06);
    g.bezierCurveTo(10.02, 6.06, 9.94, 6.15, 9.94, 6.26);
    g.lineTo(9.94, 13.6);
    g.bezierCurveTo(9.94, 13.8, 10.07, 13.87, 10.24, 13.87);
    g.lineTo(12.16, 13.87);
    g.bezierCurveTo(12.36, 13.87, 12.41, 13.78, 12.41, 13.6);
    g.lineTo(12.41, 6.23);
    g.bezierCurveTo(12.41, 6.14, 12.33, 6.06, 12.24, 6.06);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11.19, 2.68);
    g.bezierCurveTo(10.42, 2.68, 9.81, 3.29, 9.81, 4.06);
    g.bezierCurveTo(9.81, 4.83, 10.42, 5.44, 11.19, 5.44);
    g.bezierCurveTo(11.94, 5.44, 12.55, 4.83, 12.55, 4.06);
    g.bezierCurveTo(12.55, 3.29, 11.94, 2.68, 11.19, 2.68);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(27.68, 2.43);
    g.lineTo(25.57, 2.43);
    g.bezierCurveTo(25.48, 2.43, 25.4, 2.51, 25.4, 2.6);
    g.lineTo(25.4, 6.69);
    g.lineTo(22.09, 6.69);
    g.lineTo(22.09, 2.6);
    g.bezierCurveTo(22.09, 2.51, 22.01, 2.43, 21.92, 2.43);
    g.lineTo(19.79, 2.43);
    g.bezierCurveTo(19.7, 2.43, 19.62, 2.51, 19.62, 2.6);
    g.lineTo(19.62, 13.71);
    g.bezierCurveTo(19.62, 13.8, 19.71, 13.88, 19.79, 13.88);
    g.lineTo(21.92, 13.88);
    g.bezierCurveTo(22.01, 13.88, 22.09, 13.8, 22.09, 13.71);
    g.lineTo(22.09, 8.96);
    g.lineTo(25.4, 8.96);
    g.lineTo(25.38, 13.71);
    g.bezierCurveTo(25.38, 13.8, 25.46, 13.88, 25.55, 13.88);
    g.lineTo(27.68, 13.88);
    g.bezierCurveTo(27.77, 13.88, 27.85, 13.8, 27.85, 13.71);
    g.lineTo(27.85, 2.6);
    g.bezierCurveTo(27.85, 2.51, 27.77, 2.43, 27.68, 2.43);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8.81, 7.35);
    g.lineTo(8.81, 13.09);
    g.bezierCurveTo(8.81, 13.13, 8.8, 13.2, 8.75, 13.22);
    g.bezierCurveTo(8.75, 13.22, 7.5, 14.11, 5.44, 14.11);
    g.bezierCurveTo(2.95, 14.11, 0, 13.33, 0, 8.19);
    g.bezierCurveTo(0, 3.05, 2.58, 1.99, 5.1, 2);
    g.bezierCurveTo(7.28, 2, 8.16, 2.49, 8.3, 2.58);
    g.bezierCurveTo(8.34, 2.63, 8.36, 2.67, 8.36, 2.72);
    g.lineTo(7.94, 4.5);
    g.bezierCurveTo(7.94, 4.59, 7.85, 4.7, 7.74, 4.67);
    g.bezierCurveTo(7.38, 4.56, 6.84, 4.34, 5.57, 4.34);
    g.bezierCurveTo(4.1, 4.34, 2.52, 4.76, 2.52, 8.07);
    g.bezierCurveTo(2.52, 11.38, 4.02, 11.77, 5.1, 11.77);
    g.bezierCurveTo(6.02, 11.77, 6.35, 11.66, 6.35, 11.66);
    g.lineTo(6.35, 9.36);
    g.lineTo(4.88, 9.36);
    g.bezierCurveTo(4.77, 9.36, 4.69, 9.28, 4.69, 9.19);
    g.lineTo(4.69, 7.35);
    g.bezierCurveTo(4.69, 7.26, 4.77, 7.18, 4.88, 7.18);
    g.lineTo(8.62, 7.18);
    g.bezierCurveTo(8.73, 7.18, 8.81, 7.26, 8.81, 7.35);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['mail-read', 14, 16, g => {
    g.beginPath();
    g.moveTo(6, 5);
    g.lineTo(4, 5);
    g.lineTo(4, 4);
    g.lineTo(6, 4);
    g.lineTo(6, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9, 6);
    g.lineTo(4, 6);
    g.lineTo(4, 7);
    g.lineTo(9, 7);
    g.lineTo(9, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14, 5.52);
    g.lineTo(14, 14);
    g.bezierCurveTo(14, 14.55, 13.55, 15, 13, 15);
    g.lineTo(1, 15);
    g.bezierCurveTo(0.45, 15, 0, 14.55, 0, 14);
    g.lineTo(0, 5.52);
    g.bezierCurveTo(0, 5.19, 0.16, 4.89, 0.42, 4.71);
    g.lineTo(2, 3.58);
    g.lineTo(2, 3);
    g.bezierCurveTo(2, 2.45, 2.45, 2, 3, 2);
    g.lineTo(4.2, 2);
    g.lineTo(7, 0);
    g.lineTo(9.8, 2);
    g.lineTo(11, 2);
    g.bezierCurveTo(11.55, 2, 12, 2.45, 12, 3);
    g.lineTo(12, 3.58);
    g.lineTo(13.58, 4.71);
    g.bezierCurveTo(13.85, 4.9, 14, 5.19, 14, 5.52);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 7.5);
    g.lineTo(7, 10);
    g.lineTo(11, 7.5);
    g.lineTo(11, 3);
    g.lineTo(3, 3);
    g.lineTo(3, 7.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1, 13.5);
    g.lineTo(5.5, 10.5);
    g.lineTo(1, 7.5);
    g.lineTo(1, 13.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 14);
    g.lineTo(7, 11);
    g.lineTo(2, 14);
    g.lineTo(12, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 7.5);
    g.lineTo(8.5, 10.5);
    g.lineTo(13, 13.5);
    g.lineTo(13, 7.5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['mail', 14, 16, g => {
    g.beginPath();
    g.moveTo(0, 4);
    g.lineTo(0, 12);
    g.bezierCurveTo(0, 12.55, 0.45, 13, 1, 13);
    g.lineTo(13, 13);
    g.bezierCurveTo(13.55, 13, 14, 12.55, 14, 12);
    g.lineTo(14, 4);
    g.bezierCurveTo(14, 3.45, 13.55, 3, 13, 3);
    g.lineTo(1, 3);
    g.bezierCurveTo(0.45, 3, 0, 3.45, 0, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 4);
    g.lineTo(7, 9);
    g.lineTo(1, 4);
    g.lineTo(13, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1, 5.5);
    g.lineTo(5, 8.5);
    g.lineTo(1, 11.5);
    g.lineTo(1, 5.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 12);
    g.lineTo(5.5, 9);
    g.lineTo(7, 10.5);
    g.lineTo(8.5, 9);
    g.lineTo(12, 12);
    g.lineTo(2, 12);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 11.5);
    g.lineTo(9, 8.5);
    g.lineTo(13, 5.5);
    g.lineTo(13, 11.5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['mark-github', 16, 16, g => {
    g.beginPath();
    g.moveTo(8, 0);
    g.bezierCurveTo(3.58, 0, 0, 3.58, 0, 8);
    g.bezierCurveTo(0, 11.54, 2.29, 14.53, 5.47, 15.59);
    g.bezierCurveTo(5.87, 15.66, 6.02, 15.42, 6.02, 15.21);
    g.bezierCurveTo(6.02, 15.02, 6.01, 14.39, 6.01, 13.72);
    g.bezierCurveTo(4, 14.09, 3.48, 13.23, 3.32, 12.78);
    g.bezierCurveTo(3.23, 12.55, 2.84, 11.84, 2.5, 11.65);
    g.bezierCurveTo(2.22, 11.5, 1.82, 11.13, 2.49, 11.12);
    g.bezierCurveTo(3.12, 11.11, 3.57, 11.7, 3.72, 11.94);
    g.bezierCurveTo(4.44, 13.15, 5.59, 12.81, 6.05, 12.6);
    g.bezierCurveTo(6.12, 12.08, 6.33, 11.73, 6.56, 11.53);
    g.bezierCurveTo(4.78, 11.33, 2.92, 10.64, 2.92, 7.58);
    g.bezierCurveTo(2.92, 6.71, 3.23, 5.99, 3.74, 5.43);
    g.bezierCurveTo(3.66, 5.23, 3.38, 4.41, 3.82, 3.31);
    g.bezierCurveTo(3.82, 3.31, 4.49, 3.1, 6.02, 4.13);
    g.bezierCurveTo(6.66, 3.95, 7.34, 3.86, 8.02, 3.86);
    g.bezierCurveTo(8.7, 3.86, 9.38, 3.95, 10.02, 4.13);
    g.bezierCurveTo(11.55, 3.09, 12.22, 3.31, 12.22, 3.31);
    g.bezierCurveTo(12.66, 4.41, 12.38, 5.23, 12.3, 5.43);
    g.bezierCurveTo(12.81, 5.99, 13.12, 6.7, 13.12, 7.58);
    g.bezierCurveTo(13.12, 10.65, 11.25, 11.33, 9.47, 11.53);
    g.bezierCurveTo(9.76, 11.78, 10.01, 12.26, 10.01, 13.01);
    g.bezierCurveTo(10.01, 14.08, 10, 14.94, 10, 15.21);
    g.bezierCurveTo(10, 15.42, 10.15, 15.67, 10.55, 15.59);
    g.ellipse(7.98700026, 7.99795144, 8.013, 8.013, 0, -5.03796564, 0.00025565, true);
    g.bezierCurveTo(16, 3.58, 12.42, 0, 8, 0);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['markdown', 16, 16, g => {
    g.beginPath();
    g.moveTo(14.85, 3);
    g.lineTo(1.15, 3);
    g.bezierCurveTo(0.52, 3, 0, 3.52, 0, 4.15);
    g.lineTo(0, 11.84);
    g.bezierCurveTo(0, 12.48, 0.52, 13, 1.15, 13);
    g.lineTo(14.84, 13);
    g.bezierCurveTo(15.48, 13, 15.99, 12.48, 15.99, 11.85);
    g.lineTo(15.99, 4.15);
    g.bezierCurveTo(16, 3.52, 15.48, 3, 14.85, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9, 11);
    g.lineTo(7, 11);
    g.lineTo(7, 8);
    g.lineTo(5.5, 9.92);
    g.lineTo(4, 8);
    g.lineTo(4, 11);
    g.lineTo(2, 11);
    g.lineTo(2, 5);
    g.lineTo(4, 5);
    g.lineTo(5.5, 7);
    g.lineTo(7, 5);
    g.lineTo(9, 5);
    g.lineTo(9, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11.99, 11.5);
    g.lineTo(9.5, 8);
    g.lineTo(11, 8);
    g.lineTo(11, 5);
    g.lineTo(13, 5);
    g.lineTo(13, 8);
    g.lineTo(14.5, 8);
    g.lineTo(11.99, 11.5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['megaphone', 16, 16, g => {
    g.beginPath();
    g.moveTo(10, 1);
    g.bezierCurveTo(9.83, 1, 9.64, 1.05, 9.48, 1.14);
    g.bezierCurveTo(8.04, 2.02, 4.5, 4.58, 3, 5);
    g.bezierCurveTo(1.62, 5, 0, 5.67, 0, 7.5);
    g.bezierCurveTo(0, 9.33, 1.63, 10, 3, 10);
    g.bezierCurveTo(3.3, 10.08, 3.64, 10.23, 4, 10.41);
    g.lineTo(4, 15);
    g.lineTo(6, 15);
    g.lineTo(6, 11.55);
    g.bezierCurveTo(7.34, 12.41, 8.69, 13.38, 9.48, 13.86);
    g.bezierCurveTo(9.64, 13.95, 9.82, 14, 10, 14);
    g.bezierCurveTo(10.52, 14, 11, 13.58, 11, 13);
    g.lineTo(11, 2);
    g.bezierCurveTo(11, 1.42, 10.52, 1, 10, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 13);
    g.bezierCurveTo(9.62, 12.77, 9.11, 12.42, 8.5, 12);
    g.bezierCurveTo(8.34, 11.89, 8.17, 11.78, 8, 11.66);
    g.lineTo(8, 3.31);
    g.bezierCurveTo(8.16, 3.2, 8.31, 3.11, 8.47, 3);
    g.bezierCurveTo(9.08, 2.59, 9.63, 2.23, 10, 2);
    g.lineTo(10, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 7);
    g.lineTo(16, 7);
    g.lineTo(16, 8);
    g.lineTo(12, 8);
    g.lineTo(12, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 9);
    g.lineTo(16, 11);
    g.lineTo(16, 12);
    g.lineTo(12, 10);
    g.lineTo(12, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(16, 3);
    g.lineTo(16, 4);
    g.lineTo(12, 6);
    g.lineTo(12, 5);
    g.lineTo(16, 3);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['mention', 14, 16, g => {
    g.beginPath();
    g.moveTo(6.58, 15);
    g.bezierCurveTo(7.83, 15, 9.1, 14.69, 10.14, 14.06);
    g.lineTo(9.72, 13.12);
    g.bezierCurveTo(8.88, 13.64, 7.83, 13.95, 6.69, 13.95);
    g.bezierCurveTo(3.46, 13.95, 1.05, 11.87, 1.05, 8.23);
    g.bezierCurveTo(1.05, 3.86, 4.28, 1.05, 7.63, 1.05);
    g.bezierCurveTo(11.08, 1.05, 12.85, 3.24, 12.85, 6.25);
    g.bezierCurveTo(12.85, 8.64, 11.51, 10.11, 10.35, 10.11);
    g.bezierCurveTo(9.3, 10.11, 8.99, 9.38, 9.3, 7.92);
    g.lineTo(10.03, 4.17);
    g.lineTo(8.98, 4.17);
    g.lineTo(8.87, 4.89);
    g.bezierCurveTo(8.46, 4.26, 7.93, 4.06, 7.31, 4.06);
    g.bezierCurveTo(5.12, 4.06, 3.65, 6.45, 3.65, 8.44);
    g.bezierCurveTo(3.65, 10.11, 4.59, 11.05, 5.95, 11.05);
    g.bezierCurveTo(6.79, 11.05, 7.62, 10.52, 8.25, 9.8);
    g.bezierCurveTo(8.36, 10.74, 9.19, 11.25, 10.23, 11.25);
    g.bezierCurveTo(11.9, 11.25, 14, 9.58, 14, 6.25);
    g.bezierCurveTo(14, 2.61, 11.59, 0, 7.83, 0);
    g.bezierCurveTo(3.66, 0, 0, 3.33, 0, 8.33);
    g.bezierCurveTo(0, 12.71, 2.92, 15, 6.58, 15);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6.27, 10);
    g.bezierCurveTo(5.54, 10, 4.91, 9.48, 4.91, 8.33);
    g.bezierCurveTo(4.91, 6.88, 5.85, 5.11, 7.32, 5.11);
    g.bezierCurveTo(7.84, 5.11, 8.16, 5.31, 8.57, 5.94);
    g.lineTo(8.05, 8.96);
    g.bezierCurveTo(7.42, 9.69, 6.8, 10.01, 6.27, 10.01);
    g.lineTo(6.27, 10);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['milestone', 14, 16, g => {
    g.beginPath();
    g.moveTo(8, 2);
    g.lineTo(6, 2);
    g.lineTo(6, 0);
    g.lineTo(8, 0);
    g.lineTo(8, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 7);
    g.lineTo(2, 7);
    g.bezierCurveTo(1.45, 7, 1, 6.55, 1, 6);
    g.lineTo(1, 4);
    g.bezierCurveTo(1, 3.45, 1.45, 3, 2, 3);
    g.lineTo(12, 3);
    g.lineTo(14, 5);
    g.lineTo(12, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 4);
    g.lineTo(6, 4);
    g.lineTo(6, 6);
    g.lineTo(8, 6);
    g.lineTo(8, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 16);
    g.lineTo(8, 16);
    g.lineTo(8, 8);
    g.lineTo(6, 8);
    g.lineTo(6, 16);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['mirror', 16, 16, g => {
    g.beginPath();
    g.moveTo(15.5, 4.7);
    g.lineTo(8.5, 0);
    g.lineTo(1.5, 4.7);
    g.bezierCurveTo(1.2, 4.89, 1, 5.15, 1, 5.5);
    g.lineTo(1, 16);
    g.lineTo(8.5, 12);
    g.lineTo(16, 16);
    g.lineTo(16, 5.5);
    g.bezierCurveTo(16, 5.16, 15.8, 4.89, 15.5, 4.7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15, 14.5);
    g.lineTo(9, 11.25);
    g.lineTo(9, 10);
    g.lineTo(8, 10);
    g.lineTo(8, 11.25);
    g.lineTo(2, 14.5);
    g.lineTo(2, 5.5);
    g.lineTo(8, 1.5);
    g.lineTo(8, 6);
    g.lineTo(9, 6);
    g.lineTo(9, 1.5);
    g.lineTo(15, 5.5);
    g.lineTo(15, 14.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 7);
    g.lineTo(11, 7);
    g.lineTo(11, 5);
    g.lineTo(14, 8);
    g.lineTo(11, 11);
    g.lineTo(11, 9);
    g.lineTo(6, 9);
    g.lineTo(6, 11);
    g.lineTo(3, 8);
    g.lineTo(6, 5);
    g.lineTo(6, 7);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['mortar-board', 16, 16, g => {
    g.beginPath();
    g.moveTo(7.808, 9.405);
    g.lineTo(3.978, 8.215);
    g.bezierCurveTo(-0.022, 0.215, 3.978, 9.715, 3.978, 10.715);
    g.bezierCurveTo(3.978, 11.715, 5.778, 12.215, 7.978, 12.215);
    g.bezierCurveTo(10.178, 12.215, 11.978, 11.715, 11.978, 10.715);
    g.lineTo(11.978, 8.215);
    g.lineTo(8.148, 9.405);
    g.ellipse(7.968, 8.69753975, 0.73, 0.73, 0, 1.32165144, 1.81994122, false);
    g.lineTo(7.808, 9.405);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8.088, 3.015);
    g.ellipse(7.988, 3.33996154, 0.34, 0.34, 0, -1.27226413, 4.41385678, true);
    g.lineTo(0.248, 5.395);
    g.ellipse(0.34936567, 5.73, 0.35, 0.35, 0, -1.86462217, 1.86462217, true);
    g.lineTo(1.978, 6.615);
    g.lineTo(1.978, 8.385);
    g.bezierCurveTo(1.678, 8.555, 1.478, 8.885, 1.478, 9.245);
    g.bezierCurveTo(1.478, 9.435, 1.528, 9.605, 1.618, 9.745);
    g.bezierCurveTo(1.538, 9.885, 1.478, 10.055, 1.478, 10.245);
    g.lineTo(1.478, 12.825);
    g.bezierCurveTo(1.478, 13.375, 3.478, 13.375, 3.478, 12.825);
    g.lineTo(3.478, 10.245);
    g.bezierCurveTo(3.478, 10.055, 3.428, 9.885, 3.338, 9.745);
    g.bezierCurveTo(3.418, 9.605, 3.478, 9.435, 3.478, 9.245);
    g.bezierCurveTo(3.478, 8.865, 3.278, 8.555, 2.978, 8.385);
    g.lineTo(2.978, 6.935);
    g.lineTo(7.868, 8.465);
    g.bezierCurveTo(7.928, 8.485, 8.008, 8.485, 8.068, 8.465);
    g.lineTo(15.708, 6.085);
    g.ellipse(15.60663433, 5.75, 0.35, 0.35, 0, -5.00621482, -1.27697048, true);
    g.lineTo(8.078, 3.025);
    g.lineTo(8.088, 3.015);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7.998, 6.215);
    g.bezierCurveTo(7.448, 6.215, 6.998, 5.995, 6.998, 5.715);
    g.bezierCurveTo(6.998, 5.435, 7.448, 5.215, 7.998, 5.215);
    g.bezierCurveTo(8.548, 5.215, 8.998, 5.435, 8.998, 5.715);
    g.bezierCurveTo(8.998, 5.995, 8.548, 6.215, 7.998, 6.215);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['mute', 16, 16, g => {
    g.beginPath();
    g.moveTo(8, 2.75);
    g.lineTo(8, 13.13);
    g.bezierCurveTo(8, 13.8, 7.19, 14.13, 6.72, 13.66);
    g.lineTo(3, 9.94);
    g.lineTo(1, 9.94);
    g.bezierCurveTo(0.45, 9.94, 0, 9.49, 0, 8.94);
    g.lineTo(0, 6.94);
    g.bezierCurveTo(0, 6.39, 0.45, 5.94, 1, 5.94);
    g.lineTo(3, 5.94);
    g.lineTo(6.72, 2.22);
    g.bezierCurveTo(7.19, 1.75, 8, 2.08, 8, 2.75);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15.53, 5.97);
    g.lineTo(14.47, 4.91);
    g.lineTo(12.5, 6.88);
    g.lineTo(10.53, 4.91);
    g.lineTo(9.47, 5.97);
    g.lineTo(11.44, 7.94);
    g.lineTo(9.47, 9.91);
    g.lineTo(10.53, 10.97);
    g.lineTo(12.5, 9);
    g.lineTo(14.47, 10.97);
    g.lineTo(15.53, 9.91);
    g.lineTo(13.56, 7.94);
    g.lineTo(15.53, 5.97);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['no-newline', 16, 16, g => {
    g.beginPath();
    g.moveTo(16, 5);
    g.lineTo(16, 8);
    g.bezierCurveTo(16, 8.55, 15.55, 9, 15, 9);
    g.lineTo(12, 9);
    g.lineTo(12, 11);
    g.lineTo(9, 8);
    g.lineTo(12, 5);
    g.lineTo(12, 7);
    g.lineTo(14, 7);
    g.lineTo(14, 5);
    g.lineTo(16, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 8);
    g.bezierCurveTo(8, 10.2, 6.2, 12, 4, 12);
    g.bezierCurveTo(1.8, 12, 0, 10.2, 0, 8);
    g.bezierCurveTo(0, 5.8, 1.8, 4, 4, 4);
    g.bezierCurveTo(6.2, 4, 8, 5.8, 8, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1.5, 9.66);
    g.lineTo(5.66, 5.5);
    g.bezierCurveTo(5.18, 5.19, 4.61, 5, 4, 5);
    g.bezierCurveTo(2.34, 5, 1, 6.34, 1, 8);
    g.bezierCurveTo(1, 8.61, 1.19, 9.17, 1.5, 9.66);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 8);
    g.bezierCurveTo(7, 7.39, 6.81, 6.83, 6.5, 6.34);
    g.lineTo(2.34, 10.5);
    g.bezierCurveTo(2.82, 10.81, 3.39, 11, 4, 11);
    g.bezierCurveTo(5.66, 11, 7, 9.66, 7, 8);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['note', 14, 16, g => {
    g.beginPath();
    g.moveTo(3, 10);
    g.lineTo(7, 10);
    g.lineTo(7, 9);
    g.lineTo(3, 9);
    g.lineTo(3, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 8);
    g.lineTo(9, 8);
    g.lineTo(9, 7);
    g.lineTo(3, 7);
    g.lineTo(3, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 6);
    g.lineTo(11, 6);
    g.lineTo(11, 5);
    g.lineTo(3, 5);
    g.lineTo(3, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 12);
    g.lineTo(1, 12);
    g.lineTo(1, 3);
    g.lineTo(13, 3);
    g.lineTo(13, 12);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1, 2);
    g.bezierCurveTo(0.45, 2, 0, 2.45, 0, 3);
    g.lineTo(0, 12);
    g.bezierCurveTo(0, 12.55, 0.45, 13, 1, 13);
    g.lineTo(13, 13);
    g.bezierCurveTo(13.55, 13, 14, 12.55, 14, 12);
    g.lineTo(14, 3);
    g.bezierCurveTo(14, 2.45, 13.55, 2, 13, 2);
    g.lineTo(1, 2);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['octoface', 16, 16, g => {
    g.beginPath();
    g.moveTo(14.7, 5.34);
    g.bezierCurveTo(14.83, 5.02, 15.25, 3.75, 14.57, 2.03);
    g.bezierCurveTo(14.57, 2.03, 13.52, 1.7, 11.13, 3.33);
    g.bezierCurveTo(10.13, 3.05, 9.06, 3.01, 8, 3.01);
    g.bezierCurveTo(6.94, 3.01, 5.87, 3.05, 4.87, 3.33);
    g.bezierCurveTo(2.48, 1.69, 1.43, 2.03, 1.43, 2.03);
    g.bezierCurveTo(0.75, 3.75, 1.17, 5.02, 1.3, 5.34);
    g.bezierCurveTo(0.49, 6.21, 0, 7.33, 0, 8.69);
    g.bezierCurveTo(0, 13.84, 3.33, 15, 7.98, 15);
    g.bezierCurveTo(12.63, 15, 16, 13.84, 16, 8.69);
    g.bezierCurveTo(16, 7.33, 15.51, 6.21, 14.7, 5.34);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 14.02);
    g.bezierCurveTo(4.7, 14.02, 2.02, 13.87, 2.02, 10.67);
    g.bezierCurveTo(2.02, 9.91, 2.4, 9.19, 3.04, 8.6);
    g.bezierCurveTo(4.11, 7.62, 5.94, 8.14, 8, 8.14);
    g.bezierCurveTo(10.07, 8.14, 11.88, 7.62, 12.96, 8.6);
    g.bezierCurveTo(13.61, 9.19, 13.98, 9.9, 13.98, 10.67);
    g.bezierCurveTo(13.98, 13.86, 11.3, 14.02, 8, 14.02);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5.49, 9.01);
    g.bezierCurveTo(4.83, 9.01, 4.29, 9.81, 4.29, 10.79);
    g.bezierCurveTo(4.29, 11.77, 4.83, 12.58, 5.49, 12.58);
    g.bezierCurveTo(6.15, 12.58, 6.69, 11.78, 6.69, 10.79);
    g.bezierCurveTo(6.69, 9.8, 6.15, 9.01, 5.49, 9.01);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10.51, 9.01);
    g.bezierCurveTo(9.85, 9.01, 9.31, 9.8, 9.31, 10.79);
    g.bezierCurveTo(9.31, 11.78, 9.85, 12.58, 10.51, 12.58);
    g.bezierCurveTo(11.17, 12.58, 11.71, 11.78, 11.71, 10.79);
    g.bezierCurveTo(11.71, 9.8, 11.18, 9.01, 10.51, 9.01);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['organization', 16, 16, g => {
    g.beginPath();
    g.moveTo(16, 12.999);
    g.bezierCurveTo(16, 13.438, 15.55, 13.999, 15, 13.999);
    g.lineTo(7.995, 13.999);
    g.bezierCurveTo(7.456, 13.999, 7.001, 13.552, 7, 13);
    g.lineTo(1, 13);
    g.bezierCurveTo(0.46, 13, 0, 12.439, 0, 12);
    g.bezierCurveTo(0, 9.366, 3, 8, 3, 8);
    g.bezierCurveTo(3, 8, 3.229, 7.591, 3, 7);
    g.bezierCurveTo(2.159, 6.379, 1.942, 6.41, 2, 4);
    g.bezierCurveTo(2.058, 1.581, 3.367, 1, 4.5, 1);
    g.bezierCurveTo(5.633, 1, 6.942, 1.58, 7, 4);
    g.bezierCurveTo(7.058, 6.41, 6.841, 6.379, 6, 7);
    g.bezierCurveTo(5.771, 7.59, 6, 8, 6, 8);
    g.bezierCurveTo(6, 8, 7.549, 8.711, 8.42, 10.088);
    g.ellipse(13.01893837, 15.0697834, 6.78, 6.78, 0, 3.9669295, 4.25091192, false);
    g.bezierCurveTo(10.1145, 8.2945, 10.229, 8.59, 10, 7.999);
    g.bezierCurveTo(9.159, 7.379, 8.942, 7.409, 9, 4.999);
    g.bezierCurveTo(9.058, 2.58, 10.367, 1.999, 11.5, 1.999);
    g.bezierCurveTo(12.633, 1.999, 13.937, 2.58, 13.995, 4.999);
    g.bezierCurveTo(14.054, 7.409, 13.837, 7.379, 12.995, 7.999);
    g.bezierCurveTo(12.766, 8.589, 12.995, 8.999, 12.995, 8.999);
    g.bezierCurveTo(12.995, 8.999, 16, 10.365, 16, 12.999);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['package', 16, 16, g => {
    g.beginPath();
    g.moveTo(1, 4.732);
    g.lineTo(1, 12.202);
    g.bezierCurveTo(1, 12.652, 1.3, 13.042, 1.75, 13.172);
    g.lineTo(8.25, 14.902);
    g.bezierCurveTo(8.41, 14.952, 8.59, 14.952, 8.75, 14.902);
    g.lineTo(15.25, 13.172);
    g.bezierCurveTo(15.7, 13.042, 16, 12.652, 16, 12.202);
    g.lineTo(16, 4.732);
    g.bezierCurveTo(16, 4.282, 15.7, 3.892, 15.25, 3.762);
    g.lineTo(8.75, 2.022);
    g.ellipse(8.5, 3.39949773, 1.4, 1.4, 0, -1.39126198, 4.53285463, true);
    g.lineTo(1.75, 3.762);
    g.bezierCurveTo(1.3, 3.892, 1, 4.282, 1, 4.732);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 13.822);
    g.lineTo(2, 12.232);
    g.lineTo(2, 5.462);
    g.lineTo(8, 7.072);
    g.lineTo(8, 13.822);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 4.462);
    g.lineTo(4.5, 3.792);
    g.lineTo(11, 5.522);
    g.lineTo(8.5, 6.192);
    g.lineTo(2, 4.463);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15, 12.233);
    g.lineTo(9, 13.823);
    g.lineTo(9, 7.073);
    g.lineTo(11, 6.523);
    g.lineTo(11, 8.963);
    g.lineTo(13, 8.433);
    g.lineTo(13, 5.993);
    g.lineTo(15, 5.463);
    g.lineTo(15, 12.233);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 4.993);
    g.lineTo(6.5, 3.263);
    g.lineTo(8.5, 2.733);
    g.lineTo(15, 4.463);
    g.lineTo(13, 4.993);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['paintcan', 12, 16, g => {
    g.beginPath();
    g.moveTo(6, 0);
    g.bezierCurveTo(2.69, 0, 0, 2.69, 0, 6);
    g.lineTo(0, 7);
    g.bezierCurveTo(0, 7.55, 0.45, 8, 1, 8);
    g.lineTo(1, 13);
    g.bezierCurveTo(1, 14.1, 3.24, 15, 6, 15);
    g.bezierCurveTo(8.76, 15, 11, 14.1, 11, 13);
    g.lineTo(11, 8);
    g.bezierCurveTo(11.55, 8, 12, 7.55, 12, 7);
    g.lineTo(12, 6);
    g.bezierCurveTo(12, 2.69, 9.31, 0, 6, 0);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9, 10);
    g.lineTo(9, 10.5);
    g.bezierCurveTo(9, 10.78, 8.78, 11, 8.5, 11);
    g.bezierCurveTo(8.22, 11, 8, 10.78, 8, 10.5);
    g.lineTo(8, 10);
    g.bezierCurveTo(8, 9.72, 7.78, 9.5, 7.5, 9.5);
    g.bezierCurveTo(7.22, 9.5, 7, 9.72, 7, 10);
    g.lineTo(7, 12.5);
    g.bezierCurveTo(7, 12.78, 6.78, 13, 6.5, 13);
    g.bezierCurveTo(6.22, 13, 6, 12.78, 6, 12.5);
    g.lineTo(6, 10.5);
    g.bezierCurveTo(6, 10.22, 5.78, 10, 5.5, 10);
    g.bezierCurveTo(5.22, 10, 5, 10.22, 5, 10.5);
    g.lineTo(5, 11);
    g.bezierCurveTo(5, 11.55, 4.55, 12, 4, 12);
    g.bezierCurveTo(3.45, 12, 3, 11.55, 3, 11);
    g.lineTo(3, 10);
    g.bezierCurveTo(2.45, 10, 2, 9.55, 2, 9);
    g.lineTo(2, 7.2);
    g.bezierCurveTo(2.91, 7.69, 4.36, 8, 6, 8);
    g.bezierCurveTo(7.64, 8, 9.09, 7.69, 10, 7.2);
    g.lineTo(10, 9);
    g.bezierCurveTo(10, 9.55, 9.55, 10, 9, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 7);
    g.bezierCurveTo(4.32, 7, 2.88, 6.59, 2.29, 6);
    g.bezierCurveTo(2.88, 5.41, 4.32, 5, 6, 5);
    g.bezierCurveTo(7.68, 5, 9.12, 5.41, 9.71, 6);
    g.bezierCurveTo(9.12, 6.59, 7.68, 7, 6, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 4);
    g.bezierCurveTo(3.24, 4, 1, 4.89, 1, 6);
    g.bezierCurveTo(1, 3.24, 3.24, 1, 6, 1);
    g.bezierCurveTo(8.76, 1, 11, 3.24, 11, 6);
    g.bezierCurveTo(11, 4.9, 8.76, 4, 6, 4);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['pencil', 14, 16, g => {
    g.beginPath();
    g.moveTo(0, 11.592);
    g.lineTo(0, 14.592);
    g.lineTo(3, 14.592);
    g.lineTo(11, 6.592);
    g.lineTo(8, 3.592);
    g.lineTo(0, 11.592);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 13.592);
    g.lineTo(1, 13.592);
    g.lineTo(1, 11.592);
    g.lineTo(2, 11.592);
    g.lineTo(2, 12.592);
    g.lineTo(3, 12.592);
    g.lineTo(3, 13.592);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13.3, 4.292);
    g.lineTo(12, 5.592);
    g.lineTo(9, 2.592);
    g.lineTo(10.3, 1.292);
    g.ellipse(11.005, 1.99555597, 0.996, 0.996, 0, 3.92596563, 5.49881233, false);
    g.lineTo(13.3, 2.882);
    g.bezierCurveTo(13.69, 3.272, 13.69, 3.902, 13.3, 4.292);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['person', 12, 16, g => {
    g.beginPath();
    g.moveTo(12, 14.002);
    g.ellipse(11.002, 14.002, 0.998, 0.998, 0, 0, 1.57079633, false);
    g.lineTo(1.001, 15);
    g.ellipse(0.9999995, 14.0000005, 1, 1, 0, 1.56979583, 3.14259315, false);
    g.lineTo(0, 13);
    g.bezierCurveTo(0, 10.367, 4, 9, 4, 9);
    g.bezierCurveTo(4, 9, 4.229, 8.591, 4, 8);
    g.bezierCurveTo(3.159, 7.38, 3.056, 6.41, 3, 4);
    g.bezierCurveTo(3.173, 1.587, 4.867, 1, 6, 1);
    g.bezierCurveTo(7.133, 1, 8.827, 1.586, 9, 4);
    g.bezierCurveTo(8.944, 6.41, 8.841, 7.38, 8, 8);
    g.bezierCurveTo(7.771, 8.59, 8, 9, 8, 9);
    g.bezierCurveTo(8, 9, 12, 10.367, 12, 13);
    g.lineTo(12, 14.002);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['pin', 16, 16, g => {
    g.beginPath();
    g.moveTo(10, 1.494);
    g.lineTo(10, 2.294);
    g.lineTo(10.5, 3.294);
    g.lineTo(6, 6.294);
    g.lineTo(2.2, 6.294);
    g.bezierCurveTo(1.76, 6.294, 1.53, 6.824, 1.86, 7.154);
    g.lineTo(5, 10.294);
    g.lineTo(1, 15.294);
    g.lineTo(6, 11.294);
    g.lineTo(9.14, 14.434);
    g.ellipse(9.50004813, 14.08706291, 0.5, 0.5, 0, -3.90844796, 0.01387463, true);
    g.lineTo(10, 10.294);
    g.lineTo(13, 5.794);
    g.lineTo(14, 6.294);
    g.lineTo(14.8, 6.294);
    g.bezierCurveTo(15.24, 6.294, 15.47, 5.764, 15.14, 5.434);
    g.lineTo(10.86, 1.154);
    g.ellipse(10.49995187, 1.50093709, 0.5, 0.5, 0, -0.7668553, 3.15546729, true);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['plug', 14, 16, g => {
    g.beginPath();
    g.moveTo(14, 6);
    g.lineTo(14, 5);
    g.lineTo(10, 5);
    g.lineTo(10, 3);
    g.lineTo(8, 3);
    g.lineTo(8, 4);
    g.lineTo(6, 4);
    g.bezierCurveTo(4.97, 4, 4.23, 4.81, 4, 6);
    g.lineTo(3, 7);
    g.bezierCurveTo(1.34, 7, 0, 8.34, 0, 10);
    g.lineTo(0, 12);
    g.lineTo(1, 12);
    g.lineTo(1, 10);
    g.bezierCurveTo(1, 8.89, 1.89, 8, 3, 8);
    g.lineTo(4, 9);
    g.bezierCurveTo(4.25, 10.16, 4.98, 11, 6, 11);
    g.lineTo(8, 11);
    g.lineTo(8, 12);
    g.lineTo(10, 12);
    g.lineTo(10, 10);
    g.lineTo(14, 10);
    g.lineTo(14, 9);
    g.lineTo(10, 9);
    g.lineTo(10, 6);
    g.lineTo(14, 6);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['plus-small', 7, 16, g => {
    g.beginPath();
    g.moveTo(4, 4);
    g.lineTo(3, 4);
    g.lineTo(3, 7);
    g.lineTo(0, 7);
    g.lineTo(0, 8);
    g.lineTo(3, 8);
    g.lineTo(3, 11);
    g.lineTo(4, 11);
    g.lineTo(4, 8);
    g.lineTo(7, 8);
    g.lineTo(7, 7);
    g.lineTo(4, 7);
    g.lineTo(4, 4);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['plus', 12, 16, g => {
    g.beginPath();
    g.moveTo(12, 9);
    g.lineTo(7, 9);
    g.lineTo(7, 14);
    g.lineTo(5, 14);
    g.lineTo(5, 9);
    g.lineTo(0, 9);
    g.lineTo(0, 7);
    g.lineTo(5, 7);
    g.lineTo(5, 2);
    g.lineTo(7, 2);
    g.lineTo(7, 7);
    g.lineTo(12, 7);
    g.lineTo(12, 9);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['primitive-dot', 8, 16, g => {
    g.beginPath();
    g.moveTo(0, 8);
    g.bezierCurveTo(0, 5.8, 1.8, 4, 4, 4);
    g.bezierCurveTo(6.2, 4, 8, 5.8, 8, 8);
    g.bezierCurveTo(8, 10.2, 6.2, 12, 4, 12);
    g.bezierCurveTo(1.8, 12, 0, 10.2, 0, 8);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['primitive-square', 8, 16, g => {
    g.beginPath();
    g.moveTo(8, 12);
    g.lineTo(0, 12);
    g.lineTo(0, 4);
    g.lineTo(8, 4);
    g.lineTo(8, 12);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['project', 15, 16, g => {
    g.beginPath();
    g.moveTo(10, 12);
    g.lineTo(13, 12);
    g.lineTo(13, 2);
    g.lineTo(10, 2);
    g.lineTo(10, 12);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 10);
    g.lineTo(9, 10);
    g.lineTo(9, 2);
    g.lineTo(6, 2);
    g.lineTo(6, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 14);
    g.lineTo(5, 14);
    g.lineTo(5, 2);
    g.lineTo(2, 2);
    g.lineTo(2, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1, 15);
    g.lineTo(14, 15);
    g.lineTo(14, 1);
    g.lineTo(1, 1);
    g.lineTo(1, 15);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14, 0);
    g.lineTo(1, 0);
    g.ellipse(1, 1, 1, 1, 0, -1.57079633, 3.14159265, true);
    g.lineTo(0, 15);
    g.ellipse(1, 15, 1, 1, 0, -3.14159265, 1.57079633, true);
    g.lineTo(14, 16);
    g.ellipse(14, 15, 1, 1, 0, -4.71238898, 0, true);
    g.lineTo(15, 1);
    g.ellipse(14, 1, 1, 1, 0, -6.28318531, -1.57079633, true);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['pulse', 14, 16, g => {
    g.beginPath();
    g.moveTo(11.5, 8.4);
    g.lineTo(8.8, 5.8);
    g.lineTo(6.6, 8.9);
    g.lineTo(5.5, 2);
    g.lineTo(2.38, 8.4);
    g.lineTo(0, 8.4);
    g.lineTo(0, 10.4);
    g.lineTo(3.6, 10.4);
    g.lineTo(4.5, 8.6);
    g.lineTo(5.4, 14);
    g.lineTo(9, 8.9);
    g.lineTo(10.6, 10.4);
    g.lineTo(14, 10.4);
    g.lineTo(14, 8.4);
    g.lineTo(11.5, 8.4);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['question', 14, 16, g => {
    g.beginPath();
    g.moveTo(6, 10);
    g.lineTo(8, 10);
    g.lineTo(8, 12);
    g.lineTo(6, 12);
    g.lineTo(6, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 6.5);
    g.bezierCurveTo(10, 8.64, 8, 9, 8, 9);
    g.lineTo(6, 9);
    g.bezierCurveTo(6, 8.45, 6.45, 8, 7, 8);
    g.lineTo(7.5, 8);
    g.bezierCurveTo(7.78, 8, 8, 7.78, 8, 7.5);
    g.lineTo(8, 6.5);
    g.bezierCurveTo(8, 6.22, 7.78, 6, 7.5, 6);
    g.lineTo(6.5, 6);
    g.bezierCurveTo(6.22, 6, 6, 6.22, 6, 6.5);
    g.lineTo(6, 7);
    g.lineTo(4, 7);
    g.bezierCurveTo(4, 5.5, 5.5, 4, 7, 4);
    g.bezierCurveTo(8.5, 4, 10, 5, 10, 6.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 2.3);
    g.bezierCurveTo(10.14, 2.3, 12.7, 4.86, 12.7, 8);
    g.bezierCurveTo(12.7, 11.14, 10.14, 13.7, 7, 13.7);
    g.ellipse(7.00999126, 7.99000874, 5.71, 5.71, 0, 1.57254611, 3.13984287, false);
    g.bezierCurveTo(1.3, 4.86, 3.86, 2.3, 7, 2.3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 1);
    g.bezierCurveTo(3.14, 1, 0, 4.14, 0, 8);
    g.bezierCurveTo(0, 11.86, 3.14, 15, 7, 15);
    g.bezierCurveTo(10.86, 15, 14, 11.86, 14, 8);
    g.bezierCurveTo(14, 4.14, 10.86, 1, 7, 1);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['quote', 14, 16, g => {
    g.beginPath();
    g.moveTo(6.16, 3.84);
    g.bezierCurveTo(3.73, 5.4, 2.55, 7.01, 2.55, 9.7);
    g.bezierCurveTo(2.71, 9.65, 2.85, 9.65, 2.99, 9.65);
    g.bezierCurveTo(4.26, 9.65, 5.49, 10.51, 5.49, 12.06);
    g.bezierCurveTo(5.49, 13.67, 4.46, 14.67, 2.99, 14.67);
    g.bezierCurveTo(1.09, 14.67, 0, 13.15, 0, 10.42);
    g.bezierCurveTo(0, 6.62, 1.75, 3.89, 5.02, 2);
    g.lineTo(6.16, 3.84);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13.16, 3.84);
    g.bezierCurveTo(10.73, 5.4, 9.55, 7.01, 9.55, 9.7);
    g.bezierCurveTo(9.71, 9.65, 9.85, 9.65, 9.99, 9.65);
    g.bezierCurveTo(11.26, 9.65, 12.49, 10.51, 12.49, 12.06);
    g.bezierCurveTo(12.49, 13.67, 11.46, 14.67, 9.99, 14.67);
    g.bezierCurveTo(8.1, 14.67, 7.01, 13.15, 7.01, 10.42);
    g.bezierCurveTo(7.01, 6.62, 8.76, 3.89, 12.03, 2);
    g.lineTo(13.17, 3.84);
    g.lineTo(13.16, 3.84);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['radio-tower', 16, 16, g => {
    g.beginPath();
    g.moveTo(4.78, 5.78);
    g.bezierCurveTo(5.03, 5.53, 5.03, 5.11, 4.78, 4.86);
    g.bezierCurveTo(4.46, 4.53, 4.3, 4.1, 4.3, 3.67);
    g.bezierCurveTo(4.3, 3.24, 4.46, 2.81, 4.78, 2.48);
    g.bezierCurveTo(5.03, 2.22, 5.03, 1.81, 4.78, 1.56);
    g.ellipse(4.33630257, 1.9829676, 0.613, 0.613, 0, -0.76148364, 4.70210728, true);
    g.bezierCurveTo(4.17, 1.37, 4, 1.43, 3.88, 1.56);
    g.bezierCurveTo(3.31, 2.14, 3.03, 2.91, 3.03, 3.67);
    g.bezierCurveTo(3.03, 4.43, 3.32, 5.2, 3.88, 5.78);
    g.bezierCurveTo(4.13, 6.03, 4.54, 6.03, 4.78, 5.78);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2.32, 0.19);
    g.ellipse(1.86, 0.6506528, 0.651, 0.651, 0, -0.78610722, 3.92769988, true);
    g.bezierCurveTo(0.47, 1.15, 0, 2.41, 0, 3.66);
    g.bezierCurveTo(0, 4.92, 0.47, 6.18, 1.4, 7.14);
    g.bezierCurveTo(1.65, 7.4, 2.06, 7.4, 2.31, 7.14);
    g.bezierCurveTo(2.56, 6.88, 2.56, 6.46, 2.31, 6.2);
    g.bezierCurveTo(1.63, 5.5, 1.29, 4.58, 1.29, 3.66);
    g.bezierCurveTo(1.29, 2.74, 1.63, 1.82, 2.31, 1.12);
    g.ellipse(1.84667891, 0.64996429, 0.66, 0.66, 0, -5.49059321, -0.77108755, true);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8.01, 5.29);
    g.ellipse(8.01, 3.67, 1.62, 1.62, 0, -4.71238898, -3.14159265, true);
    g.bezierCurveTo(6.38, 4.56, 7.11, 5.29, 8.01, 5.29);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14.58, 0.2);
    g.ellipse(14.125, 0.63284986, 0.628, 0.628, 0, -0.76045527, 3.90204792, true);
    g.bezierCurveTo(13.42, 0.46, 13.42, 0.88, 13.67, 1.14);
    g.bezierCurveTo(14.35, 1.84, 14.69, 2.76, 14.69, 3.68);
    g.bezierCurveTo(14.69, 4.6, 14.35, 5.51, 13.67, 6.22);
    g.bezierCurveTo(13.42, 6.48, 13.42, 6.9, 13.67, 7.16);
    g.ellipse(14.13, 6.6993472, 0.651, 0.651, 0, -3.92769988, 0.78610722, true);
    g.bezierCurveTo(15.52, 6.2, 15.99, 4.94, 15.99, 3.68);
    g.ellipse(10.94203824, 3.6996483, 5.048, 5.048, 0, -0.0038923, 5.51716284, true);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8.01, 6.59);
    g.bezierCurveTo(7.6, 6.59, 7.18, 6.49, 6.81, 6.29);
    g.lineTo(3.66, 14.66);
    g.lineTo(5.15, 14.66);
    g.lineTo(6.01, 13.66);
    g.lineTo(10.01, 13.66);
    g.lineTo(10.85, 14.66);
    g.lineTo(12.34, 14.66);
    g.lineTo(9.2, 6.29);
    g.bezierCurveTo(8.82, 6.49, 8.42, 6.59, 8.01, 6.59);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 7.07);
    g.lineTo(9.01, 10.67);
    g.lineTo(7.01, 10.67);
    g.lineTo(8, 7.07);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6.01, 12.66);
    g.lineTo(7.01, 11.66);
    g.lineTo(9.01, 11.66);
    g.lineTo(10.01, 12.66);
    g.lineTo(6.01, 12.66);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11.2, 1.56);
    g.bezierCurveTo(10.95, 1.81, 10.95, 2.23, 11.2, 2.48);
    g.bezierCurveTo(11.52, 2.81, 11.68, 3.24, 11.68, 3.67);
    g.bezierCurveTo(11.68, 4.1, 11.52, 4.53, 11.2, 4.86);
    g.bezierCurveTo(10.95, 5.12, 10.95, 5.53, 11.2, 5.78);
    g.ellipse(11.65, 5.33909185, 0.63, 0.63, 0, -3.91678603, 0.77519337, true);
    g.bezierCurveTo(12.67, 5.2, 12.95, 4.43, 12.95, 3.67);
    g.bezierCurveTo(12.95, 2.91, 12.67, 2.14, 12.1, 1.56);
    g.ellipse(11.65, 2.00660497, 0.634, 0.634, 0, -0.78161164, 3.9232043, true);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['reply', 14, 16, g => {
    g.beginPath();
    g.moveTo(6.5, 3.5);
    g.bezierCurveTo(10.42, 3.94, 14.5, 6.625, 14.5, 13.5);
    g.bezierCurveTo(12.188, 8.438, 9.75, 7.5, 6.5, 7.5);
    g.lineTo(6.5, 11);
    g.lineTo(1, 5.5);
    g.lineTo(6.5, 0);
    g.lineTo(6.5, 3.5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['repo-clone', 16, 16, g => {
    g.beginPath();
    g.moveTo(15, 0);
    g.lineTo(9, 0);
    g.lineTo(9, 7);
    g.bezierCurveTo(9, 7.55, 9.45, 8, 10, 8);
    g.lineTo(11, 8);
    g.lineTo(11, 9);
    g.lineTo(12, 9);
    g.lineTo(12, 8);
    g.lineTo(15, 8);
    g.bezierCurveTo(15.55, 8, 16, 7.55, 16, 7);
    g.lineTo(16, 1);
    g.bezierCurveTo(16, 0.45, 15.55, 0, 15, 0);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 7);
    g.lineTo(10, 7);
    g.lineTo(10, 6);
    g.lineTo(11, 6);
    g.lineTo(11, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15, 7);
    g.lineTo(12, 7);
    g.lineTo(12, 6);
    g.lineTo(15, 6);
    g.lineTo(15, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15, 5);
    g.lineTo(11, 5);
    g.lineTo(11, 1);
    g.lineTo(15, 1);
    g.lineTo(15, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 5);
    g.lineTo(3, 5);
    g.lineTo(3, 4);
    g.lineTo(4, 4);
    g.lineTo(4, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 3);
    g.lineTo(3, 3);
    g.lineTo(3, 2);
    g.lineTo(4, 2);
    g.lineTo(4, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 1);
    g.lineTo(8, 1);
    g.lineTo(8, 0);
    g.lineTo(1, 0);
    g.bezierCurveTo(0.45, 0, 0, 0.45, 0, 1);
    g.lineTo(0, 13);
    g.bezierCurveTo(0, 13.55, 0.45, 14, 1, 14);
    g.lineTo(3, 14);
    g.lineTo(3, 16);
    g.lineTo(4.5, 14.5);
    g.lineTo(6, 16);
    g.lineTo(6, 14);
    g.lineTo(11, 14);
    g.bezierCurveTo(11.55, 14, 12, 13.55, 12, 13);
    g.lineTo(12, 10);
    g.lineTo(2, 10);
    g.lineTo(2, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 11);
    g.lineTo(11, 13);
    g.lineTo(6, 13);
    g.lineTo(6, 12);
    g.lineTo(3, 12);
    g.lineTo(3, 13);
    g.lineTo(1, 13);
    g.lineTo(1, 11);
    g.lineTo(11, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 8);
    g.lineTo(4, 8);
    g.lineTo(4, 9);
    g.lineTo(3, 9);
    g.lineTo(3, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 7);
    g.lineTo(3, 7);
    g.lineTo(3, 6);
    g.lineTo(4, 6);
    g.lineTo(4, 7);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['repo-force-push', 12, 16, g => {
    g.beginPath();
    g.moveTo(10, 9);
    g.lineTo(8, 9);
    g.lineTo(8, 16);
    g.lineTo(6, 16);
    g.lineTo(6, 9);
    g.lineTo(4, 9);
    g.lineTo(6.25, 6);
    g.lineTo(4, 6);
    g.lineTo(7, 2);
    g.lineTo(10, 6);
    g.lineTo(7.75, 6);
    g.lineTo(10, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 0);
    g.lineTo(1, 0);
    g.bezierCurveTo(0.45, 0, 0, 0.45, 0, 1);
    g.lineTo(0, 13);
    g.bezierCurveTo(0, 13.55, 0.45, 14, 1, 14);
    g.lineTo(5, 14);
    g.lineTo(5, 13);
    g.lineTo(1, 13);
    g.lineTo(1, 11);
    g.lineTo(5, 11);
    g.lineTo(5, 10);
    g.lineTo(2, 10);
    g.lineTo(2, 1);
    g.lineTo(11, 1);
    g.lineTo(11, 10);
    g.lineTo(9, 10);
    g.lineTo(9, 11);
    g.lineTo(11, 11);
    g.lineTo(11, 13);
    g.lineTo(9, 13);
    g.lineTo(9, 14);
    g.lineTo(11, 14);
    g.bezierCurveTo(11.55, 14, 12, 13.55, 12, 13);
    g.lineTo(12, 1);
    g.bezierCurveTo(12, 0.45, 11.55, 0, 11, 0);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['repo-forked', 10, 16, g => {
    g.beginPath();
    g.moveTo(8, 1);
    g.ellipse(7.99473412, 2.99299304, 1.993, 1.993, 0, -1.56815414, 2.09337229, true);
    g.lineTo(7, 6);
    g.lineTo(5, 8);
    g.lineTo(3, 6);
    g.lineTo(3, 4.72);
    g.ellipse(2.00526588, 2.99299304, 1.993, 1.993, 0, -5.23496495, -1.57343852, true);
    g.ellipse(1.99473412, 2.99299304, 1.993, 1.993, 0, -1.56815414, 2.09337229, true);
    g.lineTo(1, 6.5);
    g.lineTo(4, 9.5);
    g.lineTo(4, 11.28);
    g.ellipse(4.99473412, 13.00700696, 1.993, 1.993, 0, -2.09337229, 1.56815414, true);
    g.ellipse(5.00526588, 13.00700696, 1.993, 1.993, 0, -4.70974679, -1.04822036, true);
    g.lineTo(6, 9.5);
    g.lineTo(9, 6.5);
    g.lineTo(9, 4.72);
    g.ellipse(8.00526588, 2.99299304, 1.993, 1.993, 0, -5.23496495, -1.57343852, true);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 4.2);
    g.bezierCurveTo(1.34, 4.2, 0.8, 3.65, 0.8, 3);
    g.bezierCurveTo(0.8, 2.35, 1.35, 1.8, 2, 1.8);
    g.bezierCurveTo(2.65, 1.8, 3.2, 2.35, 3.2, 3);
    g.bezierCurveTo(3.2, 3.65, 2.65, 4.2, 2, 4.2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5, 14.2);
    g.bezierCurveTo(4.34, 14.2, 3.8, 13.65, 3.8, 13);
    g.bezierCurveTo(3.8, 12.35, 4.35, 11.8, 5, 11.8);
    g.bezierCurveTo(5.65, 11.8, 6.2, 12.35, 6.2, 13);
    g.bezierCurveTo(6.2, 13.65, 5.65, 14.2, 5, 14.2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 4.2);
    g.bezierCurveTo(7.34, 4.2, 6.8, 3.65, 6.8, 3);
    g.bezierCurveTo(6.8, 2.35, 7.35, 1.8, 8, 1.8);
    g.bezierCurveTo(8.65, 1.8, 9.2, 2.35, 9.2, 3);
    g.bezierCurveTo(9.2, 3.65, 8.65, 4.2, 8, 4.2);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['repo-pull', 16, 16, g => {
    g.beginPath();
    g.moveTo(13, 8);
    g.lineTo(13, 6);
    g.lineTo(7, 6);
    g.lineTo(7, 4);
    g.lineTo(13, 4);
    g.lineTo(13, 2);
    g.lineTo(16, 5);
    g.lineTo(13, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 2);
    g.lineTo(3, 2);
    g.lineTo(3, 3);
    g.lineTo(4, 3);
    g.lineTo(4, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 7);
    g.lineTo(12, 7);
    g.lineTo(12, 13);
    g.bezierCurveTo(12, 13.55, 11.55, 14, 11, 14);
    g.lineTo(6, 14);
    g.lineTo(6, 16);
    g.lineTo(4.5, 14.5);
    g.lineTo(3, 16);
    g.lineTo(3, 14);
    g.lineTo(1, 14);
    g.bezierCurveTo(0.45, 14, 0, 13.55, 0, 13);
    g.lineTo(0, 1);
    g.bezierCurveTo(0, 0.45, 0.45, 0, 1, 0);
    g.lineTo(11, 0);
    g.bezierCurveTo(11.55, 0, 12, 0.45, 12, 1);
    g.lineTo(12, 3);
    g.lineTo(11, 3);
    g.lineTo(11, 1);
    g.lineTo(2, 1);
    g.lineTo(2, 10);
    g.lineTo(11, 10);
    g.lineTo(11, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 11);
    g.lineTo(1, 11);
    g.lineTo(1, 13);
    g.lineTo(3, 13);
    g.lineTo(3, 12);
    g.lineTo(6, 12);
    g.lineTo(6, 13);
    g.lineTo(11, 13);
    g.lineTo(11, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 6);
    g.lineTo(3, 6);
    g.lineTo(3, 7);
    g.lineTo(4, 7);
    g.lineTo(4, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 4);
    g.lineTo(3, 4);
    g.lineTo(3, 5);
    g.lineTo(4, 5);
    g.lineTo(4, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 9);
    g.lineTo(4, 9);
    g.lineTo(4, 8);
    g.lineTo(3, 8);
    g.lineTo(3, 9);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['repo-push', 12, 16, g => {
    g.beginPath();
    g.moveTo(4, 3);
    g.lineTo(3, 3);
    g.lineTo(3, 2);
    g.lineTo(4, 2);
    g.lineTo(4, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 5);
    g.lineTo(4, 5);
    g.lineTo(4, 4);
    g.lineTo(3, 4);
    g.lineTo(3, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 5);
    g.lineTo(4, 9);
    g.lineTo(6, 9);
    g.lineTo(6, 16);
    g.lineTo(8, 16);
    g.lineTo(8, 9);
    g.lineTo(10, 9);
    g.lineTo(7, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 0);
    g.lineTo(1, 0);
    g.bezierCurveTo(0.45, 0, 0, 0.45, 0, 1);
    g.lineTo(0, 13);
    g.bezierCurveTo(0, 13.55, 0.45, 14, 1, 14);
    g.lineTo(5, 14);
    g.lineTo(5, 13);
    g.lineTo(1, 13);
    g.lineTo(1, 11);
    g.lineTo(5, 11);
    g.lineTo(5, 10);
    g.lineTo(2, 10);
    g.lineTo(2, 1);
    g.lineTo(11.02, 1);
    g.lineTo(11, 10);
    g.lineTo(9, 10);
    g.lineTo(9, 11);
    g.lineTo(11, 11);
    g.lineTo(11, 13);
    g.lineTo(9, 13);
    g.lineTo(9, 14);
    g.lineTo(11, 14);
    g.bezierCurveTo(11.55, 14, 12, 13.55, 12, 13);
    g.lineTo(12, 1);
    g.bezierCurveTo(12, 0.45, 11.55, 0, 11, 0);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['repo', 12, 16, g => {
    g.beginPath();
    g.moveTo(4, 9);
    g.lineTo(3, 9);
    g.lineTo(3, 8);
    g.lineTo(4, 8);
    g.lineTo(4, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 6);
    g.lineTo(3, 6);
    g.lineTo(3, 7);
    g.lineTo(4, 7);
    g.lineTo(4, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 4);
    g.lineTo(3, 4);
    g.lineTo(3, 5);
    g.lineTo(4, 5);
    g.lineTo(4, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 2);
    g.lineTo(3, 2);
    g.lineTo(3, 3);
    g.lineTo(4, 3);
    g.lineTo(4, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 1);
    g.lineTo(12, 13);
    g.bezierCurveTo(12, 13.55, 11.55, 14, 11, 14);
    g.lineTo(6, 14);
    g.lineTo(6, 16);
    g.lineTo(4.5, 14.5);
    g.lineTo(3, 16);
    g.lineTo(3, 14);
    g.lineTo(1, 14);
    g.bezierCurveTo(0.45, 14, 0, 13.55, 0, 13);
    g.lineTo(0, 1);
    g.bezierCurveTo(0, 0.45, 0.45, 0, 1, 0);
    g.lineTo(11, 0);
    g.bezierCurveTo(11.55, 0, 12, 0.45, 12, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 11);
    g.lineTo(1, 11);
    g.lineTo(1, 13);
    g.lineTo(3, 13);
    g.lineTo(3, 12);
    g.lineTo(6, 12);
    g.lineTo(6, 13);
    g.lineTo(11, 13);
    g.lineTo(11, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 1);
    g.lineTo(2, 1);
    g.lineTo(2, 10);
    g.lineTo(11, 10);
    g.lineTo(11, 1);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['report', 16, 16, g => {
    g.beginPath();
    g.moveTo(0, 2);
    g.ellipse(1, 2, 1, 1, 0, 3.14159265, 4.71238898, false);
    g.lineTo(15, 1);
    g.ellipse(15, 2, 1, 1, 0, 4.71238898, 6.28318531, false);
    g.lineTo(16, 11);
    g.ellipse(15, 11, 1, 1, 0, 0, 1.57079633, false);
    g.lineTo(7, 12);
    g.lineTo(3, 16);
    g.lineTo(3, 12);
    g.lineTo(1, 12);
    g.ellipse(1, 11, 1, 1, 0, 1.57079633, 3.14159265, false);
    g.lineTo(0, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1, 2);
    g.lineTo(15, 2);
    g.lineTo(15, 11);
    g.lineTo(6.5, 11);
    g.lineTo(4, 13.5);
    g.lineTo(4, 11);
    g.lineTo(1, 11);
    g.lineTo(1, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 8);
    g.lineTo(9, 8);
    g.lineTo(9, 10);
    g.lineTo(7, 10);
    g.lineTo(7, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 3);
    g.lineTo(9, 3);
    g.lineTo(9, 7);
    g.lineTo(7, 7);
    g.lineTo(7, 3);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['rocket', 16, 16, g => {
    g.beginPath();
    g.moveTo(12.17, 3.83);
    g.bezierCurveTo(11.9, 3.56, 11.7, 3.28, 11.54, 2.95);
    g.bezierCurveTo(11.38, 2.64, 11.27, 2.29, 11.2, 1.93);
    g.bezierCurveTo(10.62, 2.26, 10.04, 2.63, 9.47, 3.06);
    g.bezierCurveTo(8.89, 3.5, 8.33, 4, 7.78, 4.54);
    g.bezierCurveTo(7.08, 5.24, 6.45, 6.35, 6, 6.99);
    g.lineTo(3, 6.99);
    g.lineTo(0, 10);
    g.lineTo(3, 10);
    g.lineTo(5, 8);
    g.bezierCurveTo(4.66, 8.77, 3.98, 10.98, 4, 11);
    g.lineTo(5, 12);
    g.bezierCurveTo(5.02, 12.02, 7.23, 11.36, 8, 11);
    g.lineTo(6, 13);
    g.lineTo(6, 16);
    g.lineTo(9, 13);
    g.lineTo(9, 10);
    g.bezierCurveTo(9.64, 9.55, 10.75, 8.91, 11.45, 8.22);
    g.bezierCurveTo(12, 7.67, 12.5, 7.09, 12.92, 6.52);
    g.bezierCurveTo(13.36, 5.94, 13.73, 5.36, 14.06, 4.8);
    g.bezierCurveTo(13.7, 4.72, 13.36, 4.61, 13.03, 4.46);
    g.ellipse(14.57842416, 1.44429401, 3.39, 3.39, 0, 2.04514855, 2.3609332, false);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(16, 0);
    g.bezierCurveTo(15.805, 0.72, 15.91, 0.38, 15.7, 1.06);
    g.bezierCurveTo(15.5, 1.76, 15.15, 2.64, 14.64, 3.72);
    g.bezierCurveTo(13.94, 3.64, 13.37, 3.39, 12.98, 3);
    g.bezierCurveTo(12.59, 2.61, 12.35, 2.06, 12.28, 1.36);
    g.bezierCurveTo(13.36, 0.84, 14.23, 0.48, 14.92, 0.28);
    g.bezierCurveTo(15.62, 0.08, 16, 0, 16, 0);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['rss', 10, 16, g => {
    g.beginPath();
    g.moveTo(2, 13);
    g.lineTo(0, 13);
    g.lineTo(0, 11);
    g.bezierCurveTo(1.11, 11, 2, 11.89, 2, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(0, 3);
    g.lineTo(0, 4);
    g.ellipse(0, 13, 9, 9, 0, 4.71238898, 6.28318531, false);
    g.lineTo(10, 13);
    g.bezierCurveTo(10, 7.48, 5.52, 3, 0, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(0, 7);
    g.lineTo(0, 8);
    g.bezierCurveTo(2.75, 8, 5, 10.25, 5, 13);
    g.lineTo(6, 13);
    g.bezierCurveTo(6, 9.69, 3.31, 7, 0, 7);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['ruby', 16, 16, g => {
    g.beginPath();
    g.moveTo(13, 6);
    g.lineTo(8, 11);
    g.lineTo(8, 4);
    g.lineTo(11, 4);
    g.lineTo(13, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(16, 6);
    g.lineTo(8, 14);
    g.lineTo(0, 6);
    g.lineTo(4, 2);
    g.lineTo(12, 2);
    g.lineTo(16, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 12.5);
    g.lineTo(14.5, 6);
    g.lineTo(11.5, 3);
    g.lineTo(4.5, 3);
    g.lineTo(1.5, 6);
    g.lineTo(8, 12.5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['screen-full', 14, 16, g => {
    g.beginPath();
    g.moveTo(13, 10);
    g.lineTo(14, 10);
    g.lineTo(14, 13);
    g.bezierCurveTo(14, 13.547, 13.547, 14, 13, 14);
    g.lineTo(10, 14);
    g.lineTo(10, 13);
    g.lineTo(13, 13);
    g.lineTo(13, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1, 10);
    g.lineTo(0, 10);
    g.lineTo(0, 13);
    g.bezierCurveTo(0, 13.547, 0.453, 14, 1, 14);
    g.lineTo(4, 14);
    g.lineTo(4, 13);
    g.lineTo(1, 13);
    g.lineTo(1, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1, 3);
    g.lineTo(4, 3);
    g.lineTo(4, 2);
    g.lineTo(1, 2);
    g.bezierCurveTo(0.453, 2, 0, 2.453, 0, 3);
    g.lineTo(0, 6);
    g.lineTo(1, 6);
    g.lineTo(1, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 4);
    g.lineTo(12, 4);
    g.lineTo(12, 12);
    g.lineTo(2, 12);
    g.lineTo(2, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 10);
    g.lineTo(10, 10);
    g.lineTo(10, 6);
    g.lineTo(4, 6);
    g.lineTo(4, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 2);
    g.lineTo(10, 3);
    g.lineTo(13, 3);
    g.lineTo(13, 6);
    g.lineTo(14, 6);
    g.lineTo(14, 3);
    g.bezierCurveTo(14, 2.453, 13.547, 2, 13, 2);
    g.lineTo(10, 2);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['screen-normal', 14, 16, g => {
    g.beginPath();
    g.moveTo(2, 4);
    g.lineTo(0, 4);
    g.lineTo(0, 3);
    g.lineTo(2, 3);
    g.lineTo(2, 1);
    g.lineTo(3, 1);
    g.lineTo(3, 3);
    g.bezierCurveTo(3, 3.547, 2.547, 4, 2, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 12);
    g.lineTo(0, 12);
    g.lineTo(0, 13);
    g.lineTo(2, 13);
    g.lineTo(2, 15);
    g.lineTo(3, 15);
    g.lineTo(3, 13);
    g.bezierCurveTo(3, 12.453, 2.547, 12, 2, 12);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 10);
    g.bezierCurveTo(11, 10.547, 10.547, 11, 10, 11);
    g.lineTo(4, 11);
    g.bezierCurveTo(3.453, 11, 3, 10.547, 3, 10);
    g.lineTo(3, 6);
    g.bezierCurveTo(3, 5.453, 3.453, 5, 4, 5);
    g.lineTo(10, 5);
    g.bezierCurveTo(10.547, 5, 11, 5.453, 11, 6);
    g.lineTo(11, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9, 7);
    g.lineTo(5, 7);
    g.lineTo(5, 9);
    g.lineTo(9, 9);
    g.lineTo(9, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 13);
    g.lineTo(11, 15);
    g.lineTo(12, 15);
    g.lineTo(12, 13);
    g.lineTo(14, 13);
    g.lineTo(14, 12);
    g.lineTo(12, 12);
    g.bezierCurveTo(11.453, 12, 11, 12.453, 11, 13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 3);
    g.lineTo(12, 1);
    g.lineTo(11, 1);
    g.lineTo(11, 3);
    g.bezierCurveTo(11, 3.547, 11.453, 4, 12, 4);
    g.lineTo(14, 4);
    g.lineTo(14, 3);
    g.lineTo(12, 3);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['search', 16, 16, g => {
    g.beginPath();
    g.moveTo(15.7, 13.3);
    g.lineTo(11.89, 9.47);
    g.ellipse(7.07002059, 6.01562618, 5.93, 5.93, 0, -5.66135345, -0.00263511, true);
    g.bezierCurveTo(13, 2.69, 10.31, 0, 7, 0);
    g.bezierCurveTo(3.69, 0, 1, 2.69, 1, 6);
    g.bezierCurveTo(1, 9.31, 3.69, 12, 7, 12);
    g.bezierCurveTo(8.3, 12, 9.48, 11.59, 10.47, 10.89);
    g.lineTo(14.3, 14.7);
    g.bezierCurveTo(14.49, 14.9, 14.75, 15, 15, 15);
    g.bezierCurveTo(15.25, 15, 15.52, 14.91, 15.7, 14.7);
    g.ellipse(14.99644403, 13.995, 0.996, 0.996, 0, -5.49676196, -0.78642335, true);
    g.lineTo(15.7, 13.3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7, 10.7);
    g.bezierCurveTo(4.41, 10.7, 2.3, 8.59, 2.3, 6);
    g.bezierCurveTo(2.3, 3.41, 4.41, 1.3, 7, 1.3);
    g.bezierCurveTo(9.59, 1.3, 11.7, 3.41, 11.7, 6);
    g.bezierCurveTo(11.7, 8.59, 9.59, 10.7, 7, 10.7);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['server', 12, 16, g => {
    g.beginPath();
    g.moveTo(11, 6);
    g.lineTo(1, 6);
    g.bezierCurveTo(0.45, 6, 0, 6.45, 0, 7);
    g.lineTo(0, 9);
    g.bezierCurveTo(0, 9.55, 0.45, 10, 1, 10);
    g.lineTo(11, 10);
    g.bezierCurveTo(11.55, 10, 12, 9.55, 12, 9);
    g.lineTo(12, 7);
    g.bezierCurveTo(12, 6.45, 11.55, 6, 11, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 9);
    g.lineTo(1, 9);
    g.lineTo(1, 7);
    g.lineTo(2, 7);
    g.lineTo(2, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 9);
    g.lineTo(3, 9);
    g.lineTo(3, 7);
    g.lineTo(4, 7);
    g.lineTo(4, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 9);
    g.lineTo(5, 9);
    g.lineTo(5, 7);
    g.lineTo(6, 7);
    g.lineTo(6, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 9);
    g.lineTo(7, 9);
    g.lineTo(7, 7);
    g.lineTo(8, 7);
    g.lineTo(8, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 1);
    g.lineTo(1, 1);
    g.bezierCurveTo(0.45, 1, 0, 1.45, 0, 2);
    g.lineTo(0, 4);
    g.bezierCurveTo(0, 4.55, 0.45, 5, 1, 5);
    g.lineTo(11, 5);
    g.bezierCurveTo(11.55, 5, 12, 4.55, 12, 4);
    g.lineTo(12, 2);
    g.bezierCurveTo(12, 1.45, 11.55, 1, 11, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 4);
    g.lineTo(1, 4);
    g.lineTo(1, 2);
    g.lineTo(2, 2);
    g.lineTo(2, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 4);
    g.lineTo(3, 4);
    g.lineTo(3, 2);
    g.lineTo(4, 2);
    g.lineTo(4, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 4);
    g.lineTo(5, 4);
    g.lineTo(5, 2);
    g.lineTo(6, 2);
    g.lineTo(6, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 4);
    g.lineTo(7, 4);
    g.lineTo(7, 2);
    g.lineTo(8, 2);
    g.lineTo(8, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 3);
    g.lineTo(10, 3);
    g.lineTo(10, 2);
    g.lineTo(11, 2);
    g.lineTo(11, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 11);
    g.lineTo(1, 11);
    g.bezierCurveTo(0.45, 11, 0, 11.45, 0, 12);
    g.lineTo(0, 14);
    g.bezierCurveTo(0, 14.55, 0.45, 15, 1, 15);
    g.lineTo(11, 15);
    g.bezierCurveTo(11.55, 15, 12, 14.55, 12, 14);
    g.lineTo(12, 12);
    g.bezierCurveTo(12, 11.45, 11.55, 11, 11, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2, 14);
    g.lineTo(1, 14);
    g.lineTo(1, 12);
    g.lineTo(2, 12);
    g.lineTo(2, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 14);
    g.lineTo(3, 14);
    g.lineTo(3, 12);
    g.lineTo(4, 12);
    g.lineTo(4, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 14);
    g.lineTo(5, 14);
    g.lineTo(5, 12);
    g.lineTo(6, 12);
    g.lineTo(6, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 14);
    g.lineTo(7, 14);
    g.lineTo(7, 12);
    g.lineTo(8, 12);
    g.lineTo(8, 14);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['settings', 16, 16, g => {
    g.beginPath();
    g.moveTo(4, 7);
    g.lineTo(3, 7);
    g.lineTo(3, 2);
    g.lineTo(4, 2);
    g.lineTo(4, 7);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3, 14);
    g.lineTo(4, 14);
    g.lineTo(4, 11);
    g.lineTo(3, 11);
    g.lineTo(3, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 14);
    g.lineTo(9, 14);
    g.lineTo(9, 8);
    g.lineTo(8, 8);
    g.lineTo(8, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 14);
    g.lineTo(14, 14);
    g.lineTo(14, 12);
    g.lineTo(13, 12);
    g.lineTo(13, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14, 2);
    g.lineTo(13, 2);
    g.lineTo(13, 8);
    g.lineTo(14, 8);
    g.lineTo(14, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9, 2);
    g.lineTo(8, 2);
    g.lineTo(8, 4);
    g.lineTo(9, 4);
    g.lineTo(9, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5, 8);
    g.lineTo(2, 8);
    g.bezierCurveTo(1.45, 8, 1, 8.45, 1, 9);
    g.bezierCurveTo(1, 9.55, 1.45, 10, 2, 10);
    g.lineTo(5, 10);
    g.bezierCurveTo(5.55, 10, 6, 9.55, 6, 9);
    g.bezierCurveTo(6, 8.45, 5.55, 8, 5, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 5);
    g.lineTo(7, 5);
    g.bezierCurveTo(6.45, 5, 6, 5.45, 6, 6);
    g.bezierCurveTo(6, 6.55, 6.45, 7, 7, 7);
    g.lineTo(10, 7);
    g.bezierCurveTo(10.55, 7, 11, 6.55, 11, 6);
    g.bezierCurveTo(11, 5.45, 10.55, 5, 10, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(15, 9);
    g.lineTo(12, 9);
    g.bezierCurveTo(11.45, 9, 11, 9.45, 11, 10);
    g.bezierCurveTo(11, 10.55, 11.45, 11, 12, 11);
    g.lineTo(15, 11);
    g.bezierCurveTo(15.55, 11, 16, 10.55, 16, 10);
    g.bezierCurveTo(16, 9.45, 15.55, 9, 15, 9);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['shield', 14, 16, g => {
    g.beginPath();
    g.moveTo(7, 0);
    g.lineTo(0, 2);
    g.lineTo(0, 8.02);
    g.bezierCurveTo(0, 12.69, 5.31, 16, 7, 16);
    g.bezierCurveTo(8.69, 16, 14, 12.69, 14, 8.02);
    g.lineTo(14, 2);
    g.lineTo(7, 0);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5, 11);
    g.lineTo(6.14, 8.2);
    g.ellipse(5.58315468, 8.0879853, 0.568, 0.568, 0, -6.08467514, -1.00009706, true);
    g.bezierCurveTo(5.33, 7.25, 5, 6.66, 5, 6);
    g.bezierCurveTo(5, 4.91, 5.89, 4, 6.98, 4);
    g.bezierCurveTo(8.06, 4, 9, 4.91, 9, 6);
    g.bezierCurveTo(9, 6.66, 8.67, 7.25, 8.11, 7.61);
    g.bezierCurveTo(7.92, 7.74, 7.81, 7.97, 7.86, 8.2);
    g.lineTo(9, 11);
    g.lineTo(5, 11);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['sign-in', 14, 16, g => {
    g.beginPath();
    g.moveTo(7, 6.75);
    g.lineTo(7, 12);
    g.lineTo(11, 12);
    g.lineTo(11, 8);
    g.lineTo(12, 8);
    g.lineTo(12, 12);
    g.bezierCurveTo(12, 12.55, 11.55, 13, 11, 13);
    g.lineTo(7, 13);
    g.lineTo(7, 16);
    g.lineTo(1.55, 13.28);
    g.bezierCurveTo(1.22, 13.11, 1, 12.76, 1, 12.37);
    g.lineTo(1, 1);
    g.bezierCurveTo(1, 0.45, 1.45, 0, 2, 0);
    g.lineTo(11, 0);
    g.bezierCurveTo(11.55, 0, 12, 0.45, 12, 1);
    g.lineTo(12, 4);
    g.lineTo(11, 4);
    g.lineTo(11, 1);
    g.lineTo(3, 1);
    g.lineTo(7, 3);
    g.lineTo(7, 5.25);
    g.lineTo(10, 3);
    g.lineTo(10, 5);
    g.lineTo(14, 5);
    g.lineTo(14, 7);
    g.lineTo(10, 7);
    g.lineTo(10, 9);
    g.lineTo(7, 6.75);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['sign-out', 16, 16, g => {
    g.beginPath();
    g.moveTo(12, 9);
    g.lineTo(12, 7);
    g.lineTo(8, 7);
    g.lineTo(8, 5);
    g.lineTo(12, 5);
    g.lineTo(12, 3);
    g.lineTo(16, 6);
    g.lineTo(12, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 12);
    g.lineTo(6, 12);
    g.lineTo(6, 3);
    g.lineTo(2, 1);
    g.lineTo(10, 1);
    g.lineTo(10, 4);
    g.lineTo(11, 4);
    g.lineTo(11, 1);
    g.bezierCurveTo(11, 0.45, 10.55, 0, 10, 0);
    g.lineTo(1, 0);
    g.bezierCurveTo(0.45, 0, 0, 0.45, 0, 1);
    g.lineTo(0, 12.38);
    g.bezierCurveTo(0, 12.77, 0.22, 13.11, 0.55, 13.29);
    g.lineTo(6, 16.01);
    g.lineTo(6, 13);
    g.lineTo(10, 13);
    g.bezierCurveTo(10.55, 13, 11, 12.55, 11, 12);
    g.lineTo(11, 8);
    g.lineTo(10, 8);
    g.lineTo(10, 12);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['smiley', 16, 16, g => {
    g.beginPath();
    g.moveTo(8, 0);
    g.bezierCurveTo(3.58, 0, 0, 3.58, 0, 8);
    g.bezierCurveTo(0, 12.42, 3.58, 16, 8, 16);
    g.bezierCurveTo(12.42, 16, 16, 12.42, 16, 8);
    g.bezierCurveTo(16, 3.58, 12.42, 0, 8, 0);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12.81, 12.81);
    g.ellipse(8.06254384, 8.05394491, 6.72, 6.72, 0, 0.78630298, 1.17715907, false);
    g.bezierCurveTo(9.81, 14.62, 8.92, 14.79, 8, 14.79);
    g.bezierCurveTo(7.08, 14.79, 6.19, 14.62, 5.36, 14.26);
    g.bezierCurveTo(4.55, 13.92, 3.81, 13.43, 3.19, 12.81);
    g.ellipse(7.99097071, 8.03253109, 6.773, 6.773, 0, 2.3586481, 2.7464066, false);
    g.ellipse(7.79980844, 8.05024679, 6.59, 6.59, 0, 2.73772009, 3.14921743, false);
    g.bezierCurveTo(1.21, 7.08, 1.38, 6.19, 1.74, 5.36);
    g.bezierCurveTo(2.08, 4.55, 2.57, 3.81, 3.19, 3.19);
    g.bezierCurveTo(3.81, 2.57, 4.55, 2.08, 5.36, 1.74);
    g.ellipse(7.94975321, 7.79980844, 6.59, 6.59, 0, 4.30851642, 4.72001376, false);
    g.bezierCurveTo(8.92, 1.21, 9.81, 1.38, 10.64, 1.74);
    g.bezierCurveTo(11.45, 2.08, 12.19, 2.57, 12.81, 3.19);
    g.bezierCurveTo(13.43, 3.81, 13.92, 4.55, 14.26, 5.36);
    g.bezierCurveTo(14.62, 6.19, 14.79, 7.08, 14.79, 8);
    g.bezierCurveTo(14.79, 8.92, 14.62, 9.81, 14.26, 10.64);
    g.bezierCurveTo(13.92, 11.45, 13.43, 12.19, 12.81, 12.81);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 6.8);
    g.lineTo(4, 6.21);
    g.bezierCurveTo(4, 5.55, 4.53, 5.02, 5.2, 5.02);
    g.lineTo(5.79, 5.02);
    g.bezierCurveTo(6.45, 5.02, 6.98, 5.55, 6.98, 6.21);
    g.lineTo(6.98, 6.8);
    g.bezierCurveTo(6.98, 7.47, 6.45, 8, 5.79, 8);
    g.lineTo(5.2, 8);
    g.bezierCurveTo(4.53, 8, 4, 7.47, 4, 6.8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9, 6.8);
    g.lineTo(9, 6.21);
    g.bezierCurveTo(9, 5.55, 9.53, 5.02, 10.2, 5.02);
    g.lineTo(10.79, 5.02);
    g.bezierCurveTo(11.45, 5.02, 11.98, 5.55, 11.98, 6.21);
    g.lineTo(11.98, 6.8);
    g.bezierCurveTo(11.98, 7.47, 11.45, 8, 10.79, 8);
    g.lineTo(10.2, 8);
    g.bezierCurveTo(9.53, 8, 9, 7.47, 9, 6.8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 10);
    g.bezierCurveTo(12.28, 11.88, 10.09, 13, 8, 13);
    g.bezierCurveTo(5.91, 13, 3.72, 11.87, 3, 10);
    g.bezierCurveTo(2.86, 9.61, 3.23, 9, 3.66, 9);
    g.lineTo(12.25, 9);
    g.bezierCurveTo(12.66, 9, 13.14, 9.61, 13, 10);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['squirrel', 16, 16, g => {
    g.beginPath();
    g.moveTo(11.75, 1);
    g.bezierCurveTo(9.54, 1, 7.75, 2.31, 7.75, 3.92);
    g.bezierCurveTo(7.75, 5.86, 8.25, 6.95, 7.75, 10);
    g.bezierCurveTo(7.75, 5.5, 4.98, 3.66, 3.75, 3.66);
    g.bezierCurveTo(3.8, 3.16, 3.27, 3, 3.27, 3);
    g.bezierCurveTo(3.27, 3, 3.05, 3.11, 2.97, 3.34);
    g.bezierCurveTo(2.7, 3.03, 2.41, 3.07, 2.41, 3.07);
    g.lineTo(2.28, 3.65);
    g.bezierCurveTo(0.44, 5.58, 0.45, 4.29, 0.43, 6.87);
    g.bezierCurveTo(0.63, 7.2, 1.96, 7.47, 2.9, 7.3);
    g.bezierCurveTo(3.79, 7.35, 3.57, 8.09, 3.37, 8.29);
    g.bezierCurveTo(2.53, 9.13, 1.75, 8, 0.75, 8);
    g.bezierCurveTo(-0.25, 8, -0.25, 9, 0.75, 9);
    g.bezierCurveTo(1.75, 9, 1.75, 10, 3.75, 10);
    g.bezierCurveTo(0.66, 11.2, 3.75, 14, 3.75, 14);
    g.lineTo(2.75, 14);
    g.bezierCurveTo(1.75, 14, 1.75, 15, 1.75, 15);
    g.lineTo(7.75, 15);
    g.bezierCurveTo(10.75, 15, 12.75, 14, 12.75, 11.53);
    g.bezierCurveTo(12.75, 10.68, 12.32, 9.74, 11.75, 9);
    g.bezierCurveTo(10.64, 7.54, 11.98, 6.32, 12.75, 7);
    g.bezierCurveTo(13.52, 7.68, 15.75, 8, 15.75, 5);
    g.bezierCurveTo(15.75, 2.79, 13.96, 1, 11.75, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2.25, 6);
    g.bezierCurveTo(1.97, 6, 1.75, 5.78, 1.75, 5.5);
    g.bezierCurveTo(1.75, 5.22, 1.97, 5, 2.25, 5);
    g.bezierCurveTo(2.53, 5, 2.75, 5.22, 2.75, 5.5);
    g.bezierCurveTo(2.75, 5.78, 2.53, 6, 2.25, 6);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['star', 14, 16, g => {
    g.beginPath();
    g.moveTo(14, 6);
    g.lineTo(9.1, 5.36);
    g.lineTo(7, 1);
    g.lineTo(4.9, 5.36);
    g.lineTo(0, 6);
    g.lineTo(3.6, 9.26);
    g.lineTo(2.67, 14);
    g.lineTo(7, 11.67);
    g.lineTo(11.33, 14);
    g.lineTo(10.4, 9.26);
    g.lineTo(14, 6);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['stop', 14, 16, g => {
    g.beginPath();
    g.moveTo(10, 1);
    g.lineTo(4, 1);
    g.lineTo(0, 5);
    g.lineTo(0, 11);
    g.lineTo(4, 15);
    g.lineTo(10, 15);
    g.lineTo(14, 11);
    g.lineTo(14, 5);
    g.lineTo(10, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 10.5);
    g.lineTo(9.5, 14);
    g.lineTo(4.5, 14);
    g.lineTo(1, 10.5);
    g.lineTo(1, 5.5);
    g.lineTo(4.5, 2);
    g.lineTo(9.5, 2);
    g.lineTo(13, 5.5);
    g.lineTo(13, 10.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 4);
    g.lineTo(8, 4);
    g.lineTo(8, 9);
    g.lineTo(6, 9);
    g.lineTo(6, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 10);
    g.lineTo(8, 10);
    g.lineTo(8, 12);
    g.lineTo(6, 12);
    g.lineTo(6, 10);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['sync', 12, 16, g => {
    g.beginPath();
    g.moveTo(10.236, 7.4);
    g.ellipse(6.13453602, 8.03284534, 4.15, 4.15, 0, 6.13009517, 7.07977655, false);
    g.ellipse(5.99421639, 7.89592712, 4.346, 4.346, 0, 0.79553298, 2.1470884, false);
    g.lineTo(4.796, 10.4);
    g.lineTo(0.496, 9.8);
    g.lineTo(1.096, 14);
    g.lineTo(2.406, 12.74);
    g.bezierCurveTo(4.766, 14.48, 8.106, 14.31, 10.246, 12.2);
    g.ellipse(6.11665511, 8.01958294, 5.876, 5.876, 0, -5.49164118, -0.04759846, true);
    g.lineTo(10.236, 7.4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2.956, 5);
    g.ellipse(5.99778361, 8.10407288, 4.346, 4.346, 0, 3.93712563, 5.28868105, false);
    g.lineTo(7.196, 5.6);
    g.lineTo(11.496, 6.2);
    g.lineTo(10.896, 2);
    g.lineTo(9.586, 3.26);
    g.bezierCurveTo(7.226, 1.52, 3.886, 1.69, 1.736, 3.8);
    g.bezierCurveTo(0.496, 5.03, -0.064, 6.65, 0.006, 8.26);
    g.lineTo(1.756, 8.61);
    g.ellipse(5.8774554, 7.97556689, 4.17, 4.17, 0, 2.98885728, 3.93616663, false);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['tag', 14, 16, g => {
    g.beginPath();
    g.moveTo(7.73, 1.73);
    g.bezierCurveTo(7.26, 1.26, 6.62, 1, 5.96, 1);
    g.lineTo(3.5, 1);
    g.bezierCurveTo(2.13, 1, 1, 2.13, 1, 3.5);
    g.lineTo(1, 5.97);
    g.bezierCurveTo(1, 6.63, 1.27, 7.27, 1.73, 7.74);
    g.lineTo(7.79, 13.8);
    g.bezierCurveTo(8.18, 14.19, 8.81, 14.19, 9.2, 13.8);
    g.lineTo(13.79, 9.21);
    g.ellipse(13.08644403, 8.505, 0.996, 0.996, 0, -5.49676196, -0.78642335, true);
    g.lineTo(7.73, 1.73);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(2.38, 7.09);
    g.bezierCurveTo(2.07, 6.79, 1.91, 6.39, 1.91, 5.96);
    g.lineTo(1.91, 3.5);
    g.bezierCurveTo(1.91, 2.62, 2.63, 1.91, 3.5, 1.91);
    g.lineTo(5.97, 1.91);
    g.bezierCurveTo(6.39, 1.91, 6.8, 2.07, 7.1, 2.38);
    g.lineTo(13.24, 8.51);
    g.lineTo(8.51, 13.24);
    g.lineTo(2.38, 7.09);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(3.01, 3);
    g.lineTo(5.01, 3);
    g.lineTo(5.01, 5);
    g.lineTo(3, 5);
    g.lineTo(3, 3);
    g.lineTo(3.01, 3);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['tasklist', 16, 16, g => {
    g.beginPath();
    g.moveTo(15.41, 9);
    g.lineTo(7.59, 9);
    g.bezierCurveTo(7, 9, 7, 8.59, 7, 8);
    g.bezierCurveTo(7, 7.41, 7, 7, 7.59, 7);
    g.lineTo(15.4, 7);
    g.bezierCurveTo(15.99, 7, 15.99, 7.41, 15.99, 8);
    g.bezierCurveTo(15.99, 8.59, 15.99, 9, 15.4, 9);
    g.lineTo(15.41, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9.59, 4);
    g.bezierCurveTo(9, 4, 9, 3.59, 9, 3);
    g.bezierCurveTo(9, 2.41, 9, 2, 9.59, 2);
    g.lineTo(15.4, 2);
    g.bezierCurveTo(15.99, 2, 15.99, 2.41, 15.99, 3);
    g.bezierCurveTo(15.99, 3.59, 15.99, 4, 15.4, 4);
    g.lineTo(9.59, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(0, 3.91);
    g.lineTo(1.41, 2.61);
    g.lineTo(3, 4.2);
    g.lineTo(7.09, 0);
    g.lineTo(8.5, 1.41);
    g.lineTo(3, 6.91);
    g.lineTo(0, 3.91);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7.59, 12);
    g.lineTo(15.4, 12);
    g.bezierCurveTo(15.99, 12, 15.99, 12.41, 15.99, 13);
    g.bezierCurveTo(15.99, 13.59, 15.99, 14, 15.4, 14);
    g.lineTo(7.59, 14);
    g.bezierCurveTo(7, 14, 7, 13.59, 7, 13);
    g.bezierCurveTo(7, 12.41, 7, 12, 7.59, 12);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['telescope', 14, 16, g => {
    g.beginPath();
    g.moveTo(7.59, 9);
    g.lineTo(10.59, 15);
    g.lineTo(9.59, 15);
    g.lineTo(7.59, 11);
    g.lineTo(7.59, 16);
    g.lineTo(6.59, 16);
    g.lineTo(6.59, 10);
    g.lineTo(4.59, 15);
    g.lineTo(3.59, 15);
    g.lineTo(5.59, 10);
    g.lineTo(7.59, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6.59, 0);
    g.lineTo(5.59, 0);
    g.lineTo(5.59, 1);
    g.lineTo(6.59, 1);
    g.lineTo(6.59, 0);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4.59, 3);
    g.lineTo(3.59, 3);
    g.lineTo(3.59, 4);
    g.lineTo(4.59, 4);
    g.lineTo(4.59, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1.59, 1);
    g.lineTo(0.59, 1);
    g.lineTo(0.59, 2);
    g.lineTo(1.59, 2);
    g.lineTo(1.59, 1);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(0.22, 9);
    g.ellipse(0.5189281, 9.42549029, 0.52, 0.52, 0, -2.18323149, 2.65206284, true);
    g.lineTo(0.61, 10.59);
    g.bezierCurveTo(0.74, 10.82, 1.02, 10.9, 1.25, 10.79);
    g.lineTo(2.64, 10.13);
    g.lineTo(1.48, 8.13);
    g.lineTo(0.21, 8.99);
    g.lineTo(0.22, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8.11, 3.61);
    g.lineTo(2.31, 7.56);
    g.lineTo(3.54, 9.7);
    g.lineTo(9.87, 6.67);
    g.lineTo(8.1, 3.61);
    g.lineTo(8.11, 3.61);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12.33, 4.89);
    g.lineTo(10.86, 2.37);
    g.ellipse(10.41931855, 2.62670968, 0.51, 0.51, 0, -0.52747403, 4.13279601, true);
    g.lineTo(8.94, 3.03);
    g.lineTo(10.78, 6.23);
    g.lineTo(12.11, 5.59);
    g.bezierCurveTo(12.38, 5.46, 12.47, 5.15, 12.33, 4.89);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['terminal', 14, 16, g => {
    g.beginPath();
    g.moveTo(7, 10);
    g.lineTo(11, 10);
    g.lineTo(11, 11);
    g.lineTo(7, 11);
    g.lineTo(7, 10);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 11);
    g.lineTo(7, 8);
    g.lineTo(4, 5);
    g.lineTo(3.25, 5.75);
    g.lineTo(5.5, 8);
    g.lineTo(3.25, 10.25);
    g.lineTo(4, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14, 3);
    g.lineTo(14, 13);
    g.bezierCurveTo(14, 13.55, 13.55, 14, 13, 14);
    g.lineTo(1, 14);
    g.bezierCurveTo(0.45, 14, 0, 13.55, 0, 13);
    g.lineTo(0, 3);
    g.bezierCurveTo(0, 2.45, 0.45, 2, 1, 2);
    g.lineTo(13, 2);
    g.bezierCurveTo(13.55, 2, 14, 2.45, 14, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13, 3);
    g.lineTo(1, 3);
    g.lineTo(1, 13);
    g.lineTo(13, 13);
    g.lineTo(13, 3);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['text-size', 18, 16, g => {
    g.beginPath();
    g.moveTo(13.62, 9.08);
    g.lineTo(12.1, 3.66);
    g.lineTo(12.04, 3.66);
    g.lineTo(10.54, 9.08);
    g.lineTo(13.62, 9.08);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(5.7, 10.13);
    g.bezierCurveTo(4.605, 6.27, 4.68, 6.52, 4.53, 6.02);
    g.lineTo(4.45, 6.02);
    g.lineTo(3.32, 10.13);
    g.lineTo(5.7, 10.13);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(17.31, 14);
    g.lineTo(15.06, 14);
    g.lineTo(14.11, 10.75);
    g.lineTo(10.04, 10.75);
    g.lineTo(9.09, 14);
    g.lineTo(6.84, 14);
    g.lineTo(6.15, 11.67);
    g.lineTo(2.87, 11.67);
    g.lineTo(2.17, 14);
    g.lineTo(0, 14);
    g.lineTo(3.3, 4.41);
    g.lineTo(5.8, 4.41);
    g.lineTo(7.97, 10.75);
    g.lineTo(10.86, 2);
    g.lineTo(13.38, 2);
    g.lineTo(17.32, 14);
    g.lineTo(17.31, 14);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['three-bars', 12, 16, g => {
    g.beginPath();
    g.moveTo(11.41, 9);
    g.lineTo(0.59, 9);
    g.bezierCurveTo(0, 9, 0, 8.59, 0, 8);
    g.bezierCurveTo(0, 7.41, 0, 7, 0.59, 7);
    g.lineTo(11.4, 7);
    g.bezierCurveTo(11.99, 7, 11.99, 7.41, 11.99, 8);
    g.bezierCurveTo(11.99, 8.59, 11.99, 9, 11.4, 9);
    g.lineTo(11.41, 9);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11.41, 5);
    g.lineTo(0.59, 5);
    g.bezierCurveTo(0, 5, 0, 4.59, 0, 4);
    g.bezierCurveTo(0, 3.41, 0, 3, 0.59, 3);
    g.lineTo(11.4, 3);
    g.bezierCurveTo(11.99, 3, 11.99, 3.41, 11.99, 4);
    g.bezierCurveTo(11.99, 4.59, 11.99, 5, 11.4, 5);
    g.lineTo(11.41, 5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(0.59, 11);
    g.lineTo(11.4, 11);
    g.bezierCurveTo(11.99, 11, 11.99, 11.41, 11.99, 12);
    g.bezierCurveTo(11.99, 12.59, 11.99, 13, 11.4, 13);
    g.lineTo(0.59, 13);
    g.bezierCurveTo(0, 13, 0, 12.59, 0, 12);
    g.bezierCurveTo(0, 11.41, 0, 11, 0.59, 11);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['thumbsdown', 16, 16, g => {
    g.beginPath();
    g.moveTo(15.98, 7.83);
    g.lineTo(15.01, 1.88);
    g.bezierCurveTo(14.84, 0.5, 13.13, 0, 12, 0);
    g.lineTo(5.69, 0);
    g.bezierCurveTo(5.49, 0, 5.31, 0.05, 5.16, 0.14);
    g.lineTo(3.72, 1);
    g.lineTo(2, 1);
    g.bezierCurveTo(0.94, 1, 0, 1.94, 0, 3);
    g.lineTo(0, 7);
    g.bezierCurveTo(0, 8.06, 0.94, 9.02, 2, 9);
    g.lineTo(4, 9);
    g.bezierCurveTo(4.91, 9, 5.39, 9.45, 6.39, 10.55);
    g.bezierCurveTo(7.3, 11.55, 7.27, 12.35, 7.02, 13.82);
    g.bezierCurveTo(6.94, 14.32, 7.08, 14.82, 7.44, 15.24);
    g.bezierCurveTo(7.83, 15.71, 8.42, 16.01, 9, 16.01);
    g.bezierCurveTo(10.83, 16.01, 12, 12.29, 12, 10.99);
    g.lineTo(11.98, 10.01);
    g.lineTo(14.02, 10.01);
    g.bezierCurveTo(15.18, 10.01, 15.97, 9.21, 16, 8.04);
    g.bezierCurveTo(16, 7.98, 16.02, 7.91, 15.98, 7.84);
    g.lineTo(15.98, 7.83);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14.01, 9.02);
    g.lineTo(12.02, 9.02);
    g.bezierCurveTo(11.32, 9.02, 10.99, 9.3, 10.99, 9.99);
    g.lineTo(11.02, 11.02);
    g.bezierCurveTo(11.02, 12.29, 9.85, 15.02, 9.02, 15.02);
    g.bezierCurveTo(8.52, 15.02, 7.94, 14.52, 8.02, 14.02);
    g.bezierCurveTo(8.27, 12.44, 8.36, 11.24, 7.13, 9.88);
    g.bezierCurveTo(6.11, 8.75, 5.36, 8, 4, 8);
    g.lineTo(4, 2);
    g.lineTo(5.67, 1);
    g.lineTo(12, 1);
    g.bezierCurveTo(12.73, 1, 13.95, 1.31, 14, 2);
    g.lineTo(14.02, 2.02);
    g.lineTo(15.02, 8.02);
    g.bezierCurveTo(14.99, 8.66, 14.64, 9.02, 14.02, 9.02);
    g.lineTo(14.01, 9.02);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['thumbsup', 16, 16, g => {
    g.beginPath();
    g.moveTo(14, 14);
    g.bezierCurveTo(13.95, 14.69, 12.73, 15, 12, 15);
    g.lineTo(5.67, 15);
    g.lineTo(4, 14);
    g.lineTo(4, 8);
    g.bezierCurveTo(5.36, 8, 6.11, 7.25, 7.13, 6.12);
    g.bezierCurveTo(8.36, 4.76, 8.27, 3.56, 8.01, 1.99);
    g.bezierCurveTo(7.93, 1.49, 8.51, 0.99, 9.01, 0.99);
    g.bezierCurveTo(9.84, 0.99, 11.01, 3.72, 11.01, 4.99);
    g.lineTo(10.99, 6.02);
    g.bezierCurveTo(10.99, 6.71, 11.32, 6.99, 12.01, 6.99);
    g.lineTo(14.01, 6.99);
    g.bezierCurveTo(14.64, 6.99, 14.99, 7.35, 15.01, 7.99);
    g.lineTo(14.01, 13.99);
    g.lineTo(14, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(14, 6);
    g.lineTo(11.98, 6);
    g.lineTo(12, 5.02);
    g.bezierCurveTo(12, 3.72, 10.83, 0, 9, 0);
    g.bezierCurveTo(8.42, 0, 7.83, 0.3, 7.44, 0.77);
    g.bezierCurveTo(7.08, 1.18, 6.94, 1.68, 7.02, 2.18);
    g.bezierCurveTo(7.27, 3.66, 7.3, 4.46, 6.39, 5.46);
    g.bezierCurveTo(5.39, 6.55, 4.91, 7.01, 4, 7.01);
    g.lineTo(2, 7.01);
    g.bezierCurveTo(0.94, 7, 0, 7.94, 0, 9);
    g.lineTo(0, 13);
    g.bezierCurveTo(0, 14.06, 0.94, 15, 2, 15);
    g.lineTo(3.72, 15);
    g.lineTo(5.16, 15.86);
    g.bezierCurveTo(5.32, 15.95, 5.49, 16, 5.68, 16);
    g.lineTo(12.01, 16);
    g.bezierCurveTo(13.14, 16, 14.85, 15.5, 15.01, 14.12);
    g.lineTo(15.99, 8.17);
    g.bezierCurveTo(16.01, 8.09, 16.01, 8.03, 16.01, 7.97);
    g.bezierCurveTo(15.98, 6.8, 15.17, 6, 14.01, 6);
    g.lineTo(14, 6);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['tools', 16, 16, g => {
    g.beginPath();
    g.moveTo(4.48, 7.27);
    g.bezierCurveTo(4.74, 7.53, 5.76, 8.6, 5.76, 8.6);
    g.lineTo(6.32, 8.02);
    g.lineTo(5.44, 7.11);
    g.lineTo(7.13, 5.31);
    g.bezierCurveTo(6.535, 4.715, 6.37, 4.57, 6.7, 4.86);
    g.bezierCurveTo(7.02, 3.67, 6.73, 2.35, 5.83, 1.42);
    g.bezierCurveTo(4.93, 0.5, 3.66, 0.2, 2.52, 0.51);
    g.lineTo(4.45, 2.51);
    g.lineTo(3.94, 4.47);
    g.lineTo(2.05, 4.99);
    g.lineTo(0.12, 2.99);
    g.bezierCurveTo(-0.19, 4.17, 0.1, 5.48, 1, 6.4);
    g.bezierCurveTo(1.94, 7.38, 3.29, 7.66, 4.48, 7.27);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10.92, 9.21);
    g.lineTo(8.59, 11.51);
    g.lineTo(12.43, 15.49);
    g.bezierCurveTo(12.74, 15.82, 13.16, 15.98, 13.57, 15.98);
    g.bezierCurveTo(13.98, 15.98, 14.39, 15.82, 14.71, 15.49);
    g.bezierCurveTo(15.34, 14.84, 15.34, 13.79, 14.71, 13.14);
    g.lineTo(10.92, 9.21);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(16, 2.53);
    g.lineTo(13.55, 0);
    g.lineTo(6.33, 7.46);
    g.lineTo(7.21, 8.37);
    g.lineTo(2.9, 12.83);
    g.lineTo(1.91, 13.36);
    g.lineTo(0.52, 15.63);
    g.lineTo(0.87, 16);
    g.lineTo(3.07, 14.56);
    g.lineTo(3.58, 13.54);
    g.lineTo(7.9, 9.08);
    g.lineTo(8.78, 9.99);
    g.lineTo(16, 2.53);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['trashcan', 12, 16, g => {
    g.beginPath();
    g.moveTo(11, 2);
    g.lineTo(9, 2);
    g.bezierCurveTo(9, 1.45, 8.55, 1, 8, 1);
    g.lineTo(5, 1);
    g.bezierCurveTo(4.45, 1, 4, 1.45, 4, 2);
    g.lineTo(2, 2);
    g.bezierCurveTo(1.45, 2, 1, 2.45, 1, 3);
    g.lineTo(1, 4);
    g.bezierCurveTo(1, 4.55, 1.45, 5, 2, 5);
    g.lineTo(2, 14);
    g.bezierCurveTo(2, 14.55, 2.45, 15, 3, 15);
    g.lineTo(10, 15);
    g.bezierCurveTo(10.55, 15, 11, 14.55, 11, 14);
    g.lineTo(11, 5);
    g.bezierCurveTo(11.55, 5, 12, 4.55, 12, 4);
    g.lineTo(12, 3);
    g.bezierCurveTo(12, 2.45, 11.55, 2, 11, 2);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10, 14);
    g.lineTo(3, 14);
    g.lineTo(3, 5);
    g.lineTo(4, 5);
    g.lineTo(4, 13);
    g.lineTo(5, 13);
    g.lineTo(5, 5);
    g.lineTo(6, 5);
    g.lineTo(6, 13);
    g.lineTo(7, 13);
    g.lineTo(7, 5);
    g.lineTo(8, 5);
    g.lineTo(8, 13);
    g.lineTo(9, 13);
    g.lineTo(9, 5);
    g.lineTo(10, 5);
    g.lineTo(10, 14);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 4);
    g.lineTo(2, 4);
    g.lineTo(2, 3);
    g.lineTo(11, 3);
    g.lineTo(11, 4);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['triangle-down', 12, 16, g => {
    g.beginPath();
    g.moveTo(0, 5);
    g.lineTo(6, 11);
    g.lineTo(12, 5);
    g.lineTo(0, 5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['triangle-left', 6, 16, g => {
    g.beginPath();
    g.moveTo(6, 2);
    g.lineTo(0, 8);
    g.lineTo(6, 14);
    g.lineTo(6, 2);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['triangle-right', 6, 16, g => {
    g.beginPath();
    g.moveTo(0, 14);
    g.lineTo(6, 8);
    g.lineTo(0, 2);
    g.lineTo(0, 14);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['triangle-up', 12, 16, g => {
    g.beginPath();
    g.moveTo(12, 11);
    g.lineTo(6, 5);
    g.lineTo(0, 11);
    g.lineTo(12, 11);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['unfold', 14, 16, g => {
    g.beginPath();
    g.moveTo(11.5, 7.5);
    g.lineTo(14, 10);
    g.bezierCurveTo(14, 10.55, 13.55, 11, 13, 11);
    g.lineTo(9, 11);
    g.lineTo(9, 10);
    g.lineTo(12.5, 10);
    g.lineTo(10.5, 8);
    g.lineTo(3.5, 8);
    g.lineTo(1.5, 10);
    g.lineTo(5, 10);
    g.lineTo(5, 11);
    g.lineTo(1, 11);
    g.bezierCurveTo(0.45, 11, 0, 10.55, 0, 10);
    g.lineTo(2.5, 7.5);
    g.lineTo(0, 5);
    g.bezierCurveTo(0, 4.45, 0.45, 4, 1, 4);
    g.lineTo(5, 4);
    g.lineTo(5, 5);
    g.lineTo(1.5, 5);
    g.lineTo(3.5, 7);
    g.lineTo(10.5, 7);
    g.lineTo(12.5, 5);
    g.lineTo(9, 5);
    g.lineTo(9, 4);
    g.lineTo(13, 4);
    g.bezierCurveTo(13.55, 4, 14, 4.45, 14, 5);
    g.lineTo(11.5, 7.5);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6, 6);
    g.lineTo(8, 6);
    g.lineTo(8, 3);
    g.lineTo(10, 3);
    g.lineTo(7, 0);
    g.lineTo(4, 3);
    g.lineTo(6, 3);
    g.lineTo(6, 6);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(8, 9);
    g.lineTo(6, 9);
    g.lineTo(6, 12);
    g.lineTo(4, 12);
    g.lineTo(7, 15);
    g.lineTo(10, 12);
    g.lineTo(8, 12);
    g.lineTo(8, 9);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['unmute', 16, 16, g => {
    g.beginPath();
    g.moveTo(12, 7.96);
    g.bezierCurveTo(12, 9.05, 11.55, 10.05, 10.83, 10.79);
    g.lineTo(10.16, 10.12);
    g.bezierCurveTo(10.71, 9.56, 11.05, 8.81, 11.05, 7.96);
    g.bezierCurveTo(11.05, 7.11, 10.71, 6.35, 10.16, 5.8);
    g.lineTo(10.83, 5.13);
    g.ellipse(8.01000664, 7.9527181, 3.99, 3.99, 0, 5.49730427, 6.28501035, false);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(7.72, 2.22);
    g.lineTo(4, 5.94);
    g.lineTo(2, 5.94);
    g.bezierCurveTo(1.45, 5.94, 1, 6.39, 1, 6.94);
    g.lineTo(1, 8.94);
    g.bezierCurveTo(1, 9.49, 1.45, 9.94, 2, 9.94);
    g.lineTo(4, 9.94);
    g.lineTo(7.72, 13.66);
    g.bezierCurveTo(8.19, 14.13, 9, 13.8, 9, 13.13);
    g.lineTo(9, 2.75);
    g.bezierCurveTo(9, 2.08, 8.19, 1.75, 7.72, 2.22);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(13.66, 2.3);
    g.lineTo(12.99, 2.97);
    g.ellipse(8.05403507, 7.92784895, 6.996, 6.996, 0, 5.49557526, 6.28635156, false);
    g.bezierCurveTo(15.05, 9.89, 14.27, 11.65, 12.99, 12.93);
    g.lineTo(13.66, 13.6);
    g.ellipse(8.02701912, 7.9574602, 7.973, 7.973, 0, -5.49693939, -0.00218992, true);
    g.bezierCurveTo(16, 5.72, 15.11, 3.72, 13.66, 2.28);
    g.lineTo(13.66, 2.3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12.25, 3.71);
    g.lineTo(11.56, 4.38);
    g.ellipse(7.99000668, 7.95178495, 5.05, 5.05, 0, 5.49753628, 6.28481205, false);
    g.bezierCurveTo(13.04, 9.35, 12.48, 10.62, 11.56, 11.52);
    g.lineTo(12.25, 12.19);
    g.ellipse(8.03000427, 7.96714125, 5.97, 5.97, 0, -5.49744804, -0.00119619, true);
    g.bezierCurveTo(14, 6.31, 13.33, 4.8, 12.25, 3.71);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['unverified', 16, 16, g => {
    g.beginPath();
    g.moveTo(15.68, 7.07);
    g.lineTo(14.6, 5.73);
    g.bezierCurveTo(14.43, 5.51, 14.32, 5.25, 14.29, 4.96);
    g.lineTo(14.1, 3.26);
    g.ellipse(12.5996408, 3.4303592, 1.51, 1.51, 0, -0.11306139, 4.82545037, true);
    g.lineTo(11.07, 1.74);
    g.bezierCurveTo(10.77, 1.71, 10.51, 1.58, 10.29, 1.41);
    g.lineTo(8.95, 0.33);
    g.bezierCurveTo(8.4, -0.11, 7.62, -0.11, 7.07, 0.33);
    g.lineTo(5.73, 1.41);
    g.bezierCurveTo(5.51, 1.58, 5.25, 1.69, 4.96, 1.72);
    g.lineTo(3.26, 1.91);
    g.bezierCurveTo(2.56, 1.99, 2.01, 2.54, 1.93, 3.24);
    g.lineTo(1.74, 4.94);
    g.bezierCurveTo(1.71, 5.24, 1.58, 5.5, 1.41, 5.72);
    g.lineTo(0.33, 7.06);
    g.bezierCurveTo(-0.11, 7.61, -0.11, 8.39, 0.33, 8.94);
    g.lineTo(1.41, 10.28);
    g.bezierCurveTo(1.58, 10.5, 1.69, 10.76, 1.72, 11.05);
    g.lineTo(1.91, 12.75);
    g.bezierCurveTo(1.99, 13.45, 2.54, 14, 3.24, 14.08);
    g.lineTo(4.94, 14.27);
    g.bezierCurveTo(5.24, 14.3, 5.5, 14.43, 5.72, 14.6);
    g.lineTo(7.06, 15.68);
    g.bezierCurveTo(7.61, 16.12, 8.39, 16.12, 8.94, 15.68);
    g.lineTo(10.28, 14.6);
    g.bezierCurveTo(10.5, 14.43, 10.76, 14.32, 11.05, 14.29);
    g.lineTo(12.75, 14.1);
    g.bezierCurveTo(13.45, 14.02, 14, 13.47, 14.08, 12.77);
    g.lineTo(14.27, 11.07);
    g.bezierCurveTo(14.3, 10.77, 14.43, 10.51, 14.6, 10.29);
    g.lineTo(15.68, 8.95);
    g.bezierCurveTo(16.12, 8.4, 16.12, 7.62, 15.68, 7.07);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(9.01, 11.51);
    g.bezierCurveTo(9.01, 11.79, 8.79, 12.01, 8.51, 12.01);
    g.lineTo(7.51, 12.01);
    g.bezierCurveTo(7.24, 12.01, 7.01, 11.79, 7.01, 11.51);
    g.lineTo(7.01, 10.51);
    g.bezierCurveTo(7.01, 10.23, 7.24, 10.01, 7.51, 10.01);
    g.lineTo(8.51, 10.01);
    g.bezierCurveTo(8.79, 10.01, 9.01, 10.23, 9.01, 10.51);
    g.lineTo(9.01, 11.51);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(10.57, 6.62);
    g.bezierCurveTo(10.51, 6.79, 10.4, 6.95, 10.27, 7.09);
    g.bezierCurveTo(10.14, 7.25, 10.13, 7.28, 9.94, 7.47);
    g.bezierCurveTo(9.78, 7.64, 9.63, 7.77, 9.42, 7.92);
    g.bezierCurveTo(9.31, 8.01, 9.22, 8.11, 9.14, 8.19);
    g.bezierCurveTo(9.06, 8.27, 9, 8.36, 8.95, 8.46);
    g.bezierCurveTo(8.9, 8.56, 8.87, 8.65, 8.84, 8.76);
    g.bezierCurveTo(8.81, 8.87, 8.81, 8.89, 8.81, 9.01);
    g.lineTo(7.14, 9.01);
    g.bezierCurveTo(7.14, 8.79, 7.14, 8.7, 7.17, 8.53);
    g.bezierCurveTo(7.2, 8.34, 7.25, 8.17, 7.31, 8.01);
    g.bezierCurveTo(7.37, 7.87, 7.45, 7.73, 7.56, 7.59);
    g.bezierCurveTo(7.67, 7.46, 7.79, 7.34, 7.97, 7.21);
    g.bezierCurveTo(8.24, 7.02, 8.33, 6.91, 8.45, 6.69);
    g.bezierCurveTo(8.57, 6.47, 8.65, 6.31, 8.65, 6.1);
    g.bezierCurveTo(8.65, 5.83, 8.59, 5.65, 8.45, 5.52);
    g.bezierCurveTo(8.32, 5.39, 8.14, 5.33, 7.87, 5.33);
    g.bezierCurveTo(7.78, 5.33, 7.68, 5.35, 7.57, 5.38);
    g.bezierCurveTo(7.46, 5.41, 7.4, 5.47, 7.32, 5.54);
    g.bezierCurveTo(7.24, 5.61, 7.18, 5.65, 7.12, 5.74);
    g.ellipse(7.43936087, 5.99711599, 0.41, 0.41, 0, -2.46375242, 3.08574898, true);
    g.lineTo(5.03, 6.02);
    g.bezierCurveTo(5.03, 5.64, 5.16, 5.46, 5.3, 5.19);
    g.bezierCurveTo(5.46, 4.92, 5.66, 4.69, 5.91, 4.52);
    g.bezierCurveTo(6.16, 4.35, 6.46, 4.22, 6.79, 4.14);
    g.bezierCurveTo(7.12, 4.06, 7.49, 4.01, 7.88, 4.01);
    g.bezierCurveTo(8.32, 4.01, 8.71, 4.06, 9.05, 4.14);
    g.bezierCurveTo(9.39, 4.23, 9.68, 4.36, 9.93, 4.53);
    g.bezierCurveTo(10.16, 4.7, 10.34, 4.91, 10.48, 5.16);
    g.bezierCurveTo(10.61, 5.41, 10.67, 5.71, 10.67, 6.04);
    g.bezierCurveTo(10.67, 6.26, 10.67, 6.46, 10.59, 6.63);
    g.lineTo(10.57, 6.62);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['verified', 16, 16, g => {
    g.beginPath();
    g.moveTo(15.68, 7.07);
    g.lineTo(14.6, 5.73);
    g.bezierCurveTo(14.43, 5.51, 14.32, 5.25, 14.29, 4.96);
    g.lineTo(14.1, 3.26);
    g.ellipse(12.5996408, 3.4303592, 1.51, 1.51, 0, -0.11306139, 4.82545037, true);
    g.lineTo(11.07, 1.74);
    g.bezierCurveTo(10.77, 1.71, 10.51, 1.58, 10.29, 1.41);
    g.lineTo(8.95, 0.33);
    g.bezierCurveTo(8.4, -0.11, 7.62, -0.11, 7.07, 0.33);
    g.lineTo(5.73, 1.41);
    g.bezierCurveTo(5.51, 1.58, 5.25, 1.69, 4.96, 1.72);
    g.lineTo(3.26, 1.91);
    g.bezierCurveTo(2.56, 1.99, 2.01, 2.54, 1.93, 3.24);
    g.lineTo(1.74, 4.94);
    g.bezierCurveTo(1.71, 5.24, 1.58, 5.5, 1.41, 5.72);
    g.lineTo(0.33, 7.06);
    g.bezierCurveTo(-0.11, 7.61, -0.11, 8.39, 0.33, 8.94);
    g.lineTo(1.41, 10.28);
    g.bezierCurveTo(1.58, 10.5, 1.69, 10.76, 1.72, 11.05);
    g.lineTo(1.91, 12.75);
    g.bezierCurveTo(1.99, 13.45, 2.54, 14, 3.24, 14.08);
    g.lineTo(4.94, 14.27);
    g.bezierCurveTo(5.24, 14.3, 5.5, 14.43, 5.72, 14.6);
    g.lineTo(7.06, 15.68);
    g.bezierCurveTo(7.61, 16.12, 8.39, 16.12, 8.94, 15.68);
    g.lineTo(10.28, 14.6);
    g.bezierCurveTo(10.5, 14.43, 10.76, 14.32, 11.05, 14.29);
    g.lineTo(12.75, 14.1);
    g.bezierCurveTo(13.45, 14.02, 14, 13.47, 14.08, 12.77);
    g.lineTo(14.27, 11.07);
    g.bezierCurveTo(14.3, 10.77, 14.43, 10.51, 14.6, 10.29);
    g.lineTo(15.68, 8.95);
    g.bezierCurveTo(16.12, 8.4, 16.12, 7.62, 15.68, 7.07);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(6.51, 12.01);
    g.lineTo(3.01, 8.51);
    g.lineTo(4.51, 7.01);
    g.lineTo(6.51, 9.01);
    g.lineTo(11.51, 4.01);
    g.lineTo(13.01, 5.56);
    g.lineTo(6.51, 12.01);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['versions', 14, 16, g => {
    g.beginPath();
    g.moveTo(13, 3);
    g.lineTo(7, 3);
    g.bezierCurveTo(6.45, 3, 6, 3.45, 6, 4);
    g.lineTo(6, 12);
    g.bezierCurveTo(6, 12.55, 6.45, 13, 7, 13);
    g.lineTo(13, 13);
    g.bezierCurveTo(13.55, 13, 14, 12.55, 14, 12);
    g.lineTo(14, 4);
    g.bezierCurveTo(14, 3.45, 13.55, 3, 13, 3);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 11);
    g.lineTo(8, 11);
    g.lineTo(8, 5);
    g.lineTo(12, 5);
    g.lineTo(12, 11);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(4, 4);
    g.lineTo(5, 4);
    g.lineTo(5, 5);
    g.lineTo(4, 5);
    g.lineTo(4, 11);
    g.lineTo(5, 11);
    g.lineTo(5, 12);
    g.lineTo(4, 12);
    g.bezierCurveTo(3.45, 12, 3, 11.55, 3, 11);
    g.lineTo(3, 5);
    g.bezierCurveTo(3, 4.45, 3.45, 4, 4, 4);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(1, 5);
    g.lineTo(2, 5);
    g.lineTo(2, 6);
    g.lineTo(1, 6);
    g.lineTo(1, 10);
    g.lineTo(2, 10);
    g.lineTo(2, 11);
    g.lineTo(1, 11);
    g.bezierCurveTo(0.45, 11, 0, 10.55, 0, 10);
    g.lineTo(0, 6);
    g.bezierCurveTo(0, 5.45, 0.45, 5, 1, 5);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['watch', 12, 16, g => {
    g.beginPath();
    g.moveTo(6, 8);
    g.lineTo(8, 8);
    g.lineTo(8, 9);
    g.lineTo(5, 9);
    g.lineTo(5, 5);
    g.lineTo(6, 5);
    g.lineTo(6, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(12, 8);
    g.bezierCurveTo(12, 10.22, 10.8, 12.16, 9, 13.19);
    g.lineTo(9, 15);
    g.bezierCurveTo(9, 15.55, 8.55, 16, 8, 16);
    g.lineTo(4, 16);
    g.bezierCurveTo(3.45, 16, 3, 15.55, 3, 15);
    g.lineTo(3, 13.19);
    g.bezierCurveTo(1.2, 12.16, 0, 10.22, 0, 8);
    g.bezierCurveTo(0, 5.78, 1.2, 3.84, 3, 2.81);
    g.lineTo(3, 1);
    g.bezierCurveTo(3, 0.45, 3.45, 0, 4, 0);
    g.lineTo(8, 0);
    g.bezierCurveTo(8.55, 0, 9, 0.45, 9, 1);
    g.lineTo(9, 2.81);
    g.bezierCurveTo(10.8, 3.84, 12, 5.78, 12, 8);
    g.closePath();
    g.fill();
    g.stroke();
    g.beginPath();
    g.moveTo(11, 8);
    g.bezierCurveTo(11, 5.23, 8.77, 3, 6, 3);
    g.bezierCurveTo(3.23, 3, 1, 5.23, 1, 8);
    g.bezierCurveTo(1, 10.77, 3.23, 13, 6, 13);
    g.bezierCurveTo(8.77, 13, 11, 10.77, 11, 8);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['x', 12, 16, g => {
    g.beginPath();
    g.moveTo(7.71, 8.23);
    g.lineTo(11.46, 11.98);
    g.lineTo(9.98, 13.46);
    g.lineTo(6.23, 9.71);
    g.lineTo(2.48, 13.46);
    g.lineTo(1, 11.98);
    g.lineTo(4.75, 8.23);
    g.lineTo(1, 4.48);
    g.lineTo(2.48, 3);
    g.lineTo(6.23, 6.75);
    g.lineTo(9.98, 3);
    g.lineTo(11.46, 4.48);
    g.lineTo(7.71, 8.23);
    g.closePath();
    g.fill();
    g.stroke();
  }],
  ['zap', 10, 16, g => {
    g.beginPath();
    g.moveTo(10, 7);
    g.lineTo(6, 7);
    g.lineTo(9, 0);
    g.lineTo(0, 9);
    g.lineTo(4, 9);
    g.lineTo(1, 16);
    g.lineTo(10, 7);
    g.closePath();
    g.fill();
    g.stroke();
  }],
];

module.exports = icons;